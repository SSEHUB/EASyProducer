/*
 * generated by Xtext 2.35.0
 */
package de.uni_hildesheim.sse.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IvmlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class VariabilityUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.VariabilityUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariabilityUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProjectsProjectParserRuleCall_1_0 = (RuleCall)cProjectsAssignment_1.eContents().get(0);
		
		//VariabilityUnit:
		//    {VariabilityUnit}
		//    projects+=Project*;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariabilityUnit}
		//projects+=Project*
		public Group getGroup() { return cGroup; }
		
		//{VariabilityUnit}
		public Action getVariabilityUnitAction_0() { return cVariabilityUnitAction_0; }
		
		//projects+=Project*
		public Assignment getProjectsAssignment_1() { return cProjectsAssignment_1; }
		
		//Project
		public RuleCall getProjectsProjectParserRuleCall_1_0() { return cProjectsProjectParserRuleCall_1_0; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionVersionStmtParserRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		private final Assignment cImportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportsImportStmtParserRuleCall_4_0 = (RuleCall)cImportsAssignment_4.eContents().get(0);
		private final Assignment cConflictsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConflictsConflictStmtParserRuleCall_5_0 = (RuleCall)cConflictsAssignment_5.eContents().get(0);
		private final Assignment cInterfacesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInterfacesInterfaceDeclarationParserRuleCall_6_0 = (RuleCall)cInterfacesAssignment_6.eContents().get(0);
		private final Assignment cContentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContentsProjectContentsParserRuleCall_7_0 = (RuleCall)cContentsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Project:
		//    'project' name=Identifier
		//    '{'
		//     //#> Interfaces
		//      version=VersionStmt?
		//      imports+=ImportStmt*
		//      conflicts+=ConflictStmt*
		//      interfaces += InterfaceDeclaration*
		//      //#< Interfaces
		//      contents=ProjectContents
		//    '}' ';'?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'project' name=Identifier
		//'{'
		// //#> Interfaces
		//  version=VersionStmt?
		//  imports+=ImportStmt*
		//  conflicts+=ConflictStmt*
		//  interfaces += InterfaceDeclaration*
		//  //#< Interfaces
		//  contents=ProjectContents
		//'}' ';'?
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		////#> Interfaces
		// version=VersionStmt?
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }
		
		//VersionStmt
		public RuleCall getVersionVersionStmtParserRuleCall_3_0() { return cVersionVersionStmtParserRuleCall_3_0; }
		
		//imports+=ImportStmt*
		public Assignment getImportsAssignment_4() { return cImportsAssignment_4; }
		
		//ImportStmt
		public RuleCall getImportsImportStmtParserRuleCall_4_0() { return cImportsImportStmtParserRuleCall_4_0; }
		
		//conflicts+=ConflictStmt*
		public Assignment getConflictsAssignment_5() { return cConflictsAssignment_5; }
		
		//ConflictStmt
		public RuleCall getConflictsConflictStmtParserRuleCall_5_0() { return cConflictsConflictStmtParserRuleCall_5_0; }
		
		//interfaces += InterfaceDeclaration*
		public Assignment getInterfacesAssignment_6() { return cInterfacesAssignment_6; }
		
		//InterfaceDeclaration
		public RuleCall getInterfacesInterfaceDeclarationParserRuleCall_6_0() { return cInterfacesInterfaceDeclarationParserRuleCall_6_0; }
		
		////#< Interfaces
		//contents=ProjectContents
		public Assignment getContentsAssignment_7() { return cContentsAssignment_7; }
		
		//ProjectContents
		public RuleCall getContentsProjectContentsParserRuleCall_7_0() { return cContentsProjectContentsParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//';'?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class ProjectContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ProjectContents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProjectContentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cElementsTypedefParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cElementsVariableDeclarationParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cElementsFreezeParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		private final Assignment cElementsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cElementsEvalParserRuleCall_1_3_0 = (RuleCall)cElementsAssignment_1_3.eContents().get(0);
		private final Assignment cElementsAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cElementsExpressionStatementParserRuleCall_1_4_0 = (RuleCall)cElementsAssignment_1_4.eContents().get(0);
		private final Assignment cElementsAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cElementsAnnotateToParserRuleCall_1_5_0 = (RuleCall)cElementsAssignment_1_5.eContents().get(0);
		private final Assignment cElementsAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cElementsOpDefStatementParserRuleCall_1_6_0 = (RuleCall)cElementsAssignment_1_6.eContents().get(0);
		private final Assignment cElementsAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cElementsAttrAssignmentParserRuleCall_1_7_0 = (RuleCall)cElementsAssignment_1_7.eContents().get(0);
		
		//ProjectContents:
		//    {ProjectContents} // ensure object creation
		//     (
		//         // in case of new elements adjust Utils.split
		//        elements+=Typedef
		//        | elements+=VariableDeclaration
		//        //#> EvalFreeze
		//        | elements+=Freeze
		//        | elements+=Eval
		//        //#< EvalFreeze
		//        | elements+=ExpressionStatement
		//        //#> Compounds
		//        | elements+=AnnotateTo
		//        //#< Compounds
		//        | elements+=OpDefStatement
		//        | elements+=AttrAssignment
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ProjectContents} // ensure object creation
		// (
		//     // in case of new elements adjust Utils.split
		//    elements+=Typedef
		//    | elements+=VariableDeclaration
		//    //#> EvalFreeze
		//    | elements+=Freeze
		//    | elements+=Eval
		//    //#< EvalFreeze
		//    | elements+=ExpressionStatement
		//    //#> Compounds
		//    | elements+=AnnotateTo
		//    //#< Compounds
		//    | elements+=OpDefStatement
		//    | elements+=AttrAssignment
		//)*
		public Group getGroup() { return cGroup; }
		
		//{ProjectContents}
		public Action getProjectContentsAction_0() { return cProjectContentsAction_0; }
		
		//// ensure object creation
		//    (
		//        // in case of new elements adjust Utils.split
		//       elements+=Typedef
		//       | elements+=VariableDeclaration
		//       //#> EvalFreeze
		//       | elements+=Freeze
		//       | elements+=Eval
		//       //#< EvalFreeze
		//       | elements+=ExpressionStatement
		//       //#> Compounds
		//       | elements+=AnnotateTo
		//       //#< Compounds
		//       | elements+=OpDefStatement
		//       | elements+=AttrAssignment
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		// // in case of new elements adjust Utils.split
		//elements+=Typedef
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }
		
		//Typedef
		public RuleCall getElementsTypedefParserRuleCall_1_0_0() { return cElementsTypedefParserRuleCall_1_0_0; }
		
		//elements+=VariableDeclaration
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//VariableDeclaration
		public RuleCall getElementsVariableDeclarationParserRuleCall_1_1_0() { return cElementsVariableDeclarationParserRuleCall_1_1_0; }
		
		//elements+=Freeze
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//Freeze
		public RuleCall getElementsFreezeParserRuleCall_1_2_0() { return cElementsFreezeParserRuleCall_1_2_0; }
		
		//elements+=Eval
		public Assignment getElementsAssignment_1_3() { return cElementsAssignment_1_3; }
		
		//Eval
		public RuleCall getElementsEvalParserRuleCall_1_3_0() { return cElementsEvalParserRuleCall_1_3_0; }
		
		//elements+=ExpressionStatement
		public Assignment getElementsAssignment_1_4() { return cElementsAssignment_1_4; }
		
		//ExpressionStatement
		public RuleCall getElementsExpressionStatementParserRuleCall_1_4_0() { return cElementsExpressionStatementParserRuleCall_1_4_0; }
		
		//elements+=AnnotateTo
		public Assignment getElementsAssignment_1_5() { return cElementsAssignment_1_5; }
		
		//AnnotateTo
		public RuleCall getElementsAnnotateToParserRuleCall_1_5_0() { return cElementsAnnotateToParserRuleCall_1_5_0; }
		
		//elements+=OpDefStatement
		public Assignment getElementsAssignment_1_6() { return cElementsAssignment_1_6; }
		
		//OpDefStatement
		public RuleCall getElementsOpDefStatementParserRuleCall_1_6_0() { return cElementsOpDefStatementParserRuleCall_1_6_0; }
		
		//elements+=AttrAssignment
		public Assignment getElementsAssignment_1_7() { return cElementsAssignment_1_7; }
		
		//AttrAssignment
		public RuleCall getElementsAttrAssignmentParserRuleCall_1_7_0() { return cElementsAttrAssignmentParserRuleCall_1_7_0; }
	}
	public class TypedefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Typedef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTEnumAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTEnumTypedefEnumParserRuleCall_0_0 = (RuleCall)cTEnumAssignment_0.eContents().get(0);
		private final Assignment cTCompoundAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTCompoundTypedefCompoundParserRuleCall_1_0 = (RuleCall)cTCompoundAssignment_1.eContents().get(0);
		private final Assignment cTMappingAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTMappingTypedefMappingParserRuleCall_2_0 = (RuleCall)cTMappingAssignment_2.eContents().get(0);
		
		//Typedef:
		//    tEnum=TypedefEnum
		//    | tCompound=TypedefCompound
		//    | tMapping=TypedefMapping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tEnum=TypedefEnum
		//| tCompound=TypedefCompound
		//| tMapping=TypedefMapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tEnum=TypedefEnum
		public Assignment getTEnumAssignment_0() { return cTEnumAssignment_0; }
		
		//TypedefEnum
		public RuleCall getTEnumTypedefEnumParserRuleCall_0_0() { return cTEnumTypedefEnumParserRuleCall_0_0; }
		
		//tCompound=TypedefCompound
		public Assignment getTCompoundAssignment_1() { return cTCompoundAssignment_1; }
		
		//TypedefCompound
		public RuleCall getTCompoundTypedefCompoundParserRuleCall_1_0() { return cTCompoundTypedefCompoundParserRuleCall_1_0; }
		
		//tMapping=TypedefMapping
		public Assignment getTMappingAssignment_2() { return cTMappingAssignment_2; }
		
		//TypedefMapping
		public RuleCall getTMappingTypedefMappingParserRuleCall_2_0() { return cTMappingTypedefMappingParserRuleCall_2_0; }
	}
	public class TypedefEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.TypedefEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsTypedefEnumLiteralParserRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLiteralsTypedefEnumLiteralParserRuleCall_4_1_0 = (RuleCall)cLiteralsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConstraintAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstraintTypedefConstraintParserRuleCall_6_0 = (RuleCall)cConstraintAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TypedefEnum:
		//    'enum'
		//    name=Identifier
		//    '{'
		//        literals+=TypedefEnumLiteral
		//        (
		//            ','
		//            literals+=TypedefEnumLiteral
		//        )*
		//    '}'
		//    constraint=TypedefConstraint?
		//    ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum'
		//name=Identifier
		//'{'
		//    literals+=TypedefEnumLiteral
		//    (
		//        ','
		//        literals+=TypedefEnumLiteral
		//    )*
		//'}'
		//constraint=TypedefConstraint?
		//';'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//literals+=TypedefEnumLiteral
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }
		
		//TypedefEnumLiteral
		public RuleCall getLiteralsTypedefEnumLiteralParserRuleCall_3_0() { return cLiteralsTypedefEnumLiteralParserRuleCall_3_0; }
		
		//(
		//    ','
		//    literals+=TypedefEnumLiteral
		//)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//literals+=TypedefEnumLiteral
		public Assignment getLiteralsAssignment_4_1() { return cLiteralsAssignment_4_1; }
		
		//TypedefEnumLiteral
		public RuleCall getLiteralsTypedefEnumLiteralParserRuleCall_4_1_0() { return cLiteralsTypedefEnumLiteralParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//constraint=TypedefConstraint?
		public Assignment getConstraintAssignment_6() { return cConstraintAssignment_6; }
		
		//TypedefConstraint
		public RuleCall getConstraintTypedefConstraintParserRuleCall_6_0() { return cConstraintTypedefConstraintParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class TypedefEnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.TypedefEnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNumValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//TypedefEnumLiteral:
		//    name=Identifier
		//    (
		//        '=' value = NumValue
		//    )?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Identifier
		//(
		//    '=' value = NumValue
		//)?
		public Group getGroup() { return cGroup; }
		
		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }
		
		//(
		//    '=' value = NumValue
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//value = NumValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//NumValue
		public RuleCall getValueNumValueParserRuleCall_1_1_0() { return cValueNumValueParserRuleCall_1_1_0; }
	}
	public class TypedefCompoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.TypedefCompound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cCompoundKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRefinesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperIdentifierParserRuleCall_3_1_0 = (RuleCall)cSuperAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSuperIdentifierParserRuleCall_3_2_1_0 = (RuleCall)cSuperAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cElementsVariableDeclarationParserRuleCall_5_0_0 = (RuleCall)cElementsAssignment_5_0.eContents().get(0);
		private final Assignment cElementsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cElementsExpressionStatementParserRuleCall_5_1_0 = (RuleCall)cElementsAssignment_5_1.eContents().get(0);
		private final Assignment cElementsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cElementsAttrAssignmentParserRuleCall_5_2_0 = (RuleCall)cElementsAssignment_5_2.eContents().get(0);
		private final Assignment cElementsAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cElementsEvalParserRuleCall_5_3_0 = (RuleCall)cElementsAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TypedefCompound:
		//    (abstract = 'abstract')? 'compound'
		//    name=Identifier
		//    //#> Compounds
		//    (
		//        'refines'
		//        super+=Identifier (',' super+=Identifier)*
		//    )?
		//    //#< Compounds
		//    '{'
		//        (elements+=VariableDeclaration
		//            | elements+=ExpressionStatement
		//            | elements+=AttrAssignment
		//            | elements+=Eval
		//        )*
		//    '}' ';'?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(abstract = 'abstract')? 'compound'
		//name=Identifier
		////#> Compounds
		//(
		//    'refines'
		//    super+=Identifier (',' super+=Identifier)*
		//)?
		////#< Compounds
		//'{'
		//    (elements+=VariableDeclaration
		//        | elements+=ExpressionStatement
		//        | elements+=AttrAssignment
		//        | elements+=Eval
		//    )*
		//'}' ';'?
		public Group getGroup() { return cGroup; }
		
		//(abstract = 'abstract')?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//'compound'
		public Keyword getCompoundKeyword_1() { return cCompoundKeyword_1; }
		
		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }
		
		////#> Compounds
		//(
		//    'refines'
		//    super+=Identifier (',' super+=Identifier)*
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'refines'
		public Keyword getRefinesKeyword_3_0() { return cRefinesKeyword_3_0; }
		
		//super+=Identifier
		public Assignment getSuperAssignment_3_1() { return cSuperAssignment_3_1; }
		
		//Identifier
		public RuleCall getSuperIdentifierParserRuleCall_3_1_0() { return cSuperIdentifierParserRuleCall_3_1_0; }
		
		//(',' super+=Identifier)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//super+=Identifier
		public Assignment getSuperAssignment_3_2_1() { return cSuperAssignment_3_2_1; }
		
		//Identifier
		public RuleCall getSuperIdentifierParserRuleCall_3_2_1_0() { return cSuperIdentifierParserRuleCall_3_2_1_0; }
		
		////#< Compounds
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(elements+=VariableDeclaration
		//    | elements+=ExpressionStatement
		//    | elements+=AttrAssignment
		//    | elements+=Eval
		//)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//elements+=VariableDeclaration
		public Assignment getElementsAssignment_5_0() { return cElementsAssignment_5_0; }
		
		//VariableDeclaration
		public RuleCall getElementsVariableDeclarationParserRuleCall_5_0_0() { return cElementsVariableDeclarationParserRuleCall_5_0_0; }
		
		//elements+=ExpressionStatement
		public Assignment getElementsAssignment_5_1() { return cElementsAssignment_5_1; }
		
		//ExpressionStatement
		public RuleCall getElementsExpressionStatementParserRuleCall_5_1_0() { return cElementsExpressionStatementParserRuleCall_5_1_0; }
		
		//elements+=AttrAssignment
		public Assignment getElementsAssignment_5_2() { return cElementsAssignment_5_2; }
		
		//AttrAssignment
		public RuleCall getElementsAttrAssignmentParserRuleCall_5_2_0() { return cElementsAttrAssignmentParserRuleCall_5_2_0; }
		
		//elements+=Eval
		public Assignment getElementsAssignment_5_3() { return cElementsAssignment_5_3; }
		
		//Eval
		public RuleCall getElementsEvalParserRuleCall_5_3_0() { return cElementsEvalParserRuleCall_5_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class AttrAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AttrAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartsAttrAssignmentPartParserRuleCall_2_0 = (RuleCall)cPartsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPartsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPartsAttrAssignmentPartParserRuleCall_3_1_0 = (RuleCall)cPartsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cElementsAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cElementsVariableDeclarationParserRuleCall_7_0_0 = (RuleCall)cElementsAssignment_7_0.eContents().get(0);
		private final Assignment cElementsAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cElementsExpressionStatementParserRuleCall_7_1_0 = (RuleCall)cElementsAssignment_7_1.eContents().get(0);
		private final Assignment cElementsAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cElementsAttrAssignmentParserRuleCall_7_2_0 = (RuleCall)cElementsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AttrAssignment:
		//    'assign' '(' parts+=AttrAssignmentPart (',' parts+=AttrAssignmentPart)* ')' 'to' '{'
		//        (elements+=VariableDeclaration | elements+=ExpressionStatement | elements+=AttrAssignment)+
		//    '}' ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'assign' '(' parts+=AttrAssignmentPart (',' parts+=AttrAssignmentPart)* ')' 'to' '{'
		//    (elements+=VariableDeclaration | elements+=ExpressionStatement | elements+=AttrAssignment)+
		//'}' ';'?
		public Group getGroup() { return cGroup; }
		
		//'assign'
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parts+=AttrAssignmentPart
		public Assignment getPartsAssignment_2() { return cPartsAssignment_2; }
		
		//AttrAssignmentPart
		public RuleCall getPartsAttrAssignmentPartParserRuleCall_2_0() { return cPartsAttrAssignmentPartParserRuleCall_2_0; }
		
		//(',' parts+=AttrAssignmentPart)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parts+=AttrAssignmentPart
		public Assignment getPartsAssignment_3_1() { return cPartsAssignment_3_1; }
		
		//AttrAssignmentPart
		public RuleCall getPartsAttrAssignmentPartParserRuleCall_3_1_0() { return cPartsAttrAssignmentPartParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(elements+=VariableDeclaration | elements+=ExpressionStatement | elements+=AttrAssignment)+
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//elements+=VariableDeclaration
		public Assignment getElementsAssignment_7_0() { return cElementsAssignment_7_0; }
		
		//VariableDeclaration
		public RuleCall getElementsVariableDeclarationParserRuleCall_7_0_0() { return cElementsVariableDeclarationParserRuleCall_7_0_0; }
		
		//elements+=ExpressionStatement
		public Assignment getElementsAssignment_7_1() { return cElementsAssignment_7_1; }
		
		//ExpressionStatement
		public RuleCall getElementsExpressionStatementParserRuleCall_7_1_0() { return cElementsExpressionStatementParserRuleCall_7_1_0; }
		
		//elements+=AttrAssignment
		public Assignment getElementsAssignment_7_2() { return cElementsAssignment_7_2; }
		
		//AttrAssignment
		public RuleCall getElementsAttrAssignmentParserRuleCall_7_2_0() { return cElementsAttrAssignmentParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//';'?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class AttrAssignmentPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AttrAssignmentPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLogicalExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttrAssignmentPart:
		//    name=Identifier '=' value=LogicalExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Identifier '=' value=LogicalExpression
		public Group getGroup() { return cGroup; }
		
		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=LogicalExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//LogicalExpression
		public RuleCall getValueLogicalExpressionParserRuleCall_2_0() { return cValueLogicalExpressionParserRuleCall_2_0; }
	}
	public class TypedefMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.TypedefMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNewTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNewTypeIdentifierParserRuleCall_1_0 = (RuleCall)cNewTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cConstraintAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintTypedefConstraintParserRuleCall_3_0 = (RuleCall)cConstraintAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypedefMapping:
		//    'typedef'
		//    newType=Identifier
		//    type=Type
		//    constraint=TypedefConstraint?
		//    ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'typedef'
		//newType=Identifier
		//type=Type
		//constraint=TypedefConstraint?
		//';'
		public Group getGroup() { return cGroup; }
		
		//'typedef'
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }
		
		//newType=Identifier
		public Assignment getNewTypeAssignment_1() { return cNewTypeAssignment_1; }
		
		//Identifier
		public RuleCall getNewTypeIdentifierParserRuleCall_1_0() { return cNewTypeIdentifierParserRuleCall_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//constraint=TypedefConstraint?
		public Assignment getConstraintAssignment_3() { return cConstraintAssignment_3; }
		
		//TypedefConstraint
		public RuleCall getConstraintTypedefConstraintParserRuleCall_3_0() { return cConstraintTypedefConstraintParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TypedefConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.TypedefConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypedefConstraint:
		//    'with'
		//    '('
		//        expressions = Expression
		//    ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'with'
		//'('
		//    expressions = Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expressions = Expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cDeclsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclsVariableDeclarationPartParserRuleCall_2_0 = (RuleCall)cDeclsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDeclsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclsVariableDeclarationPartParserRuleCall_3_1_0 = (RuleCall)cDeclsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VariableDeclaration :
		//    const='const'?
		//    type=Type
		//    decls+=VariableDeclarationPart
		//    (
		//        ','
		//        decls+=VariableDeclarationPart
		//    )*
		//    ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//const='const'?
		//type=Type
		//decls+=VariableDeclarationPart
		//(
		//    ','
		//    decls+=VariableDeclarationPart
		//)*
		//';'
		public Group getGroup() { return cGroup; }
		
		//const='const'?
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }
		
		//'const'
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//decls+=VariableDeclarationPart
		public Assignment getDeclsAssignment_2() { return cDeclsAssignment_2; }
		
		//VariableDeclarationPart
		public RuleCall getDeclsVariableDeclarationPartParserRuleCall_2_0() { return cDeclsVariableDeclarationPartParserRuleCall_2_0; }
		
		//(
		//    ','
		//    decls+=VariableDeclarationPart
		//)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//decls+=VariableDeclarationPart
		public Assignment getDeclsAssignment_3_1() { return cDeclsAssignment_3_1; }
		
		//VariableDeclarationPart
		public RuleCall getDeclsVariableDeclarationPartParserRuleCall_3_1_0() { return cDeclsVariableDeclarationPartParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class VariableDeclarationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.VariableDeclarationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDefaultAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDefaultExpressionParserRuleCall_1_1_0 = (RuleCall)cDefaultAssignment_1_1.eContents().get(0);
		
		//VariableDeclarationPart :
		//    name=Identifier ('=' default=Expression)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Identifier ('=' default=Expression)?
		public Group getGroup() { return cGroup; }
		
		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }
		
		//('=' default=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//default=Expression
		public Assignment getDefaultAssignment_1_1() { return cDefaultAssignment_1_1; }
		
		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_1_1_0() { return cDefaultExpressionParserRuleCall_1_1_0; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeIntegerKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeRealKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeBooleanKeyword_2_0 = (Keyword)cTypeAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTypeStringKeyword_3_0 = (Keyword)cTypeAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTypeConstraintKeyword_4_0 = (Keyword)cTypeAssignment_4.eContents().get(0);
		private final Assignment cTypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cTypeAnyKeyword_5_0 = (Keyword)cTypeAssignment_5.eContents().get(0);
		
		//BasicType :
		//    type='Integer'
		//    | type='Real'
		//    | type='Boolean'
		//    | type='String'
		//    | type='Constraint'
		//    | type='Any'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//type='Integer'
		//| type='Real'
		//| type='Boolean'
		//| type='String'
		//| type='Constraint'
		//| type='Any'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type='Integer'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'Integer'
		public Keyword getTypeIntegerKeyword_0_0() { return cTypeIntegerKeyword_0_0; }
		
		//type='Real'
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//'Real'
		public Keyword getTypeRealKeyword_1_0() { return cTypeRealKeyword_1_0; }
		
		//type='Boolean'
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//'Boolean'
		public Keyword getTypeBooleanKeyword_2_0() { return cTypeBooleanKeyword_2_0; }
		
		//type='String'
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//'String'
		public Keyword getTypeStringKeyword_3_0() { return cTypeStringKeyword_3_0; }
		
		//type='Constraint'
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//'Constraint'
		public Keyword getTypeConstraintKeyword_4_0() { return cTypeConstraintKeyword_4_0; }
		
		//type='Any'
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//'Any'
		public Keyword getTypeAnyKeyword_5_0() { return cTypeAnyKeyword_5_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeBasicTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdQualifiedNameParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cDerivedAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDerivedDerivedTypeParserRuleCall_2_0 = (RuleCall)cDerivedAssignment_2.eContents().get(0);
		
		//Type :
		//    type=BasicType
		//    | id=QualifiedName
		//    | derived=DerivedType
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//type=BasicType
		//| id=QualifiedName
		//| derived=DerivedType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=BasicType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//BasicType
		public RuleCall getTypeBasicTypeParserRuleCall_0_0() { return cTypeBasicTypeParserRuleCall_0_0; }
		
		//id=QualifiedName
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//QualifiedName
		public RuleCall getIdQualifiedNameParserRuleCall_1_0() { return cIdQualifiedNameParserRuleCall_1_0; }
		
		//derived=DerivedType
		public Assignment getDerivedAssignment_2() { return cDerivedAssignment_2; }
		
		//DerivedType
		public RuleCall getDerivedDerivedTypeParserRuleCall_2_0() { return cDerivedDerivedTypeParserRuleCall_2_0; }
	}
	public class NumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.NumValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValNUMBERTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//// just return string
		//NumValue :
		//    val=NUMBER
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//val=NUMBER
		public Assignment getValAssignment() { return cValAssignment; }
		
		//NUMBER
		public RuleCall getValNUMBERTerminalRuleCall_0() { return cValNUMBERTerminalRuleCall_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cQNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cQNameIdentifierParserRuleCall_0_0_0 = (RuleCall)cQNameAssignment_0_0.eContents().get(0);
		private final Assignment cQNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cQNameColonColonKeyword_0_1_0 = (Keyword)cQNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cQNameAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cQNameIdentifierParserRuleCall_0_2_0_0 = (RuleCall)cQNameAssignment_0_2_0.eContents().get(0);
		private final Assignment cQNameAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final Keyword cQNameColonColonKeyword_0_2_1_0 = (Keyword)cQNameAssignment_0_2_1.eContents().get(0);
		private final Assignment cQNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQNameIdentifierParserRuleCall_1_0 = (RuleCall)cQNameAssignment_1.eContents().get(0);
		
		//QualifiedName :
		//    (
		//        qName+=Identifier
		//        qName+='::'
		//        (
		//            qName+=Identifier
		//            qName+='::'
		//        )*
		//    )?
		//    qName+=Identifier
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    qName+=Identifier
		//    qName+='::'
		//    (
		//        qName+=Identifier
		//        qName+='::'
		//    )*
		//)?
		//qName+=Identifier
		public Group getGroup() { return cGroup; }
		
		//(
		//    qName+=Identifier
		//    qName+='::'
		//    (
		//        qName+=Identifier
		//        qName+='::'
		//    )*
		//)?
		public Group getGroup_0() { return cGroup_0; }
		
		//qName+=Identifier
		public Assignment getQNameAssignment_0_0() { return cQNameAssignment_0_0; }
		
		//Identifier
		public RuleCall getQNameIdentifierParserRuleCall_0_0_0() { return cQNameIdentifierParserRuleCall_0_0_0; }
		
		//qName+='::'
		public Assignment getQNameAssignment_0_1() { return cQNameAssignment_0_1; }
		
		//'::'
		public Keyword getQNameColonColonKeyword_0_1_0() { return cQNameColonColonKeyword_0_1_0; }
		
		//(
		//    qName+=Identifier
		//    qName+='::'
		//)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//qName+=Identifier
		public Assignment getQNameAssignment_0_2_0() { return cQNameAssignment_0_2_0; }
		
		//Identifier
		public RuleCall getQNameIdentifierParserRuleCall_0_2_0_0() { return cQNameIdentifierParserRuleCall_0_2_0_0; }
		
		//qName+='::'
		public Assignment getQNameAssignment_0_2_1() { return cQNameAssignment_0_2_1; }
		
		//'::'
		public Keyword getQNameColonColonKeyword_0_2_1_0() { return cQNameColonColonKeyword_0_2_1_0; }
		
		//qName+=Identifier
		public Assignment getQNameAssignment_1() { return cQNameAssignment_1; }
		
		//Identifier
		public RuleCall getQNameIdentifierParserRuleCall_1_0() { return cQNameIdentifierParserRuleCall_1_0; }
	}
	public class AccessNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AccessName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cANameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cANameFullStopKeyword_0_0 = (Keyword)cANameAssignment_0.eContents().get(0);
		private final Assignment cANameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cANameIdentifierParserRuleCall_1_0 = (RuleCall)cANameAssignment_1.eContents().get(0);
		
		//AccessName:
		//    (aName+='.' aName+=Identifier)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(aName+='.' aName+=Identifier)+
		public Group getGroup() { return cGroup; }
		
		//aName+='.'
		public Assignment getANameAssignment_0() { return cANameAssignment_0; }
		
		//'.'
		public Keyword getANameFullStopKeyword_0_0() { return cANameFullStopKeyword_0_0; }
		
		//aName+=Identifier
		public Assignment getANameAssignment_1() { return cANameAssignment_1; }
		
		//Identifier
		public RuleCall getANameIdentifierParserRuleCall_1_0() { return cANameIdentifierParserRuleCall_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNValueNumValueParserRuleCall_0_0 = (RuleCall)cNValueAssignment_0.eContents().get(0);
		private final Assignment cSValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cSValueAssignment_1.eContents().get(0);
		private final Assignment cQValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cQValueQualifiedNameParserRuleCall_2_0 = (RuleCall)cQValueAssignment_2.eContents().get(0);
		private final Assignment cBValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cBValueAlternatives_3_0 = (Alternatives)cBValueAssignment_3.eContents().get(0);
		private final Keyword cBValueTrueKeyword_3_0_0 = (Keyword)cBValueAlternatives_3_0.eContents().get(0);
		private final Keyword cBValueFalseKeyword_3_0_1 = (Keyword)cBValueAlternatives_3_0.eContents().get(1);
		private final Assignment cSelfAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cSelfSelfKeyword_4_0 = (Keyword)cSelfAssignment_4.eContents().get(0);
		private final Assignment cNullValueAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNullValueNullKeyword_5_0 = (Keyword)cNullValueAssignment_5.eContents().get(0);
		private final Assignment cTValueAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cTValueTypeParserRuleCall_6_0 = (RuleCall)cTValueAssignment_6.eContents().get(0);
		private final Assignment cVersionAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cVersionVERSIONTerminalRuleCall_7_0 = (RuleCall)cVersionAssignment_7.eContents().get(0);
		
		//Value :
		//    nValue = NumValue
		//    | sValue = STRING
		//    | qValue = QualifiedName
		//    | bValue = ('true' | 'false')
		//    | self = 'self'
		//    //#> Compounds
		//    | nullValue = 'null'
		//    | tValue = Type
		//    | => version = VERSION
		//    //#< Compounds
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//nValue = NumValue
		//| sValue = STRING
		//| qValue = QualifiedName
		//| bValue = ('true' | 'false')
		//| self = 'self'
		////#> Compounds
		//| nullValue = 'null'
		//| tValue = Type
		//| => version = VERSION
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nValue = NumValue
		public Assignment getNValueAssignment_0() { return cNValueAssignment_0; }
		
		//NumValue
		public RuleCall getNValueNumValueParserRuleCall_0_0() { return cNValueNumValueParserRuleCall_0_0; }
		
		//sValue = STRING
		public Assignment getSValueAssignment_1() { return cSValueAssignment_1; }
		
		//STRING
		public RuleCall getSValueSTRINGTerminalRuleCall_1_0() { return cSValueSTRINGTerminalRuleCall_1_0; }
		
		//qValue = QualifiedName
		public Assignment getQValueAssignment_2() { return cQValueAssignment_2; }
		
		//QualifiedName
		public RuleCall getQValueQualifiedNameParserRuleCall_2_0() { return cQValueQualifiedNameParserRuleCall_2_0; }
		
		//bValue = ('true' | 'false')
		public Assignment getBValueAssignment_3() { return cBValueAssignment_3; }
		
		//('true' | 'false')
		public Alternatives getBValueAlternatives_3_0() { return cBValueAlternatives_3_0; }
		
		//'true'
		public Keyword getBValueTrueKeyword_3_0_0() { return cBValueTrueKeyword_3_0_0; }
		
		//'false'
		public Keyword getBValueFalseKeyword_3_0_1() { return cBValueFalseKeyword_3_0_1; }
		
		//self = 'self'
		public Assignment getSelfAssignment_4() { return cSelfAssignment_4; }
		
		//'self'
		public Keyword getSelfSelfKeyword_4_0() { return cSelfSelfKeyword_4_0; }
		
		//nullValue = 'null'
		public Assignment getNullValueAssignment_5() { return cNullValueAssignment_5; }
		
		//'null'
		public Keyword getNullValueNullKeyword_5_0() { return cNullValueNullKeyword_5_0; }
		
		//tValue = Type
		public Assignment getTValueAssignment_6() { return cTValueAssignment_6; }
		
		//Type
		public RuleCall getTValueTypeParserRuleCall_6_0() { return cTValueTypeParserRuleCall_6_0; }
		
		//=> version = VERSION
		public Assignment getVersionAssignment_7() { return cVersionAssignment_7; }
		
		//VERSION
		public RuleCall getVersionVERSIONTerminalRuleCall_7_0() { return cVersionVERSIONTerminalRuleCall_7_0; }
	}
	public class DerivedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.DerivedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cOpSetOfKeyword_0_0_0 = (Keyword)cOpAssignment_0_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cOpSequenceOfKeyword_0_1_0 = (Keyword)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cOpRefToKeyword_0_2_0 = (Keyword)cOpAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DerivedType :
		//    (
		//        op='setOf'
		//        | op='sequenceOf'
		//        //#> Compounds
		//        | op='refTo'
		//        //#< Compounds
		//    )
		//    '('
		//    type=Type
		//    ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    op='setOf'
		//    | op='sequenceOf'
		//    //#> Compounds
		//    | op='refTo'
		//    //#< Compounds
		//)
		//'('
		//type=Type
		//')'
		public Group getGroup() { return cGroup; }
		
		//(
		//    op='setOf'
		//    | op='sequenceOf'
		//    //#> Compounds
		//    | op='refTo'
		//    //#< Compounds
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//op='setOf'
		public Assignment getOpAssignment_0_0() { return cOpAssignment_0_0; }
		
		//'setOf'
		public Keyword getOpSetOfKeyword_0_0_0() { return cOpSetOfKeyword_0_0_0; }
		
		//op='sequenceOf'
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//'sequenceOf'
		public Keyword getOpSequenceOfKeyword_0_1_0() { return cOpSequenceOfKeyword_0_1_0; }
		
		//op='refTo'
		public Assignment getOpAssignment_0_2() { return cOpAssignment_0_2; }
		
		//'refTo'
		public Keyword getOpRefToKeyword_0_2_0() { return cOpRefToKeyword_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AnnotateToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AnnotateTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSnameAlternatives_0_0 = (Alternatives)cSnameAssignment_0.eContents().get(0);
		private final Keyword cSnameAttributeKeyword_0_0_0 = (Keyword)cSnameAlternatives_0_0.eContents().get(0);
		private final Keyword cSnameAnnotateKeyword_0_0_1 = (Keyword)cSnameAlternatives_0_0.eContents().get(1);
		private final Assignment cAnnotationTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationTypeTypeParserRuleCall_1_0 = (RuleCall)cAnnotationTypeAssignment_1.eContents().get(0);
		private final Assignment cAnnotationDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationDeclVariableDeclarationPartParserRuleCall_2_0 = (RuleCall)cAnnotationDeclAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cNamesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Keyword cNamesFullStopKeyword_4_0_0 = (Keyword)cNamesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cNamesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cNamesIdentifierParserRuleCall_4_1_0_0 = (RuleCall)cNamesAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cNamesAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cNamesIdentifierParserRuleCall_4_1_1_1_0 = (RuleCall)cNamesAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////#> Compounds
		//// --------------------- Extension: Compounds ----------------------
		//AnnotateTo :
		//    sname=('attribute' | 'annotate')
		//    annotationType=Type
		//    annotationDecl=VariableDeclarationPart
		//    'to'
		//    (names+='.' | (names+=Identifier (',' names += Identifier)*))
		//    ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//sname=('attribute' | 'annotate')
		//annotationType=Type
		//annotationDecl=VariableDeclarationPart
		//'to'
		//(names+='.' | (names+=Identifier (',' names += Identifier)*))
		//';'
		public Group getGroup() { return cGroup; }
		
		//sname=('attribute' | 'annotate')
		public Assignment getSnameAssignment_0() { return cSnameAssignment_0; }
		
		//('attribute' | 'annotate')
		public Alternatives getSnameAlternatives_0_0() { return cSnameAlternatives_0_0; }
		
		//'attribute'
		public Keyword getSnameAttributeKeyword_0_0_0() { return cSnameAttributeKeyword_0_0_0; }
		
		//'annotate'
		public Keyword getSnameAnnotateKeyword_0_0_1() { return cSnameAnnotateKeyword_0_0_1; }
		
		//annotationType=Type
		public Assignment getAnnotationTypeAssignment_1() { return cAnnotationTypeAssignment_1; }
		
		//Type
		public RuleCall getAnnotationTypeTypeParserRuleCall_1_0() { return cAnnotationTypeTypeParserRuleCall_1_0; }
		
		//annotationDecl=VariableDeclarationPart
		public Assignment getAnnotationDeclAssignment_2() { return cAnnotationDeclAssignment_2; }
		
		//VariableDeclarationPart
		public RuleCall getAnnotationDeclVariableDeclarationPartParserRuleCall_2_0() { return cAnnotationDeclVariableDeclarationPartParserRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//(names+='.' | (names+=Identifier (',' names += Identifier)*))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//names+='.'
		public Assignment getNamesAssignment_4_0() { return cNamesAssignment_4_0; }
		
		//'.'
		public Keyword getNamesFullStopKeyword_4_0_0() { return cNamesFullStopKeyword_4_0_0; }
		
		//(names+=Identifier (',' names += Identifier)*)
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//names+=Identifier
		public Assignment getNamesAssignment_4_1_0() { return cNamesAssignment_4_1_0; }
		
		//Identifier
		public RuleCall getNamesIdentifierParserRuleCall_4_1_0_0() { return cNamesIdentifierParserRuleCall_4_1_0_0; }
		
		//(',' names += Identifier)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//names += Identifier
		public Assignment getNamesAssignment_4_1_1_1() { return cNamesAssignment_4_1_1_1; }
		
		//Identifier
		public RuleCall getNamesIdentifierParserRuleCall_4_1_1_1_0() { return cNamesIdentifierParserRuleCall_4_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FreezeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Freeze");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFreezeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNamesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamesFreezeStatementParserRuleCall_2_0 = (RuleCall)cNamesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cButKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cIdAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cIdIdentifierParserRuleCall_4_2_0 = (RuleCall)cIdAssignment_4_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cExAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cExLogicalExpressionParserRuleCall_4_4_0 = (RuleCall)cExAssignment_4_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////#< Compounds
		////#> EvalFreeze
		//// --------------------- Extension: EvalFreeze ---------------------
		//Freeze:
		//    'freeze' '{'
		//    names+=(FreezeStatement)+
		//    '}' ('but' '(' id=Identifier '|' ex=LogicalExpression ')')? ';'?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'freeze' '{'
		//names+=(FreezeStatement)+
		//'}' ('but' '(' id=Identifier '|' ex=LogicalExpression ')')? ';'?
		public Group getGroup() { return cGroup; }
		
		//'freeze'
		public Keyword getFreezeKeyword_0() { return cFreezeKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//names+=(FreezeStatement)+
		public Assignment getNamesAssignment_2() { return cNamesAssignment_2; }
		
		//(FreezeStatement)
		public RuleCall getNamesFreezeStatementParserRuleCall_2_0() { return cNamesFreezeStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//('but' '(' id=Identifier '|' ex=LogicalExpression ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'but'
		public Keyword getButKeyword_4_0() { return cButKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//id=Identifier
		public Assignment getIdAssignment_4_2() { return cIdAssignment_4_2; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_4_2_0() { return cIdIdentifierParserRuleCall_4_2_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_3() { return cVerticalLineKeyword_4_3; }
		
		//ex=LogicalExpression
		public Assignment getExAssignment_4_4() { return cExAssignment_4_4; }
		
		//LogicalExpression
		public RuleCall getExLogicalExpressionParserRuleCall_4_4_0() { return cExLogicalExpressionParserRuleCall_4_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FreezeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.FreezeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cDotAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cDotFullStopKeyword_0_0_0 = (Keyword)cDotAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Assignment cAccessAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cAccessAccessNameParserRuleCall_0_1_1_0 = (RuleCall)cAccessAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FreezeStatement:
		//    (dot='.' | (name=QualifiedName access=AccessName?))
		//    ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(dot='.' | (name=QualifiedName access=AccessName?))
		//';'
		public Group getGroup() { return cGroup; }
		
		//(dot='.' | (name=QualifiedName access=AccessName?))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//dot='.'
		public Assignment getDotAssignment_0_0() { return cDotAssignment_0_0; }
		
		//'.'
		public Keyword getDotFullStopKeyword_0_0_0() { return cDotFullStopKeyword_0_0_0; }
		
		//(name=QualifiedName access=AccessName?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0_0() { return cNameQualifiedNameParserRuleCall_0_1_0_0; }
		
		//access=AccessName?
		public Assignment getAccessAssignment_0_1_1() { return cAccessAssignment_0_1_1; }
		
		//AccessName
		public RuleCall getAccessAccessNameParserRuleCall_0_1_1_0() { return cAccessAccessNameParserRuleCall_0_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class EvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Eval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEvalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEvalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNestedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNestedEvalParserRuleCall_3_0 = (RuleCall)cNestedAssignment_3.eContents().get(0);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsExpressionStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Eval:
		//    {Eval}
		//    'eval'
		//    '{'
		//    nested+=Eval*
		//    statements+=ExpressionStatement*
		//    '}' ';'?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Eval}
		//'eval'
		//'{'
		//nested+=Eval*
		//statements+=ExpressionStatement*
		//'}' ';'?
		public Group getGroup() { return cGroup; }
		
		//{Eval}
		public Action getEvalAction_0() { return cEvalAction_0; }
		
		//'eval'
		public Keyword getEvalKeyword_1() { return cEvalKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//nested+=Eval*
		public Assignment getNestedAssignment_3() { return cNestedAssignment_3; }
		
		//Eval
		public RuleCall getNestedEvalParserRuleCall_3_0() { return cNestedEvalParserRuleCall_3_0; }
		
		//statements+=ExpressionStatement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//ExpressionStatement
		public RuleCall getStatementsExpressionStatementParserRuleCall_4_0() { return cStatementsExpressionStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.InterfaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExportsExportParserRuleCall_3_0 = (RuleCall)cExportsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////#< EvalFreeze
		////#> Interfaces
		//// ---------------------- Extension: Interfaces ---------------------
		//InterfaceDeclaration :
		//    'interface'
		//    name=Identifier
		//    '{'
		//        exports+=Export*
		//    '}'';'?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'interface'
		//name=Identifier
		//'{'
		//    exports+=Export*
		//'}'';'?
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//exports+=Export*
		public Assignment getExportsAssignment_3() { return cExportsAssignment_3; }
		
		//Export
		public RuleCall getExportsExportParserRuleCall_3_0() { return cExportsExportParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesQualifiedNameParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesQualifiedNameParserRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Export :
		//    'export' names+=QualifiedName (',' names+=QualifiedName)* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'export' names+=QualifiedName (',' names+=QualifiedName)* ';'
		public Group getGroup() { return cGroup; }
		
		//'export'
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }
		
		//names+=QualifiedName
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }
		
		//QualifiedName
		public RuleCall getNamesQualifiedNameParserRuleCall_1_0() { return cNamesQualifiedNameParserRuleCall_1_0; }
		
		//(',' names+=QualifiedName)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//names+=QualifiedName
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }
		
		//QualifiedName
		public RuleCall getNamesQualifiedNameParserRuleCall_2_1_0() { return cNamesQualifiedNameParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ImportStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ImportStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cInsertAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cInsertInsertKeyword_0_1_0 = (Keyword)cInsertAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfaceIdentifierParserRuleCall_2_1_0 = (RuleCall)cInterfaceAssignment_2_1.eContents().get(0);
		private final Assignment cWildcardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cWildcardAsteriskKeyword_3_0 = (Keyword)cWildcardAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRestrictionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRestrictionExpressionParserRuleCall_4_1_0 = (RuleCall)cRestrictionAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ImportStmt:
		//    ('import' | insert='insert')?
		//    name=Identifier ('::' interface=Identifier)? (wildcard="*"?)
		//    (
		//      'with' restriction = Expression
		//    )?
		//    ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//('import' | insert='insert')?
		//name=Identifier ('::' interface=Identifier)? (wildcard="*"?)
		//(
		//  'with' restriction = Expression
		//)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//('import' | insert='insert')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'import'
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }
		
		//insert='insert'
		public Assignment getInsertAssignment_0_1() { return cInsertAssignment_0_1; }
		
		//'insert'
		public Keyword getInsertInsertKeyword_0_1_0() { return cInsertInsertKeyword_0_1_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//('::' interface=Identifier)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'::'
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }
		
		//interface=Identifier
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }
		
		//Identifier
		public RuleCall getInterfaceIdentifierParserRuleCall_2_1_0() { return cInterfaceIdentifierParserRuleCall_2_1_0; }
		
		//(wildcard="*"?)
		public Assignment getWildcardAssignment_3() { return cWildcardAssignment_3; }
		
		//"*"
		public Keyword getWildcardAsteriskKeyword_3_0() { return cWildcardAsteriskKeyword_3_0; }
		
		//(
		//  'with' restriction = Expression
		//)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//restriction = Expression
		public Assignment getRestrictionAssignment_4_1() { return cRestrictionAssignment_4_1; }
		
		//Expression
		public RuleCall getRestrictionExpressionParserRuleCall_4_1_0() { return cRestrictionExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConflictStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ConflictStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConflictsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRestrictionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRestrictionExpressionParserRuleCall_2_1_0 = (RuleCall)cRestrictionAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConflictStmt:
		//    'conflicts'
		//    name=Identifier
		//    (
		//      'with' restriction = Expression
		//    )?
		//    ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'conflicts'
		//name=Identifier
		//(
		//  'with' restriction = Expression
		//)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//'conflicts'
		public Keyword getConflictsKeyword_0() { return cConflictsKeyword_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//(
		//  'with' restriction = Expression
		//)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }
		
		//restriction = Expression
		public Assignment getRestrictionAssignment_2_1() { return cRestrictionAssignment_2_1; }
		
		//Expression
		public RuleCall getRestrictionExpressionParserRuleCall_2_1_0() { return cRestrictionExpressionParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VersionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.VersionStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionVERSIONTerminalRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VersionStmt:
		//    'version'
		//    version=VERSION
		//    ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'version'
		//version=VERSION
		//';'
		public Group getGroup() { return cGroup; }
		
		//'version'
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }
		
		//version=VERSION
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }
		
		//VERSION
		public RuleCall getVersionVERSIONTerminalRuleCall_1_0() { return cVersionVERSIONTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class OpDefStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.OpDefStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationDeclarationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStaticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cStaticStaticKeyword_2_0 = (Keyword)cStaticAssignment_2.eContents().get(0);
		private final Assignment cResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultTypeParserRuleCall_3_0 = (RuleCall)cResultAssignment_3.eContents().get(0);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIdentifierParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParamAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamOpDefParameterListParserRuleCall_6_0 = (RuleCall)cParamAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cAlternatives_9.eContents().get(0);
		private final Assignment cImplAssignment_9_0_0 = (Assignment)cGroup_9_0.eContents().get(0);
		private final RuleCall cImplExpressionParserRuleCall_9_0_0_0 = (RuleCall)cImplAssignment_9_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_0_1 = (Keyword)cGroup_9_0.eContents().get(1);
		private final Assignment cBlockAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cBlockBlockExpressionParserRuleCall_9_1_0 = (RuleCall)cBlockAssignment_9_1.eContents().get(0);
		
		////#< Interfaces
		////------------------------------------ OCL (excerpt) ----------------------------
		//OpDefStatement:
		//    annotations=AnnotationDeclarations?
		//    'def' static='static'? result=Type id=Identifier
		//    '(' param=OpDefParameterList ')'
		//    '=' (impl=Expression ';' | block=BlockExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations=AnnotationDeclarations?
		//'def' static='static'? result=Type id=Identifier
		//'(' param=OpDefParameterList ')'
		//'=' (impl=Expression ';' | block=BlockExpression)
		public Group getGroup() { return cGroup; }
		
		//annotations=AnnotationDeclarations?
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AnnotationDeclarations
		public RuleCall getAnnotationsAnnotationDeclarationsParserRuleCall_0_0() { return cAnnotationsAnnotationDeclarationsParserRuleCall_0_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//static='static'?
		public Assignment getStaticAssignment_2() { return cStaticAssignment_2; }
		
		//'static'
		public Keyword getStaticStaticKeyword_2_0() { return cStaticStaticKeyword_2_0; }
		
		//result=Type
		public Assignment getResultAssignment_3() { return cResultAssignment_3; }
		
		//Type
		public RuleCall getResultTypeParserRuleCall_3_0() { return cResultTypeParserRuleCall_3_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_4_0() { return cIdIdentifierParserRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//param=OpDefParameterList
		public Assignment getParamAssignment_6() { return cParamAssignment_6; }
		
		//OpDefParameterList
		public RuleCall getParamOpDefParameterListParserRuleCall_6_0() { return cParamOpDefParameterListParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//(impl=Expression ';' | block=BlockExpression)
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//impl=Expression ';'
		public Group getGroup_9_0() { return cGroup_9_0; }
		
		//impl=Expression
		public Assignment getImplAssignment_9_0_0() { return cImplAssignment_9_0_0; }
		
		//Expression
		public RuleCall getImplExpressionParserRuleCall_9_0_0_0() { return cImplExpressionParserRuleCall_9_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9_0_1() { return cSemicolonKeyword_9_0_1; }
		
		//block=BlockExpression
		public Assignment getBlockAssignment_9_1() { return cBlockAssignment_9_1; }
		
		//BlockExpression
		public RuleCall getBlockBlockExpressionParserRuleCall_9_1_0() { return cBlockBlockExpressionParserRuleCall_9_1_0; }
	}
	public class AnnotationDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AnnotationDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		
		//AnnotationDeclarations:
		//    {AnnotationDeclarations}
		//    ('@' id+=Identifier)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AnnotationDeclarations}
		//('@' id+=Identifier)*
		public Group getGroup() { return cGroup; }
		
		//{AnnotationDeclarations}
		public Action getAnnotationDeclarationsAction_0() { return cAnnotationDeclarationsAction_0; }
		
		//('@' id+=Identifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//id+=Identifier
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_1_0() { return cIdIdentifierParserRuleCall_1_1_0; }
	}
	public class OpDefParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.OpDefParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpDefParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cListOpDefParameterParserRuleCall_1_0_0 = (RuleCall)cListAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cListOpDefParameterParserRuleCall_1_1_1_0 = (RuleCall)cListAssignment_1_1_1.eContents().get(0);
		
		//OpDefParameterList:
		//    {OpDefParameterList}
		//    (list+=OpDefParameter
		//    (
		//        ','
		//        list+=OpDefParameter
		//    )*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OpDefParameterList}
		//(list+=OpDefParameter
		//(
		//    ','
		//    list+=OpDefParameter
		//)*)?
		public Group getGroup() { return cGroup; }
		
		//{OpDefParameterList}
		public Action getOpDefParameterListAction_0() { return cOpDefParameterListAction_0; }
		
		//(list+=OpDefParameter
		//(
		//    ','
		//    list+=OpDefParameter
		//)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//list+=OpDefParameter
		public Assignment getListAssignment_1_0() { return cListAssignment_1_0; }
		
		//OpDefParameter
		public RuleCall getListOpDefParameterParserRuleCall_1_0_0() { return cListOpDefParameterParserRuleCall_1_0_0; }
		
		//(
		//    ','
		//    list+=OpDefParameter
		//)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//list+=OpDefParameter
		public Assignment getListAssignment_1_1_1() { return cListAssignment_1_1_1; }
		
		//OpDefParameter
		public RuleCall getListOpDefParameterParserRuleCall_1_1_1_0() { return cListOpDefParameterParserRuleCall_1_1_1_0; }
	}
	public class OpDefParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.OpDefParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValExpressionParserRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		
		//OpDefParameter:
		//    type=Type id=Identifier ('=' val=Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type id=Identifier ('=' val=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0() { return cIdIdentifierParserRuleCall_1_0; }
		
		//('=' val=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//val=Expression
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//Expression
		public RuleCall getValExpressionParserRuleCall_2_1_0() { return cValExpressionParserRuleCall_2_1_0; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// do not rename this rule (fragment parsing)
		//ExpressionStatement:
		//    expr=Expression
		//    ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=Expression
		//';'
		public Group getGroup() { return cGroup; }
		
		//expr=Expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLetAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLetLetExpressionParserRuleCall_0_0 = (RuleCall)cLetAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprImplicationExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cContainerAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cContainerContainerInitializerParserRuleCall_2_0 = (RuleCall)cContainerAssignment_2.eContents().get(0);
		
		//// do not rename this rule (fragment parsing)
		//Expression:
		//    let=LetExpression
		//    |    expr=ImplicationExpression
		//    |   container=ContainerInitializer
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//let=LetExpression
		//|    expr=ImplicationExpression
		//|   container=ContainerInitializer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//let=LetExpression
		public Assignment getLetAssignment_0() { return cLetAssignment_0; }
		
		//LetExpression
		public RuleCall getLetLetExpressionParserRuleCall_0_0() { return cLetLetExpressionParserRuleCall_0_0; }
		
		//expr=ImplicationExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ImplicationExpression
		public RuleCall getExprImplicationExpressionParserRuleCall_1_0() { return cExprImplicationExpressionParserRuleCall_1_0; }
		
		//container=ContainerInitializer
		public Assignment getContainerAssignment_2() { return cContainerAssignment_2; }
		
		//ContainerInitializer
		public RuleCall getContainerContainerInitializerParserRuleCall_2_0() { return cContainerContainerInitializerParserRuleCall_2_0; }
	}
	public class LetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.LetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExprExpressionParserRuleCall_4_0 = (RuleCall)cValueExprAssignment_4.eContents().get(0);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSubExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubExprOptBlockExpressionParserRuleCall_6_0 = (RuleCall)cSubExprAssignment_6.eContents().get(0);
		
		//LetExpression:
		//    'let'
		//    type=Type name=Identifier // type is optional in OCL - IVML adjustment
		//    '='
		//    valueExpr=Expression
		//    'in'
		//    subExpr=OptBlockExpression
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'let'
		//type=Type name=Identifier // type is optional in OCL - IVML adjustment
		//'='
		//valueExpr=Expression
		//'in'
		//subExpr=OptBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }
		
		//// type is optional in OCL - IVML adjustment
		//   '='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//valueExpr=Expression
		public Assignment getValueExprAssignment_4() { return cValueExprAssignment_4; }
		
		//Expression
		public RuleCall getValueExprExpressionParserRuleCall_4_0() { return cValueExprExpressionParserRuleCall_4_0; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//subExpr=OptBlockExpression
		public Assignment getSubExprAssignment_6() { return cSubExprAssignment_6; }
		
		//OptBlockExpression
		public RuleCall getSubExprOptBlockExpressionParserRuleCall_6_0() { return cSubExprOptBlockExpressionParserRuleCall_6_0; }
	}
	public class OptBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.OptBlockExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBlockBlockExpressionParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//OptBlockExpression:
		//    expr=Expression | block=BlockExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=Expression | block=BlockExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expr=Expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }
		
		//block=BlockExpression
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//BlockExpression
		public RuleCall getBlockBlockExpressionParserRuleCall_1_0() { return cBlockBlockExpressionParserRuleCall_1_0; }
	}
	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprsExpressionStatementParserRuleCall_1_0 = (RuleCall)cExprsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BlockExpression:
		//    '{'
		//    exprs+=ExpressionStatement+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//exprs+=ExpressionStatement+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//exprs+=ExpressionStatement+
		public Assignment getExprsAssignment_1() { return cExprsAssignment_1; }
		
		//ExpressionStatement
		public RuleCall getExprsExpressionStatementParserRuleCall_1_0() { return cExprsExpressionStatementParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftLogicalExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightAssignmentExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//AssignmentExpression:
		//    left=LogicalExpression
		//    right+=AssignmentExpressionPart?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left=LogicalExpression
		//right+=AssignmentExpressionPart?
		public Group getGroup() { return cGroup; }
		
		//left=LogicalExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//LogicalExpression
		public RuleCall getLeftLogicalExpressionParserRuleCall_0_0() { return cLeftLogicalExpressionParserRuleCall_0_0; }
		
		//right+=AssignmentExpressionPart?
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//AssignmentExpressionPart
		public RuleCall getRightAssignmentExpressionPartParserRuleCall_1_0() { return cRightAssignmentExpressionPartParserRuleCall_1_0; }
	}
	public class AssignmentExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AssignmentExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpAssignmentOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExLogicalExpressionParserRuleCall_1_0_0 = (RuleCall)cExAssignment_1_0.eContents().get(0);
		private final Assignment cContainerAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContainerContainerInitializerParserRuleCall_1_1_0 = (RuleCall)cContainerAssignment_1_1.eContents().get(0);
		
		//AssignmentExpressionPart:
		//    op=AssignmentOperator
		//    (ex=LogicalExpression | container=ContainerInitializer)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op=AssignmentOperator
		//(ex=LogicalExpression | container=ContainerInitializer)
		public Group getGroup() { return cGroup; }
		
		//op=AssignmentOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//AssignmentOperator
		public RuleCall getOpAssignmentOperatorParserRuleCall_0_0() { return cOpAssignmentOperatorParserRuleCall_0_0; }
		
		//(ex=LogicalExpression | container=ContainerInitializer)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ex=LogicalExpression
		public Assignment getExAssignment_1_0() { return cExAssignment_1_0; }
		
		//LogicalExpression
		public RuleCall getExLogicalExpressionParserRuleCall_1_0_0() { return cExLogicalExpressionParserRuleCall_1_0_0; }
		
		//container=ContainerInitializer
		public Assignment getContainerAssignment_1_1() { return cContainerAssignment_1_1; }
		
		//ContainerInitializer
		public RuleCall getContainerContainerInitializerParserRuleCall_1_1_0() { return cContainerContainerInitializerParserRuleCall_1_1_0; }
	}
	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AssignmentOperator");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//AssignmentOperator:
		//    '=' // IVML addition
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'='
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}
	public class ImplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ImplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAssignmentExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightImplicationExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//ImplicationExpression:
		//    left=AssignmentExpression
		//    right+=ImplicationExpressionPart*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AssignmentExpression
		//right+=ImplicationExpressionPart*
		public Group getGroup() { return cGroup; }
		
		//left=AssignmentExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AssignmentExpression
		public RuleCall getLeftAssignmentExpressionParserRuleCall_0_0() { return cLeftAssignmentExpressionParserRuleCall_0_0; }
		
		//right+=ImplicationExpressionPart*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//ImplicationExpressionPart
		public RuleCall getRightImplicationExpressionPartParserRuleCall_1_0() { return cRightImplicationExpressionPartParserRuleCall_1_0; }
	}
	public class ImplicationExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ImplicationExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpImplicationOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExAssignmentExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//ImplicationExpressionPart:
		//    op=ImplicationOperator
		//    ex=AssignmentExpression
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//op=ImplicationOperator
		//ex=AssignmentExpression
		public Group getGroup() { return cGroup; }
		
		//op=ImplicationOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//ImplicationOperator
		public RuleCall getOpImplicationOperatorParserRuleCall_0_0() { return cOpImplicationOperatorParserRuleCall_0_0; }
		
		//ex=AssignmentExpression
		public Assignment getExAssignment_1() { return cExAssignment_1; }
		
		//AssignmentExpression
		public RuleCall getExAssignmentExpressionParserRuleCall_1_0() { return cExAssignmentExpressionParserRuleCall_1_0; }
	}
	public class ImplicationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ImplicationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cImpliesKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIffKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ImplicationOperator:
		//    'implies'
		//    |'iff'  // IVML addition
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'implies'
		//|'iff'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'implies'
		public Keyword getImpliesKeyword_0() { return cImpliesKeyword_0; }
		
		//'iff'
		public Keyword getIffKeyword_1() { return cIffKeyword_1; }
	}
	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.LogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftEqualityExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightLogicalExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//LogicalExpression:
		//    left=EqualityExpression
		//    right+=LogicalExpressionPart*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//left=EqualityExpression
		//right+=LogicalExpressionPart*
		public Group getGroup() { return cGroup; }
		
		//left=EqualityExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//EqualityExpression
		public RuleCall getLeftEqualityExpressionParserRuleCall_0_0() { return cLeftEqualityExpressionParserRuleCall_0_0; }
		
		//right+=LogicalExpressionPart*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//LogicalExpressionPart
		public RuleCall getRightLogicalExpressionPartParserRuleCall_1_0() { return cRightLogicalExpressionPartParserRuleCall_1_0; }
	}
	public class LogicalExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.LogicalExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpLogicalOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExEqualityExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//LogicalExpressionPart:
		//    op=LogicalOperator
		//    ex=EqualityExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op=LogicalOperator
		//ex=EqualityExpression
		public Group getGroup() { return cGroup; }
		
		//op=LogicalOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//LogicalOperator
		public RuleCall getOpLogicalOperatorParserRuleCall_0_0() { return cOpLogicalOperatorParserRuleCall_0_0; }
		
		//ex=EqualityExpression
		public Assignment getExAssignment_1() { return cExAssignment_1; }
		
		//EqualityExpression
		public RuleCall getExEqualityExpressionParserRuleCall_1_0() { return cExEqualityExpressionParserRuleCall_1_0; }
	}
	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cXorKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//LogicalOperator:
		//    'and'
		//    |'or'
		//    |'xor'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'and'
		//|'or'
		//|'xor'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'xor'
		public Keyword getXorKeyword_2() { return cXorKeyword_2; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftRelationalExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightEqualityExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//EqualityExpression:
		//    left=RelationalExpression
		//    right=EqualityExpressionPart?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//left=RelationalExpression
		//right=EqualityExpressionPart?
		public Group getGroup() { return cGroup; }
		
		//left=RelationalExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//RelationalExpression
		public RuleCall getLeftRelationalExpressionParserRuleCall_0_0() { return cLeftRelationalExpressionParserRuleCall_0_0; }
		
		//right=EqualityExpressionPart?
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//EqualityExpressionPart
		public RuleCall getRightEqualityExpressionPartParserRuleCall_1_0() { return cRightEqualityExpressionPartParserRuleCall_1_0; }
	}
	public class EqualityExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.EqualityExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpEqualityOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExRelationalExpressionParserRuleCall_1_0_0 = (RuleCall)cExAssignment_1_0.eContents().get(0);
		private final Assignment cContainerAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContainerContainerInitializerParserRuleCall_1_1_0 = (RuleCall)cContainerAssignment_1_1.eContents().get(0);
		
		//EqualityExpressionPart:
		//    op=EqualityOperator
		//    (ex=RelationalExpression | container=ContainerInitializer)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op=EqualityOperator
		//(ex=RelationalExpression | container=ContainerInitializer)
		public Group getGroup() { return cGroup; }
		
		//op=EqualityOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//EqualityOperator
		public RuleCall getOpEqualityOperatorParserRuleCall_0_0() { return cOpEqualityOperatorParserRuleCall_0_0; }
		
		//(ex=RelationalExpression | container=ContainerInitializer)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ex=RelationalExpression
		public Assignment getExAssignment_1_0() { return cExAssignment_1_0; }
		
		//RelationalExpression
		public RuleCall getExRelationalExpressionParserRuleCall_1_0_0() { return cExRelationalExpressionParserRuleCall_1_0_0; }
		
		//container=ContainerInitializer
		public Assignment getContainerAssignment_1_1() { return cContainerAssignment_1_1; }
		
		//ContainerInitializer
		public RuleCall getContainerContainerInitializerParserRuleCall_1_1_0() { return cContainerContainerInitializerParserRuleCall_1_1_0; }
	}
	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//EqualityOperator:
		//    '=='
		//    |'<>'
		//    |'!='
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'=='
		//|'<>'
		//|'!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1() { return cLessThanSignGreaterThanSignKeyword_1; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_2() { return cExclamationMarkEqualsSignKeyword_2; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRightRelationalExpressionPartParserRuleCall_1_0_0 = (RuleCall)cRightAssignment_1_0.eContents().get(0);
		private final Assignment cRight2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRight2RelationalExpressionPartParserRuleCall_1_1_0 = (RuleCall)cRight2Assignment_1_1.eContents().get(0);
		
		//RelationalExpression:
		//    left=AdditiveExpression
		//    (right=RelationalExpressionPart right2=RelationalExpressionPart?)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AdditiveExpression
		//(right=RelationalExpressionPart right2=RelationalExpressionPart?)?
		public Group getGroup() { return cGroup; }
		
		//left=AdditiveExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AdditiveExpression
		public RuleCall getLeftAdditiveExpressionParserRuleCall_0_0() { return cLeftAdditiveExpressionParserRuleCall_0_0; }
		
		//(right=RelationalExpressionPart right2=RelationalExpressionPart?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//right=RelationalExpressionPart
		public Assignment getRightAssignment_1_0() { return cRightAssignment_1_0; }
		
		//RelationalExpressionPart
		public RuleCall getRightRelationalExpressionPartParserRuleCall_1_0_0() { return cRightRelationalExpressionPartParserRuleCall_1_0_0; }
		
		//right2=RelationalExpressionPart?
		public Assignment getRight2Assignment_1_1() { return cRight2Assignment_1_1; }
		
		//RelationalExpressionPart
		public RuleCall getRight2RelationalExpressionPartParserRuleCall_1_1_0() { return cRight2RelationalExpressionPartParserRuleCall_1_1_0; }
	}
	public class RelationalExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.RelationalExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpRelationalOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExAdditiveExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//RelationalExpressionPart:
		//    op=RelationalOperator
		//    ex=AdditiveExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op=RelationalOperator
		//ex=AdditiveExpression
		public Group getGroup() { return cGroup; }
		
		//op=RelationalOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//RelationalOperator
		public RuleCall getOpRelationalOperatorParserRuleCall_0_0() { return cOpRelationalOperatorParserRuleCall_0_0; }
		
		//ex=AdditiveExpression
		public Assignment getExAssignment_1() { return cExAssignment_1; }
		
		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_1_0() { return cExAdditiveExpressionParserRuleCall_1_0; }
	}
	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOperator:
		//    '>'
		//    |'<'
		//    |'>='
		//    |'<='
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'>'
		//|'<'
		//|'>='
		//|'<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightAdditiveExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//AdditiveExpression:
		//    left=MultiplicativeExpression
		//    right+=AdditiveExpressionPart*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//left=MultiplicativeExpression
		//right+=AdditiveExpressionPart*
		public Group getGroup() { return cGroup; }
		
		//left=MultiplicativeExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//MultiplicativeExpression
		public RuleCall getLeftMultiplicativeExpressionParserRuleCall_0_0() { return cLeftMultiplicativeExpressionParserRuleCall_0_0; }
		
		//right+=AdditiveExpressionPart*
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//AdditiveExpressionPart
		public RuleCall getRightAdditiveExpressionPartParserRuleCall_1_0() { return cRightAdditiveExpressionPartParserRuleCall_1_0; }
	}
	public class AdditiveExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AdditiveExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpAdditiveOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExMultiplicativeExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//AdditiveExpressionPart:
		//    op=AdditiveOperator
		//    ex=MultiplicativeExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op=AdditiveOperator
		//ex=MultiplicativeExpression
		public Group getGroup() { return cGroup; }
		
		//op=AdditiveOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//AdditiveOperator
		public RuleCall getOpAdditiveOperatorParserRuleCall_0_0() { return cOpAdditiveOperatorParserRuleCall_0_0; }
		
		//ex=MultiplicativeExpression
		public Assignment getExAssignment_1() { return cExAssignment_1; }
		
		//MultiplicativeExpression
		public RuleCall getExMultiplicativeExpressionParserRuleCall_1_0() { return cExMultiplicativeExpressionParserRuleCall_1_0; }
	}
	public class AdditiveOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditiveOperator:
		//    '+'
		//    |'-'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'+'
		//|'-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftUnaryExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightMultiplicativeExpressionPartParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//MultiplicativeExpression:
		//    left=UnaryExpression
		//    right=MultiplicativeExpressionPart?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//left=UnaryExpression
		//right=MultiplicativeExpressionPart?
		public Group getGroup() { return cGroup; }
		
		//left=UnaryExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//UnaryExpression
		public RuleCall getLeftUnaryExpressionParserRuleCall_0_0() { return cLeftUnaryExpressionParserRuleCall_0_0; }
		
		//right=MultiplicativeExpressionPart?
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//MultiplicativeExpressionPart
		public RuleCall getRightMultiplicativeExpressionPartParserRuleCall_1_0() { return cRightMultiplicativeExpressionPartParserRuleCall_1_0; }
	}
	public class MultiplicativeExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.MultiplicativeExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpMultiplicativeOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//MultiplicativeExpressionPart:
		//    op=MultiplicativeOperator
		//    expr=UnaryExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op=MultiplicativeOperator
		//expr=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//op=MultiplicativeOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//MultiplicativeOperator
		public RuleCall getOpMultiplicativeOperatorParserRuleCall_0_0() { return cOpMultiplicativeOperatorParserRuleCall_0_0; }
		
		//expr=UnaryExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExprUnaryExpressionParserRuleCall_1_0() { return cExprUnaryExpressionParserRuleCall_1_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MultiplicativeOperator:
		//    '*'
		//    |'/'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'*'
		//|'/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpUnaryOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprPostfixExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//    op = UnaryOperator?
		//    expr=PostfixExpression
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//op = UnaryOperator?
		//expr=PostfixExpression
		public Group getGroup() { return cGroup; }
		
		//op = UnaryOperator?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//UnaryOperator
		public RuleCall getOpUnaryOperatorParserRuleCall_0_0() { return cOpUnaryOperatorParserRuleCall_0_0; }
		
		//expr=PostfixExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//PostfixExpression
		public RuleCall getExprPostfixExpressionParserRuleCall_1_0() { return cExprPostfixExpressionParserRuleCall_1_0; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UnaryOperator:
		//    'not'
		//    |'-'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'not'
		//|'-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.PostfixExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCallAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCallFeatureCallParserRuleCall_0_0_0 = (RuleCall)cCallAssignment_0_0.eContents().get(0);
		private final Assignment cFCallsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFCallsCallParserRuleCall_0_1_0 = (RuleCall)cFCallsAssignment_0_1.eContents().get(0);
		private final Assignment cAccessAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAccessExpressionAccessParserRuleCall_0_2_0 = (RuleCall)cAccessAssignment_0_2.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLeftPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		
		//PostfixExpression:
		//    (call=FeatureCall (fCalls+=Call)* access=ExpressionAccess?) // IVML addition, call primitive operations
		//    | (left=PrimaryExpression)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(call=FeatureCall (fCalls+=Call)* access=ExpressionAccess?) // IVML addition, call primitive operations
		//| (left=PrimaryExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(call=FeatureCall (fCalls+=Call)* access=ExpressionAccess?)
		public Group getGroup_0() { return cGroup_0; }
		
		//call=FeatureCall
		public Assignment getCallAssignment_0_0() { return cCallAssignment_0_0; }
		
		//FeatureCall
		public RuleCall getCallFeatureCallParserRuleCall_0_0_0() { return cCallFeatureCallParserRuleCall_0_0_0; }
		
		//(fCalls+=Call)*
		public Assignment getFCallsAssignment_0_1() { return cFCallsAssignment_0_1; }
		
		//Call
		public RuleCall getFCallsCallParserRuleCall_0_1_0() { return cFCallsCallParserRuleCall_0_1_0; }
		
		//access=ExpressionAccess?
		public Assignment getAccessAssignment_0_2() { return cAccessAssignment_0_2; }
		
		//ExpressionAccess
		public RuleCall getAccessExpressionAccessParserRuleCall_0_2_0() { return cAccessExpressionAccessParserRuleCall_0_2_0; }
		
		//(left=PrimaryExpression)
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//PrimaryExpression
		public RuleCall getLeftPrimaryExpressionParserRuleCall_1_0() { return cLeftPrimaryExpressionParserRuleCall_1_0; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Call");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCallAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCallFeatureCallParserRuleCall_0_1_0 = (RuleCall)cCallAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContainerOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContainerOpContainerOpParserRuleCall_1_1_0 = (RuleCall)cContainerOpAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArrayExAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArrayExExpressionParserRuleCall_2_1_0 = (RuleCall)cArrayExAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Call: // IVML: "lambda"-expression with apply operation set->apply(t,r=0|max(t,r))
		//    '.' call=FeatureCall
		//    | '->' containerOp=ContainerOp
		//    | '[' arrayEx=Expression ']' // IVML addition to OCL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// IVML: "lambda"-expression with apply operation set->apply(t,r=0|max(t,r))
		//   '.' call=FeatureCall
		//   | '->' containerOp=ContainerOp
		//   | '[' arrayEx=Expression ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// IVML: "lambda"-expression with apply operation set->apply(t,r=0|max(t,r))
		//   '.' call=FeatureCall
		public Group getGroup_0() { return cGroup_0; }
		
		//// IVML: "lambda"-expression with apply operation set->apply(t,r=0|max(t,r))
		//   '.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//call=FeatureCall
		public Assignment getCallAssignment_0_1() { return cCallAssignment_0_1; }
		
		//FeatureCall
		public RuleCall getCallFeatureCallParserRuleCall_0_1_0() { return cCallFeatureCallParserRuleCall_0_1_0; }
		
		//'->' containerOp=ContainerOp
		public Group getGroup_1() { return cGroup_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//containerOp=ContainerOp
		public Assignment getContainerOpAssignment_1_1() { return cContainerOpAssignment_1_1; }
		
		//ContainerOp
		public RuleCall getContainerOpContainerOpParserRuleCall_1_1_0() { return cContainerOpContainerOpParserRuleCall_1_1_0; }
		
		//'[' arrayEx=Expression ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//arrayEx=Expression
		public Assignment getArrayExAssignment_2_1() { return cArrayExAssignment_2_1; }
		
		//Expression
		public RuleCall getArrayExExpressionParserRuleCall_2_1_0() { return cArrayExExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNameRelationalOperatorParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cNameAdditiveOperatorParserRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cNameMultiplicativeOperatorParserRuleCall_0_3_0 = (RuleCall)cNameAssignment_0_3.eContents().get(0);
		private final Assignment cNameAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cNameEqualityOperatorParserRuleCall_0_4_0 = (RuleCall)cNameAssignment_0_4.eContents().get(0);
		private final Assignment cNameAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final RuleCall cNameImplicationOperatorParserRuleCall_0_5_0 = (RuleCall)cNameAssignment_0_5.eContents().get(0);
		private final Assignment cNameAssignment_0_6 = (Assignment)cAlternatives_0.eContents().get(6);
		private final RuleCall cNameLogicalOperatorParserRuleCall_0_6_0 = (RuleCall)cNameAssignment_0_6.eContents().get(0);
		private final Assignment cNameAssignment_0_7 = (Assignment)cAlternatives_0.eContents().get(7);
		private final Keyword cNameNotKeyword_0_7_0 = (Keyword)cNameAssignment_0_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cActualArgumentListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FeatureCall:
		//    (name=Identifier|name=RelationalOperator|name=AdditiveOperator|name=MultiplicativeOperator|name=EqualityOperator|
		//         name=ImplicationOperator|name=LogicalOperator|name="not")
		//    '('
		//    ActualArgumentList?
		//    ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=Identifier|name=RelationalOperator|name=AdditiveOperator|name=MultiplicativeOperator|name=EqualityOperator|
		//     name=ImplicationOperator|name=LogicalOperator|name="not")
		//'('
		//ActualArgumentList?
		//')'
		public Group getGroup() { return cGroup; }
		
		//(name=Identifier|name=RelationalOperator|name=AdditiveOperator|name=MultiplicativeOperator|name=EqualityOperator|
		//     name=ImplicationOperator|name=LogicalOperator|name="not")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0_0() { return cNameIdentifierParserRuleCall_0_0_0; }
		
		//name=RelationalOperator
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//RelationalOperator
		public RuleCall getNameRelationalOperatorParserRuleCall_0_1_0() { return cNameRelationalOperatorParserRuleCall_0_1_0; }
		
		//name=AdditiveOperator
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//AdditiveOperator
		public RuleCall getNameAdditiveOperatorParserRuleCall_0_2_0() { return cNameAdditiveOperatorParserRuleCall_0_2_0; }
		
		//name=MultiplicativeOperator
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }
		
		//MultiplicativeOperator
		public RuleCall getNameMultiplicativeOperatorParserRuleCall_0_3_0() { return cNameMultiplicativeOperatorParserRuleCall_0_3_0; }
		
		//name=EqualityOperator
		public Assignment getNameAssignment_0_4() { return cNameAssignment_0_4; }
		
		//EqualityOperator
		public RuleCall getNameEqualityOperatorParserRuleCall_0_4_0() { return cNameEqualityOperatorParserRuleCall_0_4_0; }
		
		//name=ImplicationOperator
		public Assignment getNameAssignment_0_5() { return cNameAssignment_0_5; }
		
		//ImplicationOperator
		public RuleCall getNameImplicationOperatorParserRuleCall_0_5_0() { return cNameImplicationOperatorParserRuleCall_0_5_0; }
		
		//name=LogicalOperator
		public Assignment getNameAssignment_0_6() { return cNameAssignment_0_6; }
		
		//LogicalOperator
		public RuleCall getNameLogicalOperatorParserRuleCall_0_6_0() { return cNameLogicalOperatorParserRuleCall_0_6_0; }
		
		//name="not"
		public Assignment getNameAssignment_0_7() { return cNameAssignment_0_7; }
		
		//"not"
		public Keyword getNameNotKeyword_0_7_0() { return cNameNotKeyword_0_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ActualArgumentList?
		public RuleCall getActualArgumentListParserRuleCall_2() { return cActualArgumentListParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ContainerOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ContainerOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclDeclaratorParserRuleCall_2_0 = (RuleCall)cDeclAssignment_2.eContents().get(0);
		private final RuleCall cActualArgumentListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ContainerOp:
		//    name=Identifier
		//    '('
		//        decl=Declarator? ActualArgumentList?
		//    ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Identifier
		//'('
		//    decl=Declarator? ActualArgumentList?
		//')'
		public Group getGroup() { return cGroup; }
		
		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//decl=Declarator?
		public Assignment getDeclAssignment_2() { return cDeclAssignment_2; }
		
		//Declarator
		public RuleCall getDeclDeclaratorParserRuleCall_2_0() { return cDeclDeclaratorParserRuleCall_2_0; }
		
		//ActualArgumentList?
		public RuleCall getActualArgumentListParserRuleCall_3() { return cActualArgumentListParserRuleCall_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclDeclarationParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclDeclarationParserRuleCall_1_1_0 = (RuleCall)cDeclAssignment_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Declarator:
		//    decl+=Declaration (';' decl+=Declaration)* '|'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//decl+=Declaration (';' decl+=Declaration)* '|'
		public Group getGroup() { return cGroup; }
		
		//decl+=Declaration
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }
		
		//Declaration
		public RuleCall getDeclDeclarationParserRuleCall_0_0() { return cDeclDeclarationParserRuleCall_0_0; }
		
		//(';' decl+=Declaration)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//decl+=Declaration
		public Assignment getDeclAssignment_1_1() { return cDeclAssignment_1_1; }
		
		//Declaration
		public RuleCall getDeclDeclarationParserRuleCall_1_1_0() { return cDeclDeclarationParserRuleCall_1_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitExpressionParserRuleCall_3_1_0 = (RuleCall)cInitAssignment_3_1.eContents().get(0);
		
		//Declaration:
		//    (type=Type)? id+=Identifier (',' id+=Identifier)*
		//    ('=' init=Expression)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(type=Type)? id+=Identifier (',' id+=Identifier)*
		//('=' init=Expression)?
		public Group getGroup() { return cGroup; }
		
		//(type=Type)?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//id+=Identifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0() { return cIdIdentifierParserRuleCall_1_0; }
		
		//(',' id+=Identifier)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//id+=Identifier
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_2_1_0() { return cIdIdentifierParserRuleCall_2_1_0; }
		
		//('=' init=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//init=Expression
		public Assignment getInitAssignment_3_1() { return cInitAssignment_3_1; }
		
		//Expression
		public RuleCall getInitExpressionParserRuleCall_3_1_0() { return cInitExpressionParserRuleCall_3_1_0; }
	}
	public class ActualArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ActualArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsActualArgumentParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsActualArgumentParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//fragment ActualArgumentList:
		//    args+=ActualArgument
		//    (
		//        ','
		//        args+=ActualArgument
		//    )*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//args+=ActualArgument
		//(
		//    ','
		//    args+=ActualArgument
		//)*
		public Group getGroup() { return cGroup; }
		
		//args+=ActualArgument
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//ActualArgument
		public RuleCall getArgsActualArgumentParserRuleCall_0_0() { return cArgsActualArgumentParserRuleCall_0_0; }
		
		//(
		//    ','
		//    args+=ActualArgument
		//)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//args+=ActualArgument
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//ActualArgument
		public RuleCall getArgsActualArgumentParserRuleCall_1_1_0() { return cArgsActualArgumentParserRuleCall_1_1_0; }
	}
	public class ActualArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ActualArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgExpressionParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		
		//ActualArgument:
		//    (name=Identifier '=')? arg=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=Identifier '=')? arg=Expression
		public Group getGroup() { return cGroup; }
		
		//(name=Identifier '=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0_0() { return cNameIdentifierParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//arg=Expression
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//Expression
		public RuleCall getArgExpressionParserRuleCall_1_0() { return cArgExpressionParserRuleCall_1_0; }
	}
	public class ExpressionAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ExpressionAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCallsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallsCallParserRuleCall_2_0 = (RuleCall)cCallsAssignment_2.eContents().get(0);
		private final Assignment cAccessAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAccessExpressionAccessParserRuleCall_3_0 = (RuleCall)cAccessAssignment_3.eContents().get(0);
		
		//ExpressionAccess:
		//    '.' name=Identifier
		//    calls+=Call*
		//    access=ExpressionAccess?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' name=Identifier
		//calls+=Call*
		//access=ExpressionAccess?
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
		
		//calls+=Call*
		public Assignment getCallsAssignment_2() { return cCallsAssignment_2; }
		
		//Call
		public RuleCall getCallsCallParserRuleCall_2_0() { return cCallsCallParserRuleCall_2_0; }
		
		//access=ExpressionAccess?
		public Assignment getAccessAssignment_3() { return cAccessAssignment_3; }
		
		//ExpressionAccess
		public RuleCall getAccessExpressionAccessParserRuleCall_3_0() { return cAccessExpressionAccessParserRuleCall_3_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cLitAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cLitLiteralParserRuleCall_0_0_0 = (RuleCall)cLitAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cIfExAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cIfExIfExpressionParserRuleCall_0_2_0 = (RuleCall)cIfExAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Keyword cRefByKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cRefExAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cRefExExpressionParserRuleCall_0_3_2_0 = (RuleCall)cRefExAssignment_0_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_3 = (Keyword)cGroup_0_3.eContents().get(3);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallsCallParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessExpressionAccessParserRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		
		//PrimaryExpression:
		//    (lit=Literal
		////    |    call=FeatureCall // unclear on what to execute (in OCL this is the context)
		//    |    '(' ex=Expression ')'
		//    |    ifEx=IfExpression
		//    |   'refBy' '(' refEx=Expression ')')
		//    calls+=Call*
		//    access=ExpressionAccess?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//    (lit=Literal
		////    |    call=FeatureCall // unclear on what to execute (in OCL this is the context)
		//    |    '(' ex=Expression ')'
		//    |    ifEx=IfExpression
		//    |   'refBy' '(' refEx=Expression ')')
		//    calls+=Call*
		//    access=ExpressionAccess?
		public Group getGroup() { return cGroup; }
		
		//    (lit=Literal
		////    |    call=FeatureCall // unclear on what to execute (in OCL this is the context)
		//    |    '(' ex=Expression ')'
		//    |    ifEx=IfExpression
		//    |   'refBy' '(' refEx=Expression ')')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//lit=Literal
		public Assignment getLitAssignment_0_0() { return cLitAssignment_0_0; }
		
		//Literal
		public RuleCall getLitLiteralParserRuleCall_0_0_0() { return cLitLiteralParserRuleCall_0_0_0; }
		
		//'(' ex=Expression ')'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }
		
		//ex=Expression
		public Assignment getExAssignment_0_1_1() { return cExAssignment_0_1_1; }
		
		//Expression
		public RuleCall getExExpressionParserRuleCall_0_1_1_0() { return cExExpressionParserRuleCall_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }
		
		//ifEx=IfExpression
		public Assignment getIfExAssignment_0_2() { return cIfExAssignment_0_2; }
		
		//IfExpression
		public RuleCall getIfExIfExpressionParserRuleCall_0_2_0() { return cIfExIfExpressionParserRuleCall_0_2_0; }
		
		//'refBy' '(' refEx=Expression ')'
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'refBy'
		public Keyword getRefByKeyword_0_3_0() { return cRefByKeyword_0_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3_1() { return cLeftParenthesisKeyword_0_3_1; }
		
		//refEx=Expression
		public Assignment getRefExAssignment_0_3_2() { return cRefExAssignment_0_3_2; }
		
		//Expression
		public RuleCall getRefExExpressionParserRuleCall_0_3_2_0() { return cRefExExpressionParserRuleCall_0_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3_3() { return cRightParenthesisKeyword_0_3_3; }
		
		//calls+=Call*
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }
		
		//Call
		public RuleCall getCallsCallParserRuleCall_1_0() { return cCallsCallParserRuleCall_1_0; }
		
		//access=ExpressionAccess?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//ExpressionAccess
		public RuleCall getAccessExpressionAccessParserRuleCall_2_0() { return cAccessExpressionAccessParserRuleCall_2_0; }
	}
	public class ContainerInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ContainerInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainerInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQualifiedNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitExpressionListOrRangeParserRuleCall_3_0 = (RuleCall)cInitAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ContainerInitializer:
		//    {ContainerInitializer}
		//    type=QualifiedName? // not OclCollection as otherways Collections are excluded
		//    '{'
		//    init=ExpressionListOrRange?
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ContainerInitializer}
		//type=QualifiedName? // not OclCollection as otherways Collections are excluded
		//'{'
		//init=ExpressionListOrRange?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ContainerInitializer}
		public Action getContainerInitializerAction_0() { return cContainerInitializerAction_0; }
		
		//type=QualifiedName?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_1_0() { return cTypeQualifiedNameParserRuleCall_1_0; }
		
		//// not OclCollection as otherways Collections are excluded
		//   '{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//init=ExpressionListOrRange?
		public Assignment getInitAssignment_3() { return cInitAssignment_3; }
		
		//ExpressionListOrRange
		public RuleCall getInitExpressionListOrRangeParserRuleCall_3_0() { return cInitExpressionListOrRangeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExpressionListOrRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ExpressionListOrRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListExpressionListEntryParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListExpressionListEntryParserRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		//ExpressionListOrRange:    // adjust values to Expressions
		//    list+=ExpressionListEntry
		//    (',' list+=ExpressionListEntry)*
		////    |    '..' rangeEndEx=ExpressionListEntry // IVML change to OCL
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//// adjust values to Expressions
		//list+=ExpressionListEntry
		//(',' list+=ExpressionListEntry)*
		public Group getGroup() { return cGroup; }
		
		//// adjust values to Expressions
		//list+=ExpressionListEntry
		public Assignment getListAssignment_0() { return cListAssignment_0; }
		
		//ExpressionListEntry
		public RuleCall getListExpressionListEntryParserRuleCall_0_0() { return cListExpressionListEntryParserRuleCall_0_0; }
		
		//(',' list+=ExpressionListEntry)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//list+=ExpressionListEntry
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }
		
		//ExpressionListEntry
		public RuleCall getListExpressionListEntryParserRuleCall_1_1_0() { return cListExpressionListEntryParserRuleCall_1_1_0; }
	}
	public class ExpressionListEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ExpressionListEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cAttribAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cAttribIdentifierParserRuleCall_0_1_1_0 = (RuleCall)cAttribAssignment_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueImplicationExpressionParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cContainerAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContainerContainerInitializerParserRuleCall_1_1_0 = (RuleCall)cContainerAssignment_1_1.eContents().get(0);
		
		//ExpressionListEntry:
		//    (name=Identifier ('.' attrib=Identifier)? '=')? // for compound initialization (IVML extension to OCL)
		//    (value=ImplicationExpression | container=ContainerInitializer)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=Identifier ('.' attrib=Identifier)? '=')? // for compound initialization (IVML extension to OCL)
		//(value=ImplicationExpression | container=ContainerInitializer)
		public Group getGroup() { return cGroup; }
		
		//(name=Identifier ('.' attrib=Identifier)? '=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=Identifier
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0_0() { return cNameIdentifierParserRuleCall_0_0_0; }
		
		//('.' attrib=Identifier)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }
		
		//attrib=Identifier
		public Assignment getAttribAssignment_0_1_1() { return cAttribAssignment_0_1_1; }
		
		//Identifier
		public RuleCall getAttribIdentifierParserRuleCall_0_1_1_0() { return cAttribIdentifierParserRuleCall_0_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }
		
		//// for compound initialization (IVML extension to OCL)
		//   (value=ImplicationExpression | container=ContainerInitializer)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value=ImplicationExpression
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//ImplicationExpression
		public RuleCall getValueImplicationExpressionParserRuleCall_1_0_0() { return cValueImplicationExpressionParserRuleCall_1_0_0; }
		
		//container=ContainerInitializer
		public Assignment getContainerAssignment_1_1() { return cContainerAssignment_1_1; }
		
		//ContainerInitializer
		public RuleCall getContainerContainerInitializerParserRuleCall_1_1_0() { return cContainerContainerInitializerParserRuleCall_1_1_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Literal");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValValueParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//Literal:
		//    //Identifier | numValue
		//    val=Value
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////Identifier | numValue
		//val=Value
		public Assignment getValAssignment() { return cValAssignment; }
		
		//Value
		public RuleCall getValValueParserRuleCall_0() { return cValValueParserRuleCall_0; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfExExpressionParserRuleCall_1_0 = (RuleCall)cIfExAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExOptBlockExpressionParserRuleCall_3_0 = (RuleCall)cThenExAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExOptBlockExpressionParserRuleCall_5_0 = (RuleCall)cElseExAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfExpression:
		//    'if'
		//    ifEx=Expression
		//    'then'
		//    thenEx=OptBlockExpression
		//    'else'
		//    elseEx=OptBlockExpression
		//    'endif'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'if'
		//ifEx=Expression
		//'then'
		//thenEx=OptBlockExpression
		//'else'
		//elseEx=OptBlockExpression
		//'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//ifEx=Expression
		public Assignment getIfExAssignment_1() { return cIfExAssignment_1; }
		
		//Expression
		public RuleCall getIfExExpressionParserRuleCall_1_0() { return cIfExExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenEx=OptBlockExpression
		public Assignment getThenExAssignment_3() { return cThenExAssignment_3; }
		
		//OptBlockExpression
		public RuleCall getThenExOptBlockExpressionParserRuleCall_3_0() { return cThenExOptBlockExpressionParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseEx=OptBlockExpression
		public Assignment getElseExAssignment_5() { return cElseExAssignment_5; }
		
		//OptBlockExpression
		public RuleCall getElseExOptBlockExpressionParserRuleCall_5_0() { return cElseExOptBlockExpressionParserRuleCall_5_0; }
		
		//'endif'
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVERSIONTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEXPONENTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cVersionKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//// unify distinct terminals -> IdentifierValueConverter
		//// never allow identifiers starting with $ -> Reasoner name prefixes
		//Identifier:
		//    ID | VERSION | EXPONENT | 'version'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | VERSION | EXPONENT | 'version'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//VERSION
		public RuleCall getVERSIONTerminalRuleCall_1() { return cVERSIONTerminalRuleCall_1; }
		
		//EXPONENT
		public RuleCall getEXPONENTTerminalRuleCall_2() { return cEXPONENTTerminalRuleCall_2; }
		
		//'version'
		public Keyword getVersionKeyword_3() { return cVersionKeyword_3; }
	}
	
	
	private final VariabilityUnitElements pVariabilityUnit;
	private final ProjectElements pProject;
	private final ProjectContentsElements pProjectContents;
	private final TypedefElements pTypedef;
	private final TypedefEnumElements pTypedefEnum;
	private final TypedefEnumLiteralElements pTypedefEnumLiteral;
	private final TypedefCompoundElements pTypedefCompound;
	private final AttrAssignmentElements pAttrAssignment;
	private final AttrAssignmentPartElements pAttrAssignmentPart;
	private final TypedefMappingElements pTypedefMapping;
	private final TypedefConstraintElements pTypedefConstraint;
	private final VariableDeclarationElements pVariableDeclaration;
	private final VariableDeclarationPartElements pVariableDeclarationPart;
	private final BasicTypeElements pBasicType;
	private final TypeElements pType;
	private final NumValueElements pNumValue;
	private final QualifiedNameElements pQualifiedName;
	private final AccessNameElements pAccessName;
	private final ValueElements pValue;
	private final DerivedTypeElements pDerivedType;
	private final AnnotateToElements pAnnotateTo;
	private final FreezeElements pFreeze;
	private final FreezeStatementElements pFreezeStatement;
	private final EvalElements pEval;
	private final InterfaceDeclarationElements pInterfaceDeclaration;
	private final ExportElements pExport;
	private final ImportStmtElements pImportStmt;
	private final ConflictStmtElements pConflictStmt;
	private final VersionStmtElements pVersionStmt;
	private final OpDefStatementElements pOpDefStatement;
	private final AnnotationDeclarationsElements pAnnotationDeclarations;
	private final OpDefParameterListElements pOpDefParameterList;
	private final OpDefParameterElements pOpDefParameter;
	private final ExpressionStatementElements pExpressionStatement;
	private final ExpressionElements pExpression;
	private final LetExpressionElements pLetExpression;
	private final OptBlockExpressionElements pOptBlockExpression;
	private final BlockExpressionElements pBlockExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final AssignmentExpressionPartElements pAssignmentExpressionPart;
	private final AssignmentOperatorElements pAssignmentOperator;
	private final ImplicationExpressionElements pImplicationExpression;
	private final ImplicationExpressionPartElements pImplicationExpressionPart;
	private final ImplicationOperatorElements pImplicationOperator;
	private final LogicalExpressionElements pLogicalExpression;
	private final LogicalExpressionPartElements pLogicalExpressionPart;
	private final LogicalOperatorElements pLogicalOperator;
	private final EqualityExpressionElements pEqualityExpression;
	private final EqualityExpressionPartElements pEqualityExpressionPart;
	private final EqualityOperatorElements pEqualityOperator;
	private final RelationalExpressionElements pRelationalExpression;
	private final RelationalExpressionPartElements pRelationalExpressionPart;
	private final RelationalOperatorElements pRelationalOperator;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AdditiveExpressionPartElements pAdditiveExpressionPart;
	private final AdditiveOperatorElements pAdditiveOperator;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MultiplicativeExpressionPartElements pMultiplicativeExpressionPart;
	private final MultiplicativeOperatorElements pMultiplicativeOperator;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final PostfixExpressionElements pPostfixExpression;
	private final CallElements pCall;
	private final FeatureCallElements pFeatureCall;
	private final ContainerOpElements pContainerOp;
	private final DeclaratorElements pDeclarator;
	private final DeclarationElements pDeclaration;
	private final ActualArgumentListElements pActualArgumentList;
	private final ActualArgumentElements pActualArgument;
	private final ExpressionAccessElements pExpressionAccess;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ContainerInitializerElements pContainerInitializer;
	private final ExpressionListOrRangeElements pExpressionListOrRange;
	private final ExpressionListEntryElements pExpressionListEntry;
	private final LiteralElements pLiteral;
	private final IfExpressionElements pIfExpression;
	private final IdentifierElements pIdentifier;
	private final TerminalRule tVERSION;
	private final TerminalRule tID;
	private final TerminalRule tNUMBER;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public IvmlGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pVariabilityUnit = new VariabilityUnitElements();
		this.pProject = new ProjectElements();
		this.pProjectContents = new ProjectContentsElements();
		this.pTypedef = new TypedefElements();
		this.pTypedefEnum = new TypedefEnumElements();
		this.pTypedefEnumLiteral = new TypedefEnumLiteralElements();
		this.pTypedefCompound = new TypedefCompoundElements();
		this.pAttrAssignment = new AttrAssignmentElements();
		this.pAttrAssignmentPart = new AttrAssignmentPartElements();
		this.pTypedefMapping = new TypedefMappingElements();
		this.pTypedefConstraint = new TypedefConstraintElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pVariableDeclarationPart = new VariableDeclarationPartElements();
		this.pBasicType = new BasicTypeElements();
		this.pType = new TypeElements();
		this.pNumValue = new NumValueElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pAccessName = new AccessNameElements();
		this.pValue = new ValueElements();
		this.pDerivedType = new DerivedTypeElements();
		this.pAnnotateTo = new AnnotateToElements();
		this.pFreeze = new FreezeElements();
		this.pFreezeStatement = new FreezeStatementElements();
		this.pEval = new EvalElements();
		this.pInterfaceDeclaration = new InterfaceDeclarationElements();
		this.pExport = new ExportElements();
		this.pImportStmt = new ImportStmtElements();
		this.pConflictStmt = new ConflictStmtElements();
		this.pVersionStmt = new VersionStmtElements();
		this.pOpDefStatement = new OpDefStatementElements();
		this.pAnnotationDeclarations = new AnnotationDeclarationsElements();
		this.pOpDefParameterList = new OpDefParameterListElements();
		this.pOpDefParameter = new OpDefParameterElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pExpression = new ExpressionElements();
		this.pLetExpression = new LetExpressionElements();
		this.pOptBlockExpression = new OptBlockExpressionElements();
		this.pBlockExpression = new BlockExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pAssignmentExpressionPart = new AssignmentExpressionPartElements();
		this.pAssignmentOperator = new AssignmentOperatorElements();
		this.pImplicationExpression = new ImplicationExpressionElements();
		this.pImplicationExpressionPart = new ImplicationExpressionPartElements();
		this.pImplicationOperator = new ImplicationOperatorElements();
		this.pLogicalExpression = new LogicalExpressionElements();
		this.pLogicalExpressionPart = new LogicalExpressionPartElements();
		this.pLogicalOperator = new LogicalOperatorElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pEqualityExpressionPart = new EqualityExpressionPartElements();
		this.pEqualityOperator = new EqualityOperatorElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pRelationalExpressionPart = new RelationalExpressionPartElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pAdditiveExpressionPart = new AdditiveExpressionPartElements();
		this.pAdditiveOperator = new AdditiveOperatorElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pMultiplicativeExpressionPart = new MultiplicativeExpressionPartElements();
		this.pMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pCall = new CallElements();
		this.pFeatureCall = new FeatureCallElements();
		this.pContainerOp = new ContainerOpElements();
		this.pDeclarator = new DeclaratorElements();
		this.pDeclaration = new DeclarationElements();
		this.pActualArgumentList = new ActualArgumentListElements();
		this.pActualArgument = new ActualArgumentElements();
		this.pExpressionAccess = new ExpressionAccessElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pContainerInitializer = new ContainerInitializerElements();
		this.pExpressionListOrRange = new ExpressionListOrRangeElements();
		this.pExpressionListEntry = new ExpressionListEntryElements();
		this.pLiteral = new LiteralElements();
		this.pIfExpression = new IfExpressionElements();
		this.pIdentifier = new IdentifierElements();
		this.tVERSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.VERSION");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ID");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.NUMBER");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.EXPONENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.Ivml.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_hildesheim.sse.Ivml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//VariabilityUnit:
	//    {VariabilityUnit}
	//    projects+=Project*;
	public VariabilityUnitElements getVariabilityUnitAccess() {
		return pVariabilityUnit;
	}
	
	public ParserRule getVariabilityUnitRule() {
		return getVariabilityUnitAccess().getRule();
	}
	
	//Project:
	//    'project' name=Identifier
	//    '{'
	//     //#> Interfaces
	//      version=VersionStmt?
	//      imports+=ImportStmt*
	//      conflicts+=ConflictStmt*
	//      interfaces += InterfaceDeclaration*
	//      //#< Interfaces
	//      contents=ProjectContents
	//    '}' ';'?
	//    ;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//ProjectContents:
	//    {ProjectContents} // ensure object creation
	//     (
	//         // in case of new elements adjust Utils.split
	//        elements+=Typedef
	//        | elements+=VariableDeclaration
	//        //#> EvalFreeze
	//        | elements+=Freeze
	//        | elements+=Eval
	//        //#< EvalFreeze
	//        | elements+=ExpressionStatement
	//        //#> Compounds
	//        | elements+=AnnotateTo
	//        //#< Compounds
	//        | elements+=OpDefStatement
	//        | elements+=AttrAssignment
	//    )*
	//;
	public ProjectContentsElements getProjectContentsAccess() {
		return pProjectContents;
	}
	
	public ParserRule getProjectContentsRule() {
		return getProjectContentsAccess().getRule();
	}
	
	//Typedef:
	//    tEnum=TypedefEnum
	//    | tCompound=TypedefCompound
	//    | tMapping=TypedefMapping
	//;
	public TypedefElements getTypedefAccess() {
		return pTypedef;
	}
	
	public ParserRule getTypedefRule() {
		return getTypedefAccess().getRule();
	}
	
	//TypedefEnum:
	//    'enum'
	//    name=Identifier
	//    '{'
	//        literals+=TypedefEnumLiteral
	//        (
	//            ','
	//            literals+=TypedefEnumLiteral
	//        )*
	//    '}'
	//    constraint=TypedefConstraint?
	//    ';'
	//    ;
	public TypedefEnumElements getTypedefEnumAccess() {
		return pTypedefEnum;
	}
	
	public ParserRule getTypedefEnumRule() {
		return getTypedefEnumAccess().getRule();
	}
	
	//TypedefEnumLiteral:
	//    name=Identifier
	//    (
	//        '=' value = NumValue
	//    )?
	//    ;
	public TypedefEnumLiteralElements getTypedefEnumLiteralAccess() {
		return pTypedefEnumLiteral;
	}
	
	public ParserRule getTypedefEnumLiteralRule() {
		return getTypedefEnumLiteralAccess().getRule();
	}
	
	//TypedefCompound:
	//    (abstract = 'abstract')? 'compound'
	//    name=Identifier
	//    //#> Compounds
	//    (
	//        'refines'
	//        super+=Identifier (',' super+=Identifier)*
	//    )?
	//    //#< Compounds
	//    '{'
	//        (elements+=VariableDeclaration
	//            | elements+=ExpressionStatement
	//            | elements+=AttrAssignment
	//            | elements+=Eval
	//        )*
	//    '}' ';'?
	//    ;
	public TypedefCompoundElements getTypedefCompoundAccess() {
		return pTypedefCompound;
	}
	
	public ParserRule getTypedefCompoundRule() {
		return getTypedefCompoundAccess().getRule();
	}
	
	//AttrAssignment:
	//    'assign' '(' parts+=AttrAssignmentPart (',' parts+=AttrAssignmentPart)* ')' 'to' '{'
	//        (elements+=VariableDeclaration | elements+=ExpressionStatement | elements+=AttrAssignment)+
	//    '}' ';'?
	//;
	public AttrAssignmentElements getAttrAssignmentAccess() {
		return pAttrAssignment;
	}
	
	public ParserRule getAttrAssignmentRule() {
		return getAttrAssignmentAccess().getRule();
	}
	
	//AttrAssignmentPart:
	//    name=Identifier '=' value=LogicalExpression
	//;
	public AttrAssignmentPartElements getAttrAssignmentPartAccess() {
		return pAttrAssignmentPart;
	}
	
	public ParserRule getAttrAssignmentPartRule() {
		return getAttrAssignmentPartAccess().getRule();
	}
	
	//TypedefMapping:
	//    'typedef'
	//    newType=Identifier
	//    type=Type
	//    constraint=TypedefConstraint?
	//    ';'
	//    ;
	public TypedefMappingElements getTypedefMappingAccess() {
		return pTypedefMapping;
	}
	
	public ParserRule getTypedefMappingRule() {
		return getTypedefMappingAccess().getRule();
	}
	
	//TypedefConstraint:
	//    'with'
	//    '('
	//        expressions = Expression
	//    ')'
	//    ;
	public TypedefConstraintElements getTypedefConstraintAccess() {
		return pTypedefConstraint;
	}
	
	public ParserRule getTypedefConstraintRule() {
		return getTypedefConstraintAccess().getRule();
	}
	
	//VariableDeclaration :
	//    const='const'?
	//    type=Type
	//    decls+=VariableDeclarationPart
	//    (
	//        ','
	//        decls+=VariableDeclarationPart
	//    )*
	//    ';'
	//    ;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationPart :
	//    name=Identifier ('=' default=Expression)?
	//    ;
	public VariableDeclarationPartElements getVariableDeclarationPartAccess() {
		return pVariableDeclarationPart;
	}
	
	public ParserRule getVariableDeclarationPartRule() {
		return getVariableDeclarationPartAccess().getRule();
	}
	
	//BasicType :
	//    type='Integer'
	//    | type='Real'
	//    | type='Boolean'
	//    | type='String'
	//    | type='Constraint'
	//    | type='Any'
	//    ;
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//Type :
	//    type=BasicType
	//    | id=QualifiedName
	//    | derived=DerivedType
	//    ;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//// just return string
	//NumValue :
	//    val=NUMBER
	//    ;
	public NumValueElements getNumValueAccess() {
		return pNumValue;
	}
	
	public ParserRule getNumValueRule() {
		return getNumValueAccess().getRule();
	}
	
	//QualifiedName :
	//    (
	//        qName+=Identifier
	//        qName+='::'
	//        (
	//            qName+=Identifier
	//            qName+='::'
	//        )*
	//    )?
	//    qName+=Identifier
	//    ;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//AccessName:
	//    (aName+='.' aName+=Identifier)+
	//;
	public AccessNameElements getAccessNameAccess() {
		return pAccessName;
	}
	
	public ParserRule getAccessNameRule() {
		return getAccessNameAccess().getRule();
	}
	
	//Value :
	//    nValue = NumValue
	//    | sValue = STRING
	//    | qValue = QualifiedName
	//    | bValue = ('true' | 'false')
	//    | self = 'self'
	//    //#> Compounds
	//    | nullValue = 'null'
	//    | tValue = Type
	//    | => version = VERSION
	//    //#< Compounds
	//    ;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//DerivedType :
	//    (
	//        op='setOf'
	//        | op='sequenceOf'
	//        //#> Compounds
	//        | op='refTo'
	//        //#< Compounds
	//    )
	//    '('
	//    type=Type
	//    ')'
	//    ;
	public DerivedTypeElements getDerivedTypeAccess() {
		return pDerivedType;
	}
	
	public ParserRule getDerivedTypeRule() {
		return getDerivedTypeAccess().getRule();
	}
	
	////#> Compounds
	//// --------------------- Extension: Compounds ----------------------
	//AnnotateTo :
	//    sname=('attribute' | 'annotate')
	//    annotationType=Type
	//    annotationDecl=VariableDeclarationPart
	//    'to'
	//    (names+='.' | (names+=Identifier (',' names += Identifier)*))
	//    ';'
	//    ;
	public AnnotateToElements getAnnotateToAccess() {
		return pAnnotateTo;
	}
	
	public ParserRule getAnnotateToRule() {
		return getAnnotateToAccess().getRule();
	}
	
	////#< Compounds
	////#> EvalFreeze
	//// --------------------- Extension: EvalFreeze ---------------------
	//Freeze:
	//    'freeze' '{'
	//    names+=(FreezeStatement)+
	//    '}' ('but' '(' id=Identifier '|' ex=LogicalExpression ')')? ';'?
	//    ;
	public FreezeElements getFreezeAccess() {
		return pFreeze;
	}
	
	public ParserRule getFreezeRule() {
		return getFreezeAccess().getRule();
	}
	
	//FreezeStatement:
	//    (dot='.' | (name=QualifiedName access=AccessName?))
	//    ';'
	//;
	public FreezeStatementElements getFreezeStatementAccess() {
		return pFreezeStatement;
	}
	
	public ParserRule getFreezeStatementRule() {
		return getFreezeStatementAccess().getRule();
	}
	
	//Eval:
	//    {Eval}
	//    'eval'
	//    '{'
	//    nested+=Eval*
	//    statements+=ExpressionStatement*
	//    '}' ';'?
	//    ;
	public EvalElements getEvalAccess() {
		return pEval;
	}
	
	public ParserRule getEvalRule() {
		return getEvalAccess().getRule();
	}
	
	////#< EvalFreeze
	////#> Interfaces
	//// ---------------------- Extension: Interfaces ---------------------
	//InterfaceDeclaration :
	//    'interface'
	//    name=Identifier
	//    '{'
	//        exports+=Export*
	//    '}'';'?
	//    ;
	public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
		return pInterfaceDeclaration;
	}
	
	public ParserRule getInterfaceDeclarationRule() {
		return getInterfaceDeclarationAccess().getRule();
	}
	
	//Export :
	//    'export' names+=QualifiedName (',' names+=QualifiedName)* ';'
	//;
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}
	
	//ImportStmt:
	//    ('import' | insert='insert')?
	//    name=Identifier ('::' interface=Identifier)? (wildcard="*"?)
	//    (
	//      'with' restriction = Expression
	//    )?
	//    ';'
	//    ;
	public ImportStmtElements getImportStmtAccess() {
		return pImportStmt;
	}
	
	public ParserRule getImportStmtRule() {
		return getImportStmtAccess().getRule();
	}
	
	//ConflictStmt:
	//    'conflicts'
	//    name=Identifier
	//    (
	//      'with' restriction = Expression
	//    )?
	//    ';'
	//    ;
	public ConflictStmtElements getConflictStmtAccess() {
		return pConflictStmt;
	}
	
	public ParserRule getConflictStmtRule() {
		return getConflictStmtAccess().getRule();
	}
	
	//VersionStmt:
	//    'version'
	//    version=VERSION
	//    ';'
	//    ;
	public VersionStmtElements getVersionStmtAccess() {
		return pVersionStmt;
	}
	
	public ParserRule getVersionStmtRule() {
		return getVersionStmtAccess().getRule();
	}
	
	////#< Interfaces
	////------------------------------------ OCL (excerpt) ----------------------------
	//OpDefStatement:
	//    annotations=AnnotationDeclarations?
	//    'def' static='static'? result=Type id=Identifier
	//    '(' param=OpDefParameterList ')'
	//    '=' (impl=Expression ';' | block=BlockExpression)
	//;
	public OpDefStatementElements getOpDefStatementAccess() {
		return pOpDefStatement;
	}
	
	public ParserRule getOpDefStatementRule() {
		return getOpDefStatementAccess().getRule();
	}
	
	//AnnotationDeclarations:
	//    {AnnotationDeclarations}
	//    ('@' id+=Identifier)*
	//;
	public AnnotationDeclarationsElements getAnnotationDeclarationsAccess() {
		return pAnnotationDeclarations;
	}
	
	public ParserRule getAnnotationDeclarationsRule() {
		return getAnnotationDeclarationsAccess().getRule();
	}
	
	//OpDefParameterList:
	//    {OpDefParameterList}
	//    (list+=OpDefParameter
	//    (
	//        ','
	//        list+=OpDefParameter
	//    )*)?
	//;
	public OpDefParameterListElements getOpDefParameterListAccess() {
		return pOpDefParameterList;
	}
	
	public ParserRule getOpDefParameterListRule() {
		return getOpDefParameterListAccess().getRule();
	}
	
	//OpDefParameter:
	//    type=Type id=Identifier ('=' val=Expression)?
	//;
	public OpDefParameterElements getOpDefParameterAccess() {
		return pOpDefParameter;
	}
	
	public ParserRule getOpDefParameterRule() {
		return getOpDefParameterAccess().getRule();
	}
	
	//// do not rename this rule (fragment parsing)
	//ExpressionStatement:
	//    expr=Expression
	//    ';'
	//    ;
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//// do not rename this rule (fragment parsing)
	//Expression:
	//    let=LetExpression
	//    |    expr=ImplicationExpression
	//    |   container=ContainerInitializer
	//    ;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//LetExpression:
	//    'let'
	//    type=Type name=Identifier // type is optional in OCL - IVML adjustment
	//    '='
	//    valueExpr=Expression
	//    'in'
	//    subExpr=OptBlockExpression
	//    ;
	public LetExpressionElements getLetExpressionAccess() {
		return pLetExpression;
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}
	
	//OptBlockExpression:
	//    expr=Expression | block=BlockExpression
	//;
	public OptBlockExpressionElements getOptBlockExpressionAccess() {
		return pOptBlockExpression;
	}
	
	public ParserRule getOptBlockExpressionRule() {
		return getOptBlockExpressionAccess().getRule();
	}
	
	//BlockExpression:
	//    '{'
	//    exprs+=ExpressionStatement+
	//    '}'
	//;
	public BlockExpressionElements getBlockExpressionAccess() {
		return pBlockExpression;
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}
	
	//AssignmentExpression:
	//    left=LogicalExpression
	//    right+=AssignmentExpressionPart?
	//;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//AssignmentExpressionPart:
	//    op=AssignmentOperator
	//    (ex=LogicalExpression | container=ContainerInitializer)
	//;
	public AssignmentExpressionPartElements getAssignmentExpressionPartAccess() {
		return pAssignmentExpressionPart;
	}
	
	public ParserRule getAssignmentExpressionPartRule() {
		return getAssignmentExpressionPartAccess().getRule();
	}
	
	//AssignmentOperator:
	//    '=' // IVML addition
	//    ;
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return pAssignmentOperator;
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//ImplicationExpression:
	//    left=AssignmentExpression
	//    right+=ImplicationExpressionPart*
	//    ;
	public ImplicationExpressionElements getImplicationExpressionAccess() {
		return pImplicationExpression;
	}
	
	public ParserRule getImplicationExpressionRule() {
		return getImplicationExpressionAccess().getRule();
	}
	
	//ImplicationExpressionPart:
	//    op=ImplicationOperator
	//    ex=AssignmentExpression
	//    ;
	public ImplicationExpressionPartElements getImplicationExpressionPartAccess() {
		return pImplicationExpressionPart;
	}
	
	public ParserRule getImplicationExpressionPartRule() {
		return getImplicationExpressionPartAccess().getRule();
	}
	
	//ImplicationOperator:
	//    'implies'
	//    |'iff'  // IVML addition
	//    ;
	public ImplicationOperatorElements getImplicationOperatorAccess() {
		return pImplicationOperator;
	}
	
	public ParserRule getImplicationOperatorRule() {
		return getImplicationOperatorAccess().getRule();
	}
	
	//LogicalExpression:
	//    left=EqualityExpression
	//    right+=LogicalExpressionPart*
	//    ;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return pLogicalExpression;
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}
	
	//LogicalExpressionPart:
	//    op=LogicalOperator
	//    ex=EqualityExpression
	//;
	public LogicalExpressionPartElements getLogicalExpressionPartAccess() {
		return pLogicalExpressionPart;
	}
	
	public ParserRule getLogicalExpressionPartRule() {
		return getLogicalExpressionPartAccess().getRule();
	}
	
	//LogicalOperator:
	//    'and'
	//    |'or'
	//    |'xor'
	//    ;
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return pLogicalOperator;
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//EqualityExpression:
	//    left=RelationalExpression
	//    right=EqualityExpressionPart?
	//    ;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//EqualityExpressionPart:
	//    op=EqualityOperator
	//    (ex=RelationalExpression | container=ContainerInitializer)
	//;
	public EqualityExpressionPartElements getEqualityExpressionPartAccess() {
		return pEqualityExpressionPart;
	}
	
	public ParserRule getEqualityExpressionPartRule() {
		return getEqualityExpressionPartAccess().getRule();
	}
	
	//EqualityOperator:
	//    '=='
	//    |'<>'
	//    |'!='
	//    ;
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return pEqualityOperator;
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//RelationalExpression:
	//    left=AdditiveExpression
	//    (right=RelationalExpressionPart right2=RelationalExpressionPart?)?
	//    ;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalExpressionPart:
	//    op=RelationalOperator
	//    ex=AdditiveExpression
	//;
	public RelationalExpressionPartElements getRelationalExpressionPartAccess() {
		return pRelationalExpressionPart;
	}
	
	public ParserRule getRelationalExpressionPartRule() {
		return getRelationalExpressionPartAccess().getRule();
	}
	
	//RelationalOperator:
	//    '>'
	//    |'<'
	//    |'>='
	//    |'<='
	//    ;
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//AdditiveExpression:
	//    left=MultiplicativeExpression
	//    right+=AdditiveExpressionPart*
	//    ;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//AdditiveExpressionPart:
	//    op=AdditiveOperator
	//    ex=MultiplicativeExpression
	//;
	public AdditiveExpressionPartElements getAdditiveExpressionPartAccess() {
		return pAdditiveExpressionPart;
	}
	
	public ParserRule getAdditiveExpressionPartRule() {
		return getAdditiveExpressionPartAccess().getRule();
	}
	
	//AdditiveOperator:
	//    '+'
	//    |'-'
	//    ;
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return pAdditiveOperator;
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression:
	//    left=UnaryExpression
	//    right=MultiplicativeExpressionPart?
	//    ;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MultiplicativeExpressionPart:
	//    op=MultiplicativeOperator
	//    expr=UnaryExpression
	//;
	public MultiplicativeExpressionPartElements getMultiplicativeExpressionPartAccess() {
		return pMultiplicativeExpressionPart;
	}
	
	public ParserRule getMultiplicativeExpressionPartRule() {
		return getMultiplicativeExpressionPartAccess().getRule();
	}
	
	//MultiplicativeOperator:
	//    '*'
	//    |'/'
	//    ;
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return pMultiplicativeOperator;
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//UnaryExpression:
	//    op = UnaryOperator?
	//    expr=PostfixExpression
	//    ;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//    'not'
	//    |'-'
	//    ;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//PostfixExpression:
	//    (call=FeatureCall (fCalls+=Call)* access=ExpressionAccess?) // IVML addition, call primitive operations
	//    | (left=PrimaryExpression)
	//    ;
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//Call: // IVML: "lambda"-expression with apply operation set->apply(t,r=0|max(t,r))
	//    '.' call=FeatureCall
	//    | '->' containerOp=ContainerOp
	//    | '[' arrayEx=Expression ']' // IVML addition to OCL
	//;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//FeatureCall:
	//    (name=Identifier|name=RelationalOperator|name=AdditiveOperator|name=MultiplicativeOperator|name=EqualityOperator|
	//         name=ImplicationOperator|name=LogicalOperator|name="not")
	//    '('
	//    ActualArgumentList?
	//    ')'
	//    ;
	public FeatureCallElements getFeatureCallAccess() {
		return pFeatureCall;
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}
	
	//ContainerOp:
	//    name=Identifier
	//    '('
	//        decl=Declarator? ActualArgumentList?
	//    ')'
	//    ;
	public ContainerOpElements getContainerOpAccess() {
		return pContainerOp;
	}
	
	public ParserRule getContainerOpRule() {
		return getContainerOpAccess().getRule();
	}
	
	//Declarator:
	//    decl+=Declaration (';' decl+=Declaration)* '|'
	//    ;
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	//Declaration:
	//    (type=Type)? id+=Identifier (',' id+=Identifier)*
	//    ('=' init=Expression)?
	//    ;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//fragment ActualArgumentList:
	//    args+=ActualArgument
	//    (
	//        ','
	//        args+=ActualArgument
	//    )*
	//    ;
	public ActualArgumentListElements getActualArgumentListAccess() {
		return pActualArgumentList;
	}
	
	public ParserRule getActualArgumentListRule() {
		return getActualArgumentListAccess().getRule();
	}
	
	//ActualArgument:
	//    (name=Identifier '=')? arg=Expression
	//;
	public ActualArgumentElements getActualArgumentAccess() {
		return pActualArgument;
	}
	
	public ParserRule getActualArgumentRule() {
		return getActualArgumentAccess().getRule();
	}
	
	//ExpressionAccess:
	//    '.' name=Identifier
	//    calls+=Call*
	//    access=ExpressionAccess?
	//;
	public ExpressionAccessElements getExpressionAccessAccess() {
		return pExpressionAccess;
	}
	
	public ParserRule getExpressionAccessRule() {
		return getExpressionAccessAccess().getRule();
	}
	
	//PrimaryExpression:
	//    (lit=Literal
	////    |    call=FeatureCall // unclear on what to execute (in OCL this is the context)
	//    |    '(' ex=Expression ')'
	//    |    ifEx=IfExpression
	//    |   'refBy' '(' refEx=Expression ')')
	//    calls+=Call*
	//    access=ExpressionAccess?
	//    ;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//ContainerInitializer:
	//    {ContainerInitializer}
	//    type=QualifiedName? // not OclCollection as otherways Collections are excluded
	//    '{'
	//    init=ExpressionListOrRange?
	//    '}'
	//    ;
	public ContainerInitializerElements getContainerInitializerAccess() {
		return pContainerInitializer;
	}
	
	public ParserRule getContainerInitializerRule() {
		return getContainerInitializerAccess().getRule();
	}
	
	//ExpressionListOrRange:    // adjust values to Expressions
	//    list+=ExpressionListEntry
	//    (',' list+=ExpressionListEntry)*
	////    |    '..' rangeEndEx=ExpressionListEntry // IVML change to OCL
	//    ;
	public ExpressionListOrRangeElements getExpressionListOrRangeAccess() {
		return pExpressionListOrRange;
	}
	
	public ParserRule getExpressionListOrRangeRule() {
		return getExpressionListOrRangeAccess().getRule();
	}
	
	//ExpressionListEntry:
	//    (name=Identifier ('.' attrib=Identifier)? '=')? // for compound initialization (IVML extension to OCL)
	//    (value=ImplicationExpression | container=ContainerInitializer)
	//    ;
	public ExpressionListEntryElements getExpressionListEntryAccess() {
		return pExpressionListEntry;
	}
	
	public ParserRule getExpressionListEntryRule() {
		return getExpressionListEntryAccess().getRule();
	}
	
	//Literal:
	//    //Identifier | numValue
	//    val=Value
	//    ;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IfExpression:
	//    'if'
	//    ifEx=Expression
	//    'then'
	//    thenEx=OptBlockExpression
	//    'else'
	//    elseEx=OptBlockExpression
	//    'endif'
	//    ;
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//// unify distinct terminals -> IdentifierValueConverter
	//// never allow identifiers starting with $ -> Reasoner name prefixes
	//Identifier:
	//    ID | VERSION | EXPONENT | 'version'
	//;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//// --------------------- Terminals ----------------------------------
	//// otherwise we would have to write 0 . 5 instead of 0.5
	//terminal VERSION:
	//    'v' ('0'..'9')+ ('.' ('0'..'9')+)*
	//    ;
	public TerminalRule getVERSIONRule() {
		return tVERSION;
	}
	
	//// adjust de.uni_hildesheim.sse.model.validation.IvmlIdentifierCheck
	//// never allow identifiers starting with $ -> Reasoner name prefixes
	//terminal ID:
	//    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	//    ;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal NUMBER:
	//    '-'?
	//    (('0'..'9')+ ('.' ('0'..'9')* EXPONENT?)?
	//    |   '.' ('0'..'9')+ EXPONENT?
	//    |   ('0'..'9')+ EXPONENT)
	//    ;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal EXPONENT: // just return a string
	//    ('e'|'E') ('+'|'-')? ('0'..'9')+
	//;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal STRING    :
	//    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	//    "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
	//    ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//// do not change the name of this terminal!!! -> comment recognition
	//terminal ML_COMMENT:
	//    '/*' -> '*/'
	//    ;
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//// do not change the name of this terminal!!! -> comment recognition
	//terminal SL_COMMENT:
	//    '//' !('\n'|'\r')* ('\r'? '\n')?
	//    ;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//// do not change the name of this terminal!!! -> comment recognition
	//terminal WS:
	//    (' '|'\t'|'\r'|'\n')+
	//    ;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//    .
	//    ;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
