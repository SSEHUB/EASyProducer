/*
 * generated by Xtext 2.35.0
 */
grammar InternalIvml;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package de.uni_hildesheim.sse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_hildesheim.sse.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_hildesheim.sse.services.IvmlGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private IvmlGrammarAccess grammarAccess;

    public InternalIvmlParser(TokenStream input, IvmlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "VariabilityUnit";
   	}

   	@Override
   	protected IvmlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleVariabilityUnit
entryRuleVariabilityUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariabilityUnitRule()); }
	iv_ruleVariabilityUnit=ruleVariabilityUnit
	{ $current=$iv_ruleVariabilityUnit.current; }
	EOF;

// Rule VariabilityUnit
ruleVariabilityUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariabilityUnitAccess().getVariabilityUnitAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariabilityUnitAccess().getProjectsProjectParserRuleCall_1_0());
				}
				lv_projects_1_0=ruleProject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariabilityUnitRule());
					}
					add(
						$current,
						"projects",
						lv_projects_1_0,
						"de.uni_hildesheim.sse.Ivml.Project");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='project'
		{
			newLeafNode(otherlv_0, grammarAccess.getProjectAccess().getProjectKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getVersionVersionStmtParserRuleCall_3_0());
				}
				lv_version_3_0=ruleVersionStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					set(
						$current,
						"version",
						lv_version_3_0,
						"de.uni_hildesheim.sse.Ivml.VersionStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getImportsImportStmtParserRuleCall_4_0());
				}
				lv_imports_4_0=ruleImportStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					add(
						$current,
						"imports",
						lv_imports_4_0,
						"de.uni_hildesheim.sse.Ivml.ImportStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getConflictsConflictStmtParserRuleCall_5_0());
				}
				lv_conflicts_5_0=ruleConflictStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					add(
						$current,
						"conflicts",
						lv_conflicts_5_0,
						"de.uni_hildesheim.sse.Ivml.ConflictStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getInterfacesInterfaceDeclarationParserRuleCall_6_0());
				}
				lv_interfaces_6_0=ruleInterfaceDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					add(
						$current,
						"interfaces",
						lv_interfaces_6_0,
						"de.uni_hildesheim.sse.Ivml.InterfaceDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getContentsProjectContentsParserRuleCall_7_0());
				}
				lv_contents_7_0=ruleProjectContents
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					set(
						$current,
						"contents",
						lv_contents_7_0,
						"de.uni_hildesheim.sse.Ivml.ProjectContents");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_8());
		}
		(
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getProjectAccess().getSemicolonKeyword_9());
			}
		)?
	)
;

// Entry rule entryRuleProjectContents
entryRuleProjectContents returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectContentsRule()); }
	iv_ruleProjectContents=ruleProjectContents
	{ $current=$iv_ruleProjectContents.current; }
	EOF;

// Rule ProjectContents
ruleProjectContents returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getProjectContentsAccess().getProjectContentsAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectContentsAccess().getElementsTypedefParserRuleCall_1_0_0());
					}
					lv_elements_1_0=ruleTypedef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectContentsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_1_0,
							"de.uni_hildesheim.sse.Ivml.Typedef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectContentsAccess().getElementsVariableDeclarationParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectContentsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"de.uni_hildesheim.sse.Ivml.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectContentsAccess().getElementsFreezeParserRuleCall_1_2_0());
					}
					lv_elements_3_0=ruleFreeze
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectContentsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"de.uni_hildesheim.sse.Ivml.Freeze");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectContentsAccess().getElementsEvalParserRuleCall_1_3_0());
					}
					lv_elements_4_0=ruleEval
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectContentsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_4_0,
							"de.uni_hildesheim.sse.Ivml.Eval");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectContentsAccess().getElementsExpressionStatementParserRuleCall_1_4_0());
					}
					lv_elements_5_0=ruleExpressionStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectContentsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_5_0,
							"de.uni_hildesheim.sse.Ivml.ExpressionStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectContentsAccess().getElementsAnnotateToParserRuleCall_1_5_0());
					}
					lv_elements_6_0=ruleAnnotateTo
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectContentsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_6_0,
							"de.uni_hildesheim.sse.Ivml.AnnotateTo");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectContentsAccess().getElementsOpDefStatementParserRuleCall_1_6_0());
					}
					lv_elements_7_0=ruleOpDefStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectContentsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_7_0,
							"de.uni_hildesheim.sse.Ivml.OpDefStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectContentsAccess().getElementsAttrAssignmentParserRuleCall_1_7_0());
					}
					lv_elements_8_0=ruleAttrAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectContentsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_8_0,
							"de.uni_hildesheim.sse.Ivml.AttrAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTypedef
entryRuleTypedef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedefRule()); }
	iv_ruleTypedef=ruleTypedef
	{ $current=$iv_ruleTypedef.current; }
	EOF;

// Rule Typedef
ruleTypedef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefAccess().getTEnumTypedefEnumParserRuleCall_0_0());
				}
				lv_tEnum_0_0=ruleTypedefEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefRule());
					}
					set(
						$current,
						"tEnum",
						lv_tEnum_0_0,
						"de.uni_hildesheim.sse.Ivml.TypedefEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefAccess().getTCompoundTypedefCompoundParserRuleCall_1_0());
				}
				lv_tCompound_1_0=ruleTypedefCompound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefRule());
					}
					set(
						$current,
						"tCompound",
						lv_tCompound_1_0,
						"de.uni_hildesheim.sse.Ivml.TypedefCompound");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefAccess().getTMappingTypedefMappingParserRuleCall_2_0());
				}
				lv_tMapping_2_0=ruleTypedefMapping
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefRule());
					}
					set(
						$current,
						"tMapping",
						lv_tMapping_2_0,
						"de.uni_hildesheim.sse.Ivml.TypedefMapping");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypedefEnum
entryRuleTypedefEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedefEnumRule()); }
	iv_ruleTypedefEnum=ruleTypedefEnum
	{ $current=$iv_ruleTypedefEnum.current; }
	EOF;

// Rule TypedefEnum
ruleTypedefEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypedefEnumAccess().getEnumKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefEnumAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefEnumRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypedefEnumAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefEnumAccess().getLiteralsTypedefEnumLiteralParserRuleCall_3_0());
				}
				lv_literals_3_0=ruleTypedefEnumLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefEnumRule());
					}
					add(
						$current,
						"literals",
						lv_literals_3_0,
						"de.uni_hildesheim.sse.Ivml.TypedefEnumLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTypedefEnumAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedefEnumAccess().getLiteralsTypedefEnumLiteralParserRuleCall_4_1_0());
					}
					lv_literals_5_0=ruleTypedefEnumLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedefEnumRule());
						}
						add(
							$current,
							"literals",
							lv_literals_5_0,
							"de.uni_hildesheim.sse.Ivml.TypedefEnumLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTypedefEnumAccess().getRightCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefEnumAccess().getConstraintTypedefConstraintParserRuleCall_6_0());
				}
				lv_constraint_7_0=ruleTypedefConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefEnumRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_7_0,
						"de.uni_hildesheim.sse.Ivml.TypedefConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getTypedefEnumAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRuleTypedefEnumLiteral
entryRuleTypedefEnumLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedefEnumLiteralRule()); }
	iv_ruleTypedefEnumLiteral=ruleTypedefEnumLiteral
	{ $current=$iv_ruleTypedefEnumLiteral.current; }
	EOF;

// Rule TypedefEnumLiteral
ruleTypedefEnumLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefEnumLiteralAccess().getNameIdentifierParserRuleCall_0_0());
				}
				lv_name_0_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefEnumLiteralRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getTypedefEnumLiteralAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedefEnumLiteralAccess().getValueNumValueParserRuleCall_1_1_0());
					}
					lv_value_2_0=ruleNumValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedefEnumLiteralRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"de.uni_hildesheim.sse.Ivml.NumValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleTypedefCompound
entryRuleTypedefCompound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedefCompoundRule()); }
	iv_ruleTypedefCompound=ruleTypedefCompound
	{ $current=$iv_ruleTypedefCompound.current; }
	EOF;

// Rule TypedefCompound
ruleTypedefCompound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getTypedefCompoundAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypedefCompoundRule());
					}
					setWithLastConsumed($current, "abstract", lv_abstract_0_0, "abstract");
				}
			)
		)?
		otherlv_1='compound'
		{
			newLeafNode(otherlv_1, grammarAccess.getTypedefCompoundAccess().getCompoundKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefCompoundAccess().getNameIdentifierParserRuleCall_2_0());
				}
				lv_name_2_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefCompoundRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='refines'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypedefCompoundAccess().getRefinesKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedefCompoundAccess().getSuperIdentifierParserRuleCall_3_1_0());
					}
					lv_super_4_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedefCompoundRule());
						}
						add(
							$current,
							"super",
							lv_super_4_0,
							"de.uni_hildesheim.sse.Ivml.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getTypedefCompoundAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypedefCompoundAccess().getSuperIdentifierParserRuleCall_3_2_1_0());
						}
						lv_super_6_0=ruleIdentifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypedefCompoundRule());
							}
							add(
								$current,
								"super",
								lv_super_6_0,
								"de.uni_hildesheim.sse.Ivml.Identifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getTypedefCompoundAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedefCompoundAccess().getElementsVariableDeclarationParserRuleCall_5_0_0());
					}
					lv_elements_8_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedefCompoundRule());
						}
						add(
							$current,
							"elements",
							lv_elements_8_0,
							"de.uni_hildesheim.sse.Ivml.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedefCompoundAccess().getElementsExpressionStatementParserRuleCall_5_1_0());
					}
					lv_elements_9_0=ruleExpressionStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedefCompoundRule());
						}
						add(
							$current,
							"elements",
							lv_elements_9_0,
							"de.uni_hildesheim.sse.Ivml.ExpressionStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedefCompoundAccess().getElementsAttrAssignmentParserRuleCall_5_2_0());
					}
					lv_elements_10_0=ruleAttrAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedefCompoundRule());
						}
						add(
							$current,
							"elements",
							lv_elements_10_0,
							"de.uni_hildesheim.sse.Ivml.AttrAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedefCompoundAccess().getElementsEvalParserRuleCall_5_3_0());
					}
					lv_elements_11_0=ruleEval
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedefCompoundRule());
						}
						add(
							$current,
							"elements",
							lv_elements_11_0,
							"de.uni_hildesheim.sse.Ivml.Eval");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getTypedefCompoundAccess().getRightCurlyBracketKeyword_6());
		}
		(
			otherlv_13=';'
			{
				newLeafNode(otherlv_13, grammarAccess.getTypedefCompoundAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleAttrAssignment
entryRuleAttrAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttrAssignmentRule()); }
	iv_ruleAttrAssignment=ruleAttrAssignment
	{ $current=$iv_ruleAttrAssignment.current; }
	EOF;

// Rule AttrAssignment
ruleAttrAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assign'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttrAssignmentAccess().getAssignKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAttrAssignmentAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrAssignmentAccess().getPartsAttrAssignmentPartParserRuleCall_2_0());
				}
				lv_parts_2_0=ruleAttrAssignmentPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrAssignmentRule());
					}
					add(
						$current,
						"parts",
						lv_parts_2_0,
						"de.uni_hildesheim.sse.Ivml.AttrAssignmentPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getAttrAssignmentAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttrAssignmentAccess().getPartsAttrAssignmentPartParserRuleCall_3_1_0());
					}
					lv_parts_4_0=ruleAttrAssignmentPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttrAssignmentRule());
						}
						add(
							$current,
							"parts",
							lv_parts_4_0,
							"de.uni_hildesheim.sse.Ivml.AttrAssignmentPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAttrAssignmentAccess().getRightParenthesisKeyword_4());
		}
		otherlv_6='to'
		{
			newLeafNode(otherlv_6, grammarAccess.getAttrAssignmentAccess().getToKeyword_5());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getAttrAssignmentAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAttrAssignmentAccess().getElementsVariableDeclarationParserRuleCall_7_0_0());
					}
					lv_elements_8_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttrAssignmentRule());
						}
						add(
							$current,
							"elements",
							lv_elements_8_0,
							"de.uni_hildesheim.sse.Ivml.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAttrAssignmentAccess().getElementsExpressionStatementParserRuleCall_7_1_0());
					}
					lv_elements_9_0=ruleExpressionStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttrAssignmentRule());
						}
						add(
							$current,
							"elements",
							lv_elements_9_0,
							"de.uni_hildesheim.sse.Ivml.ExpressionStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAttrAssignmentAccess().getElementsAttrAssignmentParserRuleCall_7_2_0());
					}
					lv_elements_10_0=ruleAttrAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttrAssignmentRule());
						}
						add(
							$current,
							"elements",
							lv_elements_10_0,
							"de.uni_hildesheim.sse.Ivml.AttrAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getAttrAssignmentAccess().getRightCurlyBracketKeyword_8());
		}
		(
			otherlv_12=';'
			{
				newLeafNode(otherlv_12, grammarAccess.getAttrAssignmentAccess().getSemicolonKeyword_9());
			}
		)?
	)
;

// Entry rule entryRuleAttrAssignmentPart
entryRuleAttrAssignmentPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttrAssignmentPartRule()); }
	iv_ruleAttrAssignmentPart=ruleAttrAssignmentPart
	{ $current=$iv_ruleAttrAssignmentPart.current; }
	EOF;

// Rule AttrAssignmentPart
ruleAttrAssignmentPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrAssignmentPartAccess().getNameIdentifierParserRuleCall_0_0());
				}
				lv_name_0_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrAssignmentPartRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAttrAssignmentPartAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrAssignmentPartAccess().getValueLogicalExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleLogicalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrAssignmentPartRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"de.uni_hildesheim.sse.Ivml.LogicalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypedefMapping
entryRuleTypedefMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedefMappingRule()); }
	iv_ruleTypedefMapping=ruleTypedefMapping
	{ $current=$iv_ruleTypedefMapping.current; }
	EOF;

// Rule TypedefMapping
ruleTypedefMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='typedef'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypedefMappingAccess().getTypedefKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefMappingAccess().getNewTypeIdentifierParserRuleCall_1_0());
				}
				lv_newType_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefMappingRule());
					}
					set(
						$current,
						"newType",
						lv_newType_1_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefMappingAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefMappingRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"de.uni_hildesheim.sse.Ivml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefMappingAccess().getConstraintTypedefConstraintParserRuleCall_3_0());
				}
				lv_constraint_3_0=ruleTypedefConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefMappingRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_3_0,
						"de.uni_hildesheim.sse.Ivml.TypedefConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getTypedefMappingAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleTypedefConstraint
entryRuleTypedefConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedefConstraintRule()); }
	iv_ruleTypedefConstraint=ruleTypedefConstraint
	{ $current=$iv_ruleTypedefConstraint.current; }
	EOF;

// Rule TypedefConstraint
ruleTypedefConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='with'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypedefConstraintAccess().getWithKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTypedefConstraintAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefConstraintAccess().getExpressionsExpressionParserRuleCall_2_0());
				}
				lv_expressions_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefConstraintRule());
					}
					set(
						$current,
						"expressions",
						lv_expressions_2_0,
						"de.uni_hildesheim.sse.Ivml.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypedefConstraintAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_const_0_0='const'
				{
					newLeafNode(lv_const_0_0, grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed($current, "const", lv_const_0_0, "const");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"de.uni_hildesheim.sse.Ivml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getDeclsVariableDeclarationPartParserRuleCall_2_0());
				}
				lv_decls_2_0=ruleVariableDeclarationPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					add(
						$current,
						"decls",
						lv_decls_2_0,
						"de.uni_hildesheim.sse.Ivml.VariableDeclarationPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getDeclsVariableDeclarationPartParserRuleCall_3_1_0());
					}
					lv_decls_4_0=ruleVariableDeclarationPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						add(
							$current,
							"decls",
							lv_decls_4_0,
							"de.uni_hildesheim.sse.Ivml.VariableDeclarationPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleVariableDeclarationPart
entryRuleVariableDeclarationPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationPartRule()); }
	iv_ruleVariableDeclarationPart=ruleVariableDeclarationPart
	{ $current=$iv_ruleVariableDeclarationPart.current; }
	EOF;

// Rule VariableDeclarationPart
ruleVariableDeclarationPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationPartAccess().getNameIdentifierParserRuleCall_0_0());
				}
				lv_name_0_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationPartRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationPartAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationPartAccess().getDefaultExpressionParserRuleCall_1_1_0());
					}
					lv_default_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationPartRule());
						}
						set(
							$current,
							"default",
							lv_default_2_0,
							"de.uni_hildesheim.sse.Ivml.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	iv_ruleBasicType=ruleBasicType
	{ $current=$iv_ruleBasicType.current; }
	EOF;

// Rule BasicType
ruleBasicType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0='Integer'
				{
					newLeafNode(lv_type_0_0, grammarAccess.getBasicTypeAccess().getTypeIntegerKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_0, "Integer");
				}
			)
		)
		    |
		(
			(
				lv_type_1_0='Real'
				{
					newLeafNode(lv_type_1_0, grammarAccess.getBasicTypeAccess().getTypeRealKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_1_0, "Real");
				}
			)
		)
		    |
		(
			(
				lv_type_2_0='Boolean'
				{
					newLeafNode(lv_type_2_0, grammarAccess.getBasicTypeAccess().getTypeBooleanKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_2_0, "Boolean");
				}
			)
		)
		    |
		(
			(
				lv_type_3_0='String'
				{
					newLeafNode(lv_type_3_0, grammarAccess.getBasicTypeAccess().getTypeStringKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_3_0, "String");
				}
			)
		)
		    |
		(
			(
				lv_type_4_0='Constraint'
				{
					newLeafNode(lv_type_4_0, grammarAccess.getBasicTypeAccess().getTypeConstraintKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_4_0, "Constraint");
				}
			)
		)
		    |
		(
			(
				lv_type_5_0='Any'
				{
					newLeafNode(lv_type_5_0, grammarAccess.getBasicTypeAccess().getTypeAnyKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicTypeRule());
					}
					setWithLastConsumed($current, "type", lv_type_5_0, "Any");
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTypeBasicTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleBasicType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"de.uni_hildesheim.sse.Ivml.BasicType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getIdQualifiedNameParserRuleCall_1_0());
				}
				lv_id_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"de.uni_hildesheim.sse.Ivml.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getDerivedDerivedTypeParserRuleCall_2_0());
				}
				lv_derived_2_0=ruleDerivedType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"derived",
						lv_derived_2_0,
						"de.uni_hildesheim.sse.Ivml.DerivedType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNumValue
entryRuleNumValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumValueRule()); }
	iv_ruleNumValue=ruleNumValue
	{ $current=$iv_ruleNumValue.current; }
	EOF;

// Rule NumValue
ruleNumValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_NUMBER
			{
				newLeafNode(lv_val_0_0, grammarAccess.getNumValueAccess().getValNUMBERTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumValueRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"de.uni_hildesheim.sse.Ivml.NUMBER");
			}
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current; }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getQualifiedNameAccess().getQNameIdentifierParserRuleCall_0_0_0());
					}
					lv_qName_0_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQualifiedNameRule());
						}
						add(
							$current,
							"qName",
							lv_qName_0_0,
							"de.uni_hildesheim.sse.Ivml.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_qName_1_0='::'
					{
						newLeafNode(lv_qName_1_0, grammarAccess.getQualifiedNameAccess().getQNameColonColonKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQualifiedNameRule());
						}
						addWithLastConsumed($current, "qName", lv_qName_1_0, "::");
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getQualifiedNameAccess().getQNameIdentifierParserRuleCall_0_2_0_0());
						}
						lv_qName_2_0=ruleIdentifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getQualifiedNameRule());
							}
							add(
								$current,
								"qName",
								lv_qName_2_0,
								"de.uni_hildesheim.sse.Ivml.Identifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						lv_qName_3_0='::'
						{
							newLeafNode(lv_qName_3_0, grammarAccess.getQualifiedNameAccess().getQNameColonColonKeyword_0_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getQualifiedNameRule());
							}
							addWithLastConsumed($current, "qName", lv_qName_3_0, "::");
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQualifiedNameAccess().getQNameIdentifierParserRuleCall_1_0());
				}
				lv_qName_4_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQualifiedNameRule());
					}
					add(
						$current,
						"qName",
						lv_qName_4_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAccessName
entryRuleAccessName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAccessNameRule()); }
	iv_ruleAccessName=ruleAccessName
	{ $current=$iv_ruleAccessName.current; }
	EOF;

// Rule AccessName
ruleAccessName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_aName_0_0='.'
				{
					newLeafNode(lv_aName_0_0, grammarAccess.getAccessNameAccess().getANameFullStopKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAccessNameRule());
					}
					addWithLastConsumed($current, "aName", lv_aName_0_0, ".");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAccessNameAccess().getANameIdentifierParserRuleCall_1_0());
				}
				lv_aName_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAccessNameRule());
					}
					add(
						$current,
						"aName",
						lv_aName_1_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)+
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getNValueNumValueParserRuleCall_0_0());
				}
				lv_nValue_0_0=ruleNumValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"nValue",
						lv_nValue_0_0,
						"de.uni_hildesheim.sse.Ivml.NumValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_sValue_1_0=RULE_STRING
				{
					newLeafNode(lv_sValue_1_0, grammarAccess.getValueAccess().getSValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed(
						$current,
						"sValue",
						lv_sValue_1_0,
						"de.uni_hildesheim.sse.Ivml.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getQValueQualifiedNameParserRuleCall_2_0());
				}
				lv_qValue_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"qValue",
						lv_qValue_2_0,
						"de.uni_hildesheim.sse.Ivml.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_bValue_3_1='true'
					{
						newLeafNode(lv_bValue_3_1, grammarAccess.getValueAccess().getBValueTrueKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getValueRule());
						}
						setWithLastConsumed($current, "bValue", lv_bValue_3_1, null);
					}
					    |
					lv_bValue_3_2='false'
					{
						newLeafNode(lv_bValue_3_2, grammarAccess.getValueAccess().getBValueFalseKeyword_3_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getValueRule());
						}
						setWithLastConsumed($current, "bValue", lv_bValue_3_2, null);
					}
				)
			)
		)
		    |
		(
			(
				lv_self_4_0='self'
				{
					newLeafNode(lv_self_4_0, grammarAccess.getValueAccess().getSelfSelfKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed($current, "self", lv_self_4_0, "self");
				}
			)
		)
		    |
		(
			(
				lv_nullValue_5_0='null'
				{
					newLeafNode(lv_nullValue_5_0, grammarAccess.getValueAccess().getNullValueNullKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed($current, "nullValue", lv_nullValue_5_0, "null");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getTValueTypeParserRuleCall_6_0());
				}
				lv_tValue_6_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"tValue",
						lv_tValue_6_0,
						"de.uni_hildesheim.sse.Ivml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			((
				RULE_VERSION
			)
			)=>
			(
				lv_version_7_0=RULE_VERSION
				{
					newLeafNode(lv_version_7_0, grammarAccess.getValueAccess().getVersionVERSIONTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed(
						$current,
						"version",
						lv_version_7_0,
						"de.uni_hildesheim.sse.Ivml.VERSION");
				}
			)
		)
	)
;

// Entry rule entryRuleDerivedType
entryRuleDerivedType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDerivedTypeRule()); }
	iv_ruleDerivedType=ruleDerivedType
	{ $current=$iv_ruleDerivedType.current; }
	EOF;

// Rule DerivedType
ruleDerivedType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_op_0_0='setOf'
					{
						newLeafNode(lv_op_0_0, grammarAccess.getDerivedTypeAccess().getOpSetOfKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDerivedTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_0, "setOf");
					}
				)
			)
			    |
			(
				(
					lv_op_1_0='sequenceOf'
					{
						newLeafNode(lv_op_1_0, grammarAccess.getDerivedTypeAccess().getOpSequenceOfKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDerivedTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_0, "sequenceOf");
					}
				)
			)
			    |
			(
				(
					lv_op_2_0='refTo'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getDerivedTypeAccess().getOpRefToKeyword_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDerivedTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "refTo");
					}
				)
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getDerivedTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDerivedTypeAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_4_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDerivedTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_4_0,
						"de.uni_hildesheim.sse.Ivml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getDerivedTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAnnotateTo
entryRuleAnnotateTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotateToRule()); }
	iv_ruleAnnotateTo=ruleAnnotateTo
	{ $current=$iv_ruleAnnotateTo.current; }
	EOF;

// Rule AnnotateTo
ruleAnnotateTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_sname_0_1='attribute'
					{
						newLeafNode(lv_sname_0_1, grammarAccess.getAnnotateToAccess().getSnameAttributeKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAnnotateToRule());
						}
						setWithLastConsumed($current, "sname", lv_sname_0_1, null);
					}
					    |
					lv_sname_0_2='annotate'
					{
						newLeafNode(lv_sname_0_2, grammarAccess.getAnnotateToAccess().getSnameAnnotateKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAnnotateToRule());
						}
						setWithLastConsumed($current, "sname", lv_sname_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotateToAccess().getAnnotationTypeTypeParserRuleCall_1_0());
				}
				lv_annotationType_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotateToRule());
					}
					set(
						$current,
						"annotationType",
						lv_annotationType_1_0,
						"de.uni_hildesheim.sse.Ivml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotateToAccess().getAnnotationDeclVariableDeclarationPartParserRuleCall_2_0());
				}
				lv_annotationDecl_2_0=ruleVariableDeclarationPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotateToRule());
					}
					set(
						$current,
						"annotationDecl",
						lv_annotationDecl_2_0,
						"de.uni_hildesheim.sse.Ivml.VariableDeclarationPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='to'
		{
			newLeafNode(otherlv_3, grammarAccess.getAnnotateToAccess().getToKeyword_3());
		}
		(
			(
				(
					lv_names_4_0='.'
					{
						newLeafNode(lv_names_4_0, grammarAccess.getAnnotateToAccess().getNamesFullStopKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAnnotateToRule());
						}
						addWithLastConsumed($current, "names", lv_names_4_0, ".");
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAnnotateToAccess().getNamesIdentifierParserRuleCall_4_1_0_0());
						}
						lv_names_5_0=ruleIdentifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAnnotateToRule());
							}
							add(
								$current,
								"names",
								lv_names_5_0,
								"de.uni_hildesheim.sse.Ivml.Identifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getAnnotateToAccess().getCommaKeyword_4_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAnnotateToAccess().getNamesIdentifierParserRuleCall_4_1_1_1_0());
							}
							lv_names_7_0=ruleIdentifier
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAnnotateToRule());
								}
								add(
									$current,
									"names",
									lv_names_7_0,
									"de.uni_hildesheim.sse.Ivml.Identifier");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getAnnotateToAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleFreeze
entryRuleFreeze returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFreezeRule()); }
	iv_ruleFreeze=ruleFreeze
	{ $current=$iv_ruleFreeze.current; }
	EOF;

// Rule Freeze
ruleFreeze returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='freeze'
		{
			newLeafNode(otherlv_0, grammarAccess.getFreezeAccess().getFreezeKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFreezeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFreezeAccess().getNamesFreezeStatementParserRuleCall_2_0_0());
					}
					lv_names_2_0=ruleFreezeStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFreezeRule());
						}
						add(
							$current,
							"names",
							lv_names_2_0,
							"de.uni_hildesheim.sse.Ivml.FreezeStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getFreezeAccess().getSemicolonKeyword_2_1());
			}
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getFreezeAccess().getNamesFreezeStatementParserRuleCall_3_0());
				}
				lv_names_4_0=ruleFreezeStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFreezeRule());
					}
					add(
						$current,
						"names",
						lv_names_4_0,
						"de.uni_hildesheim.sse.Ivml.FreezeStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getFreezeAccess().getRightCurlyBracketKeyword_4());
		}
		(
			otherlv_6='but'
			{
				newLeafNode(otherlv_6, grammarAccess.getFreezeAccess().getButKeyword_5_0());
			}
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getFreezeAccess().getLeftParenthesisKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFreezeAccess().getIdIdentifierParserRuleCall_5_2_0());
					}
					lv_id_8_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFreezeRule());
						}
						set(
							$current,
							"id",
							lv_id_8_0,
							"de.uni_hildesheim.sse.Ivml.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9='|'
			{
				newLeafNode(otherlv_9, grammarAccess.getFreezeAccess().getVerticalLineKeyword_5_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFreezeAccess().getExLogicalExpressionParserRuleCall_5_4_0());
					}
					lv_ex_10_0=ruleLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFreezeRule());
						}
						set(
							$current,
							"ex",
							lv_ex_10_0,
							"de.uni_hildesheim.sse.Ivml.LogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getFreezeAccess().getRightParenthesisKeyword_5_5());
			}
		)?
		(
			otherlv_12=';'
			{
				newLeafNode(otherlv_12, grammarAccess.getFreezeAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleFreezeStatement
entryRuleFreezeStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFreezeStatementRule()); }
	iv_ruleFreezeStatement=ruleFreezeStatement
	{ $current=$iv_ruleFreezeStatement.current; }
	EOF;

// Rule FreezeStatement
ruleFreezeStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_dot_0_0='.'
				{
					newLeafNode(lv_dot_0_0, grammarAccess.getFreezeStatementAccess().getDotFullStopKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFreezeStatementRule());
					}
					setWithLastConsumed($current, "dot", lv_dot_0_0, ".");
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFreezeStatementAccess().getNameQualifiedNameParserRuleCall_1_0_0());
					}
					lv_name_1_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFreezeStatementRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"de.uni_hildesheim.sse.Ivml.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFreezeStatementAccess().getAccessAccessNameParserRuleCall_1_1_0());
					}
					lv_access_2_0=ruleAccessName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFreezeStatementRule());
						}
						set(
							$current,
							"access",
							lv_access_2_0,
							"de.uni_hildesheim.sse.Ivml.AccessName");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleEval
entryRuleEval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvalRule()); }
	iv_ruleEval=ruleEval
	{ $current=$iv_ruleEval.current; }
	EOF;

// Rule Eval
ruleEval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getEvalAccess().getEvalAction_0(),
					$current);
			}
		)
		otherlv_1='eval'
		{
			newLeafNode(otherlv_1, grammarAccess.getEvalAccess().getEvalKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEvalAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEvalAccess().getNestedEvalParserRuleCall_3_0());
				}
				lv_nested_3_0=ruleEval
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvalRule());
					}
					add(
						$current,
						"nested",
						lv_nested_3_0,
						"de.uni_hildesheim.sse.Ivml.Eval");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getEvalAccess().getStatementsExpressionStatementParserRuleCall_4_0());
				}
				lv_statements_4_0=ruleExpressionStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvalRule());
					}
					add(
						$current,
						"statements",
						lv_statements_4_0,
						"de.uni_hildesheim.sse.Ivml.ExpressionStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getEvalAccess().getRightCurlyBracketKeyword_5());
		}
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getEvalAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleInterfaceDeclaration
entryRuleInterfaceDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceDeclarationRule()); }
	iv_ruleInterfaceDeclaration=ruleInterfaceDeclaration
	{ $current=$iv_ruleInterfaceDeclaration.current; }
	EOF;

// Rule InterfaceDeclaration
ruleInterfaceDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='interface'
		{
			newLeafNode(otherlv_0, grammarAccess.getInterfaceDeclarationAccess().getInterfaceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getInterfaceDeclarationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getExportsExportParserRuleCall_3_0());
				}
				lv_exports_3_0=ruleExport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceDeclarationRule());
					}
					add(
						$current,
						"exports",
						lv_exports_3_0,
						"de.uni_hildesheim.sse.Ivml.Export");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getInterfaceDeclarationAccess().getRightCurlyBracketKeyword_4());
		}
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getInterfaceDeclarationAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	iv_ruleExport=ruleExport
	{ $current=$iv_ruleExport.current; }
	EOF;

// Rule Export
ruleExport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='export'
		{
			newLeafNode(otherlv_0, grammarAccess.getExportAccess().getExportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExportAccess().getNamesQualifiedNameParserRuleCall_1_0());
				}
				lv_names_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExportRule());
					}
					add(
						$current,
						"names",
						lv_names_1_0,
						"de.uni_hildesheim.sse.Ivml.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getExportAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExportAccess().getNamesQualifiedNameParserRuleCall_2_1_0());
					}
					lv_names_3_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExportRule());
						}
						add(
							$current,
							"names",
							lv_names_3_0,
							"de.uni_hildesheim.sse.Ivml.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getExportAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleImportStmt
entryRuleImportStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportStmtRule()); }
	iv_ruleImportStmt=ruleImportStmt
	{ $current=$iv_ruleImportStmt.current; }
	EOF;

// Rule ImportStmt
ruleImportStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='import'
			{
				newLeafNode(otherlv_0, grammarAccess.getImportStmtAccess().getImportKeyword_0_0());
			}
			    |
			(
				(
					lv_insert_1_0='insert'
					{
						newLeafNode(lv_insert_1_0, grammarAccess.getImportStmtAccess().getInsertInsertKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportStmtRule());
						}
						setWithLastConsumed($current, "insert", lv_insert_1_0, "insert");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getImportStmtAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_2_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportStmtRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='::'
			{
				newLeafNode(otherlv_3, grammarAccess.getImportStmtAccess().getColonColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImportStmtAccess().getInterfaceIdentifierParserRuleCall_2_1_0());
					}
					lv_interface_4_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportStmtRule());
						}
						set(
							$current,
							"interface",
							lv_interface_4_0,
							"de.uni_hildesheim.sse.Ivml.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				lv_wildcard_5_0='*'
				{
					newLeafNode(lv_wildcard_5_0, grammarAccess.getImportStmtAccess().getWildcardAsteriskKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportStmtRule());
					}
					setWithLastConsumed($current, "wildcard", lv_wildcard_5_0, "*");
				}
			)
		)?
		(
			otherlv_6='with'
			{
				newLeafNode(otherlv_6, grammarAccess.getImportStmtAccess().getWithKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImportStmtAccess().getRestrictionExpressionParserRuleCall_4_1_0());
					}
					lv_restriction_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportStmtRule());
						}
						set(
							$current,
							"restriction",
							lv_restriction_7_0,
							"de.uni_hildesheim.sse.Ivml.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getImportStmtAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleConflictStmt
entryRuleConflictStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConflictStmtRule()); }
	iv_ruleConflictStmt=ruleConflictStmt
	{ $current=$iv_ruleConflictStmt.current; }
	EOF;

// Rule ConflictStmt
ruleConflictStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='conflicts'
		{
			newLeafNode(otherlv_0, grammarAccess.getConflictStmtAccess().getConflictsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConflictStmtAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConflictStmtRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='with'
			{
				newLeafNode(otherlv_2, grammarAccess.getConflictStmtAccess().getWithKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConflictStmtAccess().getRestrictionExpressionParserRuleCall_2_1_0());
					}
					lv_restriction_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConflictStmtRule());
						}
						set(
							$current,
							"restriction",
							lv_restriction_3_0,
							"de.uni_hildesheim.sse.Ivml.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getConflictStmtAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleVersionStmt
entryRuleVersionStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVersionStmtRule()); }
	iv_ruleVersionStmt=ruleVersionStmt
	{ $current=$iv_ruleVersionStmt.current; }
	EOF;

// Rule VersionStmt
ruleVersionStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='version'
		{
			newLeafNode(otherlv_0, grammarAccess.getVersionStmtAccess().getVersionKeyword_0());
		}
		(
			(
				lv_version_1_0=RULE_VERSION
				{
					newLeafNode(lv_version_1_0, grammarAccess.getVersionStmtAccess().getVersionVERSIONTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVersionStmtRule());
					}
					setWithLastConsumed(
						$current,
						"version",
						lv_version_1_0,
						"de.uni_hildesheim.sse.Ivml.VERSION");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getVersionStmtAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleOpDefStatement
entryRuleOpDefStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpDefStatementRule()); }
	iv_ruleOpDefStatement=ruleOpDefStatement
	{ $current=$iv_ruleOpDefStatement.current; }
	EOF;

// Rule OpDefStatement
ruleOpDefStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOpDefStatementAccess().getAnnotationsAnnotationDeclarationsParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAnnotationDeclarations
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOpDefStatementRule());
					}
					set(
						$current,
						"annotations",
						lv_annotations_0_0,
						"de.uni_hildesheim.sse.Ivml.AnnotationDeclarations");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='def'
		{
			newLeafNode(otherlv_1, grammarAccess.getOpDefStatementAccess().getDefKeyword_1());
		}
		(
			(
				lv_static_2_0='static'
				{
					newLeafNode(lv_static_2_0, grammarAccess.getOpDefStatementAccess().getStaticStaticKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpDefStatementRule());
					}
					setWithLastConsumed($current, "static", lv_static_2_0, "static");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getOpDefStatementAccess().getResultTypeParserRuleCall_3_0());
				}
				lv_result_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOpDefStatementRule());
					}
					set(
						$current,
						"result",
						lv_result_3_0,
						"de.uni_hildesheim.sse.Ivml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOpDefStatementAccess().getIdIdentifierParserRuleCall_4_0());
				}
				lv_id_4_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOpDefStatementRule());
					}
					set(
						$current,
						"id",
						lv_id_4_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getOpDefStatementAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOpDefStatementAccess().getParamOpDefParameterListParserRuleCall_6_0());
				}
				lv_param_6_0=ruleOpDefParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOpDefStatementRule());
					}
					set(
						$current,
						"param",
						lv_param_6_0,
						"de.uni_hildesheim.sse.Ivml.OpDefParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getOpDefStatementAccess().getRightParenthesisKeyword_7());
		}
		otherlv_8='='
		{
			newLeafNode(otherlv_8, grammarAccess.getOpDefStatementAccess().getEqualsSignKeyword_8());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getOpDefStatementAccess().getImplExpressionParserRuleCall_9_0_0_0());
						}
						lv_impl_9_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOpDefStatementRule());
							}
							set(
								$current,
								"impl",
								lv_impl_9_0,
								"de.uni_hildesheim.sse.Ivml.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_10=';'
				{
					newLeafNode(otherlv_10, grammarAccess.getOpDefStatementAccess().getSemicolonKeyword_9_0_1());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getOpDefStatementAccess().getBlockBlockExpressionParserRuleCall_9_1_0());
					}
					lv_block_11_0=ruleBlockExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpDefStatementRule());
						}
						set(
							$current,
							"block",
							lv_block_11_0,
							"de.uni_hildesheim.sse.Ivml.BlockExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAnnotationDeclarations
entryRuleAnnotationDeclarations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationDeclarationsRule()); }
	iv_ruleAnnotationDeclarations=ruleAnnotationDeclarations
	{ $current=$iv_ruleAnnotationDeclarations.current; }
	EOF;

// Rule AnnotationDeclarations
ruleAnnotationDeclarations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getAnnotationDeclarationsAccess().getAnnotationDeclarationsAction_0(),
					$current);
			}
		)
		(
			otherlv_1='@'
			{
				newLeafNode(otherlv_1, grammarAccess.getAnnotationDeclarationsAccess().getCommercialAtKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAnnotationDeclarationsAccess().getIdIdentifierParserRuleCall_1_1_0());
					}
					lv_id_2_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnnotationDeclarationsRule());
						}
						add(
							$current,
							"id",
							lv_id_2_0,
							"de.uni_hildesheim.sse.Ivml.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpDefParameterList
entryRuleOpDefParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpDefParameterListRule()); }
	iv_ruleOpDefParameterList=ruleOpDefParameterList
	{ $current=$iv_ruleOpDefParameterList.current; }
	EOF;

// Rule OpDefParameterList
ruleOpDefParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getOpDefParameterListAccess().getOpDefParameterListAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOpDefParameterListAccess().getListOpDefParameterParserRuleCall_1_0_0());
					}
					lv_list_1_0=ruleOpDefParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpDefParameterListRule());
						}
						add(
							$current,
							"list",
							lv_list_1_0,
							"de.uni_hildesheim.sse.Ivml.OpDefParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getOpDefParameterListAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOpDefParameterListAccess().getListOpDefParameterParserRuleCall_1_1_1_0());
						}
						lv_list_3_0=ruleOpDefParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOpDefParameterListRule());
							}
							add(
								$current,
								"list",
								lv_list_3_0,
								"de.uni_hildesheim.sse.Ivml.OpDefParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleOpDefParameter
entryRuleOpDefParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpDefParameterRule()); }
	iv_ruleOpDefParameter=ruleOpDefParameter
	{ $current=$iv_ruleOpDefParameter.current; }
	EOF;

// Rule OpDefParameter
ruleOpDefParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOpDefParameterAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOpDefParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"de.uni_hildesheim.sse.Ivml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOpDefParameterAccess().getIdIdentifierParserRuleCall_1_0());
				}
				lv_id_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOpDefParameterRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getOpDefParameterAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOpDefParameterAccess().getValExpressionParserRuleCall_2_1_0());
					}
					lv_val_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpDefParameterRule());
						}
						set(
							$current,
							"val",
							lv_val_3_0,
							"de.uni_hildesheim.sse.Ivml.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	iv_ruleExpressionStatement=ruleExpressionStatement
	{ $current=$iv_ruleExpressionStatement.current; }
	EOF;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_0_0());
				}
				lv_expr_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
					}
					set(
						$current,
						"expr",
						lv_expr_0_0,
						"de.uni_hildesheim.sse.Ivml.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getLetLetExpressionParserRuleCall_0_0());
				}
				lv_let_0_0=ruleLetExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"let",
						lv_let_0_0,
						"de.uni_hildesheim.sse.Ivml.LetExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExprImplicationExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleImplicationExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"de.uni_hildesheim.sse.Ivml.ImplicationExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getContainerContainerInitializerParserRuleCall_2_0());
				}
				lv_container_2_0=ruleContainerInitializer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"container",
						lv_container_2_0,
						"de.uni_hildesheim.sse.Ivml.ContainerInitializer");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLetExpression
entryRuleLetExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetExpressionRule()); }
	iv_ruleLetExpression=ruleLetExpression
	{ $current=$iv_ruleLetExpression.current; }
	EOF;

// Rule LetExpression
ruleLetExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='let'
		{
			newLeafNode(otherlv_0, grammarAccess.getLetExpressionAccess().getLetKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpressionAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpressionRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"de.uni_hildesheim.sse.Ivml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpressionAccess().getNameIdentifierParserRuleCall_2_0());
				}
				lv_name_2_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpressionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getLetExpressionAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpressionAccess().getValueExprExpressionParserRuleCall_4_0());
				}
				lv_valueExpr_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpressionRule());
					}
					set(
						$current,
						"valueExpr",
						lv_valueExpr_4_0,
						"de.uni_hildesheim.sse.Ivml.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='in'
		{
			newLeafNode(otherlv_5, grammarAccess.getLetExpressionAccess().getInKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpressionAccess().getSubExprOptBlockExpressionParserRuleCall_6_0());
				}
				lv_subExpr_6_0=ruleOptBlockExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpressionRule());
					}
					set(
						$current,
						"subExpr",
						lv_subExpr_6_0,
						"de.uni_hildesheim.sse.Ivml.OptBlockExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOptBlockExpression
entryRuleOptBlockExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptBlockExpressionRule()); }
	iv_ruleOptBlockExpression=ruleOptBlockExpression
	{ $current=$iv_ruleOptBlockExpression.current; }
	EOF;

// Rule OptBlockExpression
ruleOptBlockExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOptBlockExpressionAccess().getExprExpressionParserRuleCall_0_0());
				}
				lv_expr_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOptBlockExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_0_0,
						"de.uni_hildesheim.sse.Ivml.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOptBlockExpressionAccess().getBlockBlockExpressionParserRuleCall_1_0());
				}
				lv_block_1_0=ruleBlockExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOptBlockExpressionRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"de.uni_hildesheim.sse.Ivml.BlockExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlockExpression
entryRuleBlockExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockExpressionRule()); }
	iv_ruleBlockExpression=ruleBlockExpression
	{ $current=$iv_ruleBlockExpression.current; }
	EOF;

// Rule BlockExpression
ruleBlockExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockExpressionAccess().getExprsExpressionStatementParserRuleCall_1_0());
				}
				lv_exprs_1_0=ruleExpressionStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockExpressionRule());
					}
					add(
						$current,
						"exprs",
						lv_exprs_1_0,
						"de.uni_hildesheim.sse.Ivml.ExpressionStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	iv_ruleAssignmentExpression=ruleAssignmentExpression
	{ $current=$iv_ruleAssignmentExpression.current; }
	EOF;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getLeftLogicalExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleLogicalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"de.uni_hildesheim.sse.Ivml.LogicalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRightAssignmentExpressionPartParserRuleCall_1_0());
				}
				lv_right_1_0=ruleAssignmentExpressionPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
					}
					add(
						$current,
						"right",
						lv_right_1_0,
						"de.uni_hildesheim.sse.Ivml.AssignmentExpressionPart");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAssignmentExpressionPart
entryRuleAssignmentExpressionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionPartRule()); }
	iv_ruleAssignmentExpressionPart=ruleAssignmentExpressionPart
	{ $current=$iv_ruleAssignmentExpressionPart.current; }
	EOF;

// Rule AssignmentExpressionPart
ruleAssignmentExpressionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentExpressionPartAccess().getOpAssignmentOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleAssignmentOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentExpressionPartRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"de.uni_hildesheim.sse.Ivml.AssignmentOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentExpressionPartAccess().getExLogicalExpressionParserRuleCall_1_0_0());
					}
					lv_ex_1_0=ruleLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentExpressionPartRule());
						}
						set(
							$current,
							"ex",
							lv_ex_1_0,
							"de.uni_hildesheim.sse.Ivml.LogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentExpressionPartAccess().getContainerContainerInitializerParserRuleCall_1_1_0());
					}
					lv_container_2_0=ruleContainerInitializer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentExpressionPartRule());
						}
						set(
							$current,
							"container",
							lv_container_2_0,
							"de.uni_hildesheim.sse.Ivml.ContainerInitializer");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAssignmentOperator
entryRuleAssignmentOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentOperatorRule()); }
	iv_ruleAssignmentOperator=ruleAssignmentOperator
	{ $current=$iv_ruleAssignmentOperator.current.getText(); }
	EOF;

// Rule AssignmentOperator
ruleAssignmentOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='='
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword());
	}
;

// Entry rule entryRuleImplicationExpression
entryRuleImplicationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplicationExpressionRule()); }
	iv_ruleImplicationExpression=ruleImplicationExpression
	{ $current=$iv_ruleImplicationExpression.current; }
	EOF;

// Rule ImplicationExpression
ruleImplicationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getImplicationExpressionAccess().getLeftAssignmentExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleAssignmentExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImplicationExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"de.uni_hildesheim.sse.Ivml.AssignmentExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getImplicationExpressionAccess().getRightImplicationExpressionPartParserRuleCall_1_0());
				}
				lv_right_1_0=ruleImplicationExpressionPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImplicationExpressionRule());
					}
					add(
						$current,
						"right",
						lv_right_1_0,
						"de.uni_hildesheim.sse.Ivml.ImplicationExpressionPart");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleImplicationExpressionPart
entryRuleImplicationExpressionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplicationExpressionPartRule()); }
	iv_ruleImplicationExpressionPart=ruleImplicationExpressionPart
	{ $current=$iv_ruleImplicationExpressionPart.current; }
	EOF;

// Rule ImplicationExpressionPart
ruleImplicationExpressionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getImplicationExpressionPartAccess().getOpImplicationOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleImplicationOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImplicationExpressionPartRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"de.uni_hildesheim.sse.Ivml.ImplicationOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getImplicationExpressionPartAccess().getExAssignmentExpressionParserRuleCall_1_0());
				}
				lv_ex_1_0=ruleAssignmentExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImplicationExpressionPartRule());
					}
					set(
						$current,
						"ex",
						lv_ex_1_0,
						"de.uni_hildesheim.sse.Ivml.AssignmentExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleImplicationOperator
entryRuleImplicationOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImplicationOperatorRule()); }
	iv_ruleImplicationOperator=ruleImplicationOperator
	{ $current=$iv_ruleImplicationOperator.current.getText(); }
	EOF;

// Rule ImplicationOperator
ruleImplicationOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='implies'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImplicationOperatorAccess().getImpliesKeyword_0());
		}
		    |
		kw='iff'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImplicationOperatorAccess().getIffKeyword_1());
		}
	)
;

// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	iv_ruleLogicalExpression=ruleLogicalExpression
	{ $current=$iv_ruleLogicalExpression.current; }
	EOF;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLeftEqualityExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleEqualityExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"de.uni_hildesheim.sse.Ivml.EqualityExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionPartParserRuleCall_1_0());
				}
				lv_right_1_0=ruleLogicalExpressionPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
					}
					add(
						$current,
						"right",
						lv_right_1_0,
						"de.uni_hildesheim.sse.Ivml.LogicalExpressionPart");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLogicalExpressionPart
entryRuleLogicalExpressionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalExpressionPartRule()); }
	iv_ruleLogicalExpressionPart=ruleLogicalExpressionPart
	{ $current=$iv_ruleLogicalExpressionPart.current; }
	EOF;

// Rule LogicalExpressionPart
ruleLogicalExpressionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicalExpressionPartAccess().getOpLogicalOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleLogicalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicalExpressionPartRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"de.uni_hildesheim.sse.Ivml.LogicalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicalExpressionPartAccess().getExEqualityExpressionParserRuleCall_1_0());
				}
				lv_ex_1_0=ruleEqualityExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicalExpressionPartRule());
					}
					set(
						$current,
						"ex",
						lv_ex_1_0,
						"de.uni_hildesheim.sse.Ivml.EqualityExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOperatorRule()); }
	iv_ruleLogicalOperator=ruleLogicalOperator
	{ $current=$iv_ruleLogicalOperator.current.getText(); }
	EOF;

// Rule LogicalOperator
ruleLogicalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getAndKeyword_0());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getOrKeyword_1());
		}
		    |
		kw='xor'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getXorKeyword_2());
		}
	)
;

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	iv_ruleEqualityExpression=ruleEqualityExpression
	{ $current=$iv_ruleEqualityExpression.current; }
	EOF;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualityExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleRelationalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"de.uni_hildesheim.sse.Ivml.RelationalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionPartParserRuleCall_1_0());
				}
				lv_right_1_0=ruleEqualityExpressionPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
					}
					set(
						$current,
						"right",
						lv_right_1_0,
						"de.uni_hildesheim.sse.Ivml.EqualityExpressionPart");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleEqualityExpressionPart
entryRuleEqualityExpressionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityExpressionPartRule()); }
	iv_ruleEqualityExpressionPart=ruleEqualityExpressionPart
	{ $current=$iv_ruleEqualityExpressionPart.current; }
	EOF;

// Rule EqualityExpressionPart
ruleEqualityExpressionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualityExpressionPartAccess().getOpEqualityOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleEqualityOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualityExpressionPartRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"de.uni_hildesheim.sse.Ivml.EqualityOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityExpressionPartAccess().getExRelationalExpressionParserRuleCall_1_0_0());
					}
					lv_ex_1_0=ruleRelationalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityExpressionPartRule());
						}
						set(
							$current,
							"ex",
							lv_ex_1_0,
							"de.uni_hildesheim.sse.Ivml.RelationalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityExpressionPartAccess().getContainerContainerInitializerParserRuleCall_1_1_0());
					}
					lv_container_2_0=ruleContainerInitializer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityExpressionPartRule());
						}
						set(
							$current,
							"container",
							lv_container_2_0,
							"de.uni_hildesheim.sse.Ivml.ContainerInitializer");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEqualityOperatorRule()); }
	iv_ruleEqualityOperator=ruleEqualityOperator
	{ $current=$iv_ruleEqualityOperator.current.getText(); }
	EOF;

// Rule EqualityOperator
ruleEqualityOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0());
		}
		    |
		kw='<>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getLessThanSignGreaterThanSignKeyword_1());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2());
		}
	)
;

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	iv_ruleRelationalExpression=ruleRelationalExpression
	{ $current=$iv_ruleRelationalExpression.current; }
	EOF;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionAccess().getLeftAdditiveExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleAdditiveExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"de.uni_hildesheim.sse.Ivml.AdditiveExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionPartParserRuleCall_1_0_0());
					}
					lv_right_1_0=ruleRelationalExpressionPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_1_0,
							"de.uni_hildesheim.sse.Ivml.RelationalExpressionPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRight2RelationalExpressionPartParserRuleCall_1_1_0());
					}
					lv_right2_2_0=ruleRelationalExpressionPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						set(
							$current,
							"right2",
							lv_right2_2_0,
							"de.uni_hildesheim.sse.Ivml.RelationalExpressionPart");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)?
	)
;

// Entry rule entryRuleRelationalExpressionPart
entryRuleRelationalExpressionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionPartRule()); }
	iv_ruleRelationalExpressionPart=ruleRelationalExpressionPart
	{ $current=$iv_ruleRelationalExpressionPart.current; }
	EOF;

// Rule RelationalExpressionPart
ruleRelationalExpressionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionPartAccess().getOpRelationalOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleRelationalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionPartRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"de.uni_hildesheim.sse.Ivml.RelationalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionPartAccess().getExAdditiveExpressionParserRuleCall_1_0());
				}
				lv_ex_1_0=ruleAdditiveExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionPartRule());
					}
					set(
						$current,
						"ex",
						lv_ex_1_0,
						"de.uni_hildesheim.sse.Ivml.AdditiveExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelationalOperatorRule()); }
	iv_ruleRelationalOperator=ruleRelationalOperator
	{ $current=$iv_ruleRelationalOperator.current.getText(); }
	EOF;

// Rule RelationalOperator
ruleRelationalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3());
		}
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getLeftMultiplicativeExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleMultiplicativeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"de.uni_hildesheim.sse.Ivml.MultiplicativeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionPartParserRuleCall_1_0());
				}
				lv_right_1_0=ruleAdditiveExpressionPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
					}
					add(
						$current,
						"right",
						lv_right_1_0,
						"de.uni_hildesheim.sse.Ivml.AdditiveExpressionPart");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAdditiveExpressionPart
entryRuleAdditiveExpressionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionPartRule()); }
	iv_ruleAdditiveExpressionPart=ruleAdditiveExpressionPart
	{ $current=$iv_ruleAdditiveExpressionPart.current; }
	EOF;

// Rule AdditiveExpressionPart
ruleAdditiveExpressionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionPartAccess().getOpAdditiveOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleAdditiveOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionPartRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"de.uni_hildesheim.sse.Ivml.AdditiveOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionPartAccess().getExMultiplicativeExpressionParserRuleCall_1_0());
				}
				lv_ex_1_0=ruleMultiplicativeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionPartRule());
					}
					set(
						$current,
						"ex",
						lv_ex_1_0,
						"de.uni_hildesheim.sse.Ivml.MultiplicativeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveOperatorRule()); }
	iv_ruleAdditiveOperator=ruleAdditiveOperator
	{ $current=$iv_ruleAdditiveOperator.current.getText(); }
	EOF;

// Rule AdditiveOperator
ruleAdditiveOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"de.uni_hildesheim.sse.Ivml.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionPartParserRuleCall_1_0());
				}
				lv_right_1_0=ruleMultiplicativeExpressionPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
					}
					set(
						$current,
						"right",
						lv_right_1_0,
						"de.uni_hildesheim.sse.Ivml.MultiplicativeExpressionPart");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMultiplicativeExpressionPart
entryRuleMultiplicativeExpressionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionPartRule()); }
	iv_ruleMultiplicativeExpressionPart=ruleMultiplicativeExpressionPart
	{ $current=$iv_ruleMultiplicativeExpressionPart.current; }
	EOF;

// Rule MultiplicativeExpressionPart
ruleMultiplicativeExpressionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionPartAccess().getOpMultiplicativeOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleMultiplicativeOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionPartRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"de.uni_hildesheim.sse.Ivml.MultiplicativeOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionPartAccess().getExprUnaryExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionPartRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"de.uni_hildesheim.sse.Ivml.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeOperatorRule()); }
	iv_ruleMultiplicativeOperator=ruleMultiplicativeOperator
	{ $current=$iv_ruleMultiplicativeOperator.current.getText(); }
	EOF;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1());
		}
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleUnaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"de.uni_hildesheim.sse.Ivml.UnaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=rulePostfixExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"de.uni_hildesheim.sse.Ivml.PostfixExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); }
	iv_ruleUnaryOperator=ruleUnaryOperator
	{ $current=$iv_ruleUnaryOperator.current.getText(); }
	EOF;

// Rule UnaryOperator
ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='not'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getNotKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	iv_rulePostfixExpression=rulePostfixExpression
	{ $current=$iv_rulePostfixExpression.current; }
	EOF;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpressionAccess().getCallFeatureCallParserRuleCall_0_0_0());
					}
					lv_call_0_0=ruleFeatureCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
						}
						set(
							$current,
							"call",
							lv_call_0_0,
							"de.uni_hildesheim.sse.Ivml.FeatureCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpressionAccess().getFCallsCallParserRuleCall_0_1_0());
					}
					lv_fCalls_1_0=ruleCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
						}
						add(
							$current,
							"fCalls",
							lv_fCalls_1_0,
							"de.uni_hildesheim.sse.Ivml.Call");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpressionAccess().getAccessExpressionAccessParserRuleCall_0_2_0());
					}
					lv_access_2_0=ruleExpressionAccess
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
						}
						set(
							$current,
							"access",
							lv_access_2_0,
							"de.uni_hildesheim.sse.Ivml.ExpressionAccess");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftPrimaryExpressionParserRuleCall_1_0());
				}
				lv_left_3_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_3_0,
						"de.uni_hildesheim.sse.Ivml.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	iv_ruleCall=ruleCall
	{ $current=$iv_ruleCall.current; }
	EOF;

// Rule Call
ruleCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='.'
			{
				newLeafNode(otherlv_0, grammarAccess.getCallAccess().getFullStopKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCallAccess().getCallFeatureCallParserRuleCall_0_1_0());
					}
					lv_call_1_0=ruleFeatureCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCallRule());
						}
						set(
							$current,
							"call",
							lv_call_1_0,
							"de.uni_hildesheim.sse.Ivml.FeatureCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='->'
			{
				newLeafNode(otherlv_2, grammarAccess.getCallAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCallAccess().getContainerOpContainerOpParserRuleCall_1_1_0());
					}
					lv_containerOp_3_0=ruleContainerOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCallRule());
						}
						set(
							$current,
							"containerOp",
							lv_containerOp_3_0,
							"de.uni_hildesheim.sse.Ivml.ContainerOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_4='['
			{
				newLeafNode(otherlv_4, grammarAccess.getCallAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCallAccess().getArrayExExpressionParserRuleCall_2_1_0());
					}
					lv_arrayEx_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCallRule());
						}
						set(
							$current,
							"arrayEx",
							lv_arrayEx_5_0,
							"de.uni_hildesheim.sse.Ivml.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=']'
			{
				newLeafNode(otherlv_6, grammarAccess.getCallAccess().getRightSquareBracketKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureCallRule()); }
	iv_ruleFeatureCall=ruleFeatureCall
	{ $current=$iv_ruleFeatureCall.current; }
	EOF;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureCallAccess().getNameIdentifierParserRuleCall_0_0_0());
					}
					lv_name_0_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
						}
						set(
							$current,
							"name",
							lv_name_0_0,
							"de.uni_hildesheim.sse.Ivml.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureCallAccess().getNameRelationalOperatorParserRuleCall_0_1_0());
					}
					lv_name_1_0=ruleRelationalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"de.uni_hildesheim.sse.Ivml.RelationalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureCallAccess().getNameAdditiveOperatorParserRuleCall_0_2_0());
					}
					lv_name_2_0=ruleAdditiveOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"de.uni_hildesheim.sse.Ivml.AdditiveOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureCallAccess().getNameMultiplicativeOperatorParserRuleCall_0_3_0());
					}
					lv_name_3_0=ruleMultiplicativeOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
						}
						set(
							$current,
							"name",
							lv_name_3_0,
							"de.uni_hildesheim.sse.Ivml.MultiplicativeOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureCallAccess().getNameEqualityOperatorParserRuleCall_0_4_0());
					}
					lv_name_4_0=ruleEqualityOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
						}
						set(
							$current,
							"name",
							lv_name_4_0,
							"de.uni_hildesheim.sse.Ivml.EqualityOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureCallAccess().getNameImplicationOperatorParserRuleCall_0_5_0());
					}
					lv_name_5_0=ruleImplicationOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
						}
						set(
							$current,
							"name",
							lv_name_5_0,
							"de.uni_hildesheim.sse.Ivml.ImplicationOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureCallAccess().getNameLogicalOperatorParserRuleCall_0_6_0());
					}
					lv_name_6_0=ruleLogicalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
						}
						set(
							$current,
							"name",
							lv_name_6_0,
							"de.uni_hildesheim.sse.Ivml.LogicalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_name_7_0='not'
					{
						newLeafNode(lv_name_7_0, grammarAccess.getFeatureCallAccess().getNameNotKeyword_0_7_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFeatureCallRule());
						}
						setWithLastConsumed($current, "name", lv_name_7_0, "not");
					}
				)
			)
		)
		otherlv_8='('
		{
			newLeafNode(otherlv_8, grammarAccess.getFeatureCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			{
				/* */
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFeatureCallRule());
				}
				newCompositeNode(grammarAccess.getFeatureCallAccess().getActualArgumentListParserRuleCall_2());
			}
			this_ActualArgumentList_9=ruleActualArgumentList[$current]
			{
				$current = $this_ActualArgumentList_9.current;
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_10=')'
		{
			newLeafNode(otherlv_10, grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleContainerOp
entryRuleContainerOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerOpRule()); }
	iv_ruleContainerOp=ruleContainerOp
	{ $current=$iv_ruleContainerOp.current; }
	EOF;

// Rule ContainerOp
ruleContainerOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerOpAccess().getNameIdentifierParserRuleCall_0_0());
				}
				lv_name_0_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerOpRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getContainerOpAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerOpAccess().getDeclDeclaratorParserRuleCall_2_0());
				}
				lv_decl_2_0=ruleDeclarator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerOpRule());
					}
					set(
						$current,
						"decl",
						lv_decl_2_0,
						"de.uni_hildesheim.sse.Ivml.Declarator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			{
				/* */
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getContainerOpRule());
				}
				newCompositeNode(grammarAccess.getContainerOpAccess().getActualArgumentListParserRuleCall_3());
			}
			this_ActualArgumentList_3=ruleActualArgumentList[$current]
			{
				$current = $this_ActualArgumentList_3.current;
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getContainerOpAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleDeclarator
entryRuleDeclarator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaratorRule()); }
	iv_ruleDeclarator=ruleDeclarator
	{ $current=$iv_ruleDeclarator.current; }
	EOF;

// Rule Declarator
ruleDeclarator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_0_0());
				}
				lv_decl_0_0=ruleDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaratorRule());
					}
					add(
						$current,
						"decl",
						lv_decl_0_0,
						"de.uni_hildesheim.sse.Ivml.Declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getDeclaratorAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_1_1_0());
					}
					lv_decl_2_0=ruleDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclaratorRule());
						}
						add(
							$current,
							"decl",
							lv_decl_2_0,
							"de.uni_hildesheim.sse.Ivml.Declaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3='|'
		{
			newLeafNode(otherlv_3, grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_2());
		}
	)
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"de.uni_hildesheim.sse.Ivml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getIdIdentifierParserRuleCall_1_0());
				}
				lv_id_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					add(
						$current,
						"id",
						lv_id_1_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getDeclarationAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclarationAccess().getIdIdentifierParserRuleCall_2_1_0());
					}
					lv_id_3_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclarationRule());
						}
						add(
							$current,
							"id",
							lv_id_3_0,
							"de.uni_hildesheim.sse.Ivml.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getDeclarationAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclarationAccess().getInitExpressionParserRuleCall_3_1_0());
					}
					lv_init_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclarationRule());
						}
						set(
							$current,
							"init",
							lv_init_5_0,
							"de.uni_hildesheim.sse.Ivml.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;


// Rule ActualArgumentList
ruleActualArgumentList[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActualArgumentListAccess().getArgsActualArgumentParserRuleCall_0_0());
				}
				lv_args_0_0=ruleActualArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActualArgumentListRule());
					}
					add(
						$current,
						"args",
						lv_args_0_0,
						"de.uni_hildesheim.sse.Ivml.ActualArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getActualArgumentListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActualArgumentListAccess().getArgsActualArgumentParserRuleCall_1_1_0());
					}
					lv_args_2_0=ruleActualArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActualArgumentListRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"de.uni_hildesheim.sse.Ivml.ActualArgument");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleActualArgument
entryRuleActualArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActualArgumentRule()); }
	iv_ruleActualArgument=ruleActualArgument
	{ $current=$iv_ruleActualArgument.current; }
	EOF;

// Rule ActualArgument
ruleActualArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getActualArgumentAccess().getNameIdentifierParserRuleCall_0_0_0());
					}
					lv_name_0_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActualArgumentRule());
						}
						set(
							$current,
							"name",
							lv_name_0_0,
							"de.uni_hildesheim.sse.Ivml.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getActualArgumentAccess().getEqualsSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getActualArgumentAccess().getArgExpressionParserRuleCall_1_0());
				}
				lv_arg_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActualArgumentRule());
					}
					set(
						$current,
						"arg",
						lv_arg_2_0,
						"de.uni_hildesheim.sse.Ivml.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionAccess
entryRuleExpressionAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionAccessRule()); }
	iv_ruleExpressionAccess=ruleExpressionAccess
	{ $current=$iv_ruleExpressionAccess.current; }
	EOF;

// Rule ExpressionAccess
ruleExpressionAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionAccessAccess().getFullStopKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccessAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionAccessRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.uni_hildesheim.sse.Ivml.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccessAccess().getCallsCallParserRuleCall_2_0());
				}
				lv_calls_2_0=ruleCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionAccessRule());
					}
					add(
						$current,
						"calls",
						lv_calls_2_0,
						"de.uni_hildesheim.sse.Ivml.Call");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccessAccess().getAccessExpressionAccessParserRuleCall_3_0());
				}
				lv_access_3_0=ruleExpressionAccess
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionAccessRule());
					}
					set(
						$current,
						"access",
						lv_access_3_0,
						"de.uni_hildesheim.sse.Ivml.ExpressionAccess");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLitLiteralParserRuleCall_0_0_0());
					}
					lv_lit_0_0=ruleLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"lit",
							lv_lit_0_0,
							"de.uni_hildesheim.sse.Ivml.Literal");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_1='('
				{
					newLeafNode(otherlv_1, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExExpressionParserRuleCall_0_1_1_0());
						}
						lv_ex_2_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
							}
							set(
								$current,
								"ex",
								lv_ex_2_0,
								"de.uni_hildesheim.sse.Ivml.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=')'
				{
					newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_1_2());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIfExIfExpressionParserRuleCall_0_2_0());
					}
					lv_ifEx_4_0=ruleIfExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"ifEx",
							lv_ifEx_4_0,
							"de.uni_hildesheim.sse.Ivml.IfExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_5='refBy'
				{
					newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getRefByKeyword_0_3_0());
				}
				otherlv_6='('
				{
					newLeafNode(otherlv_6, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getRefExExpressionParserRuleCall_0_3_2_0());
						}
						lv_refEx_7_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
							}
							set(
								$current,
								"refEx",
								lv_refEx_7_0,
								"de.uni_hildesheim.sse.Ivml.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_8=')'
				{
					newLeafNode(otherlv_8, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_3_3());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCallsCallParserRuleCall_1_0());
				}
				lv_calls_9_0=ruleCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
					}
					add(
						$current,
						"calls",
						lv_calls_9_0,
						"de.uni_hildesheim.sse.Ivml.Call");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAccessExpressionAccessParserRuleCall_2_0());
				}
				lv_access_10_0=ruleExpressionAccess
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
					}
					set(
						$current,
						"access",
						lv_access_10_0,
						"de.uni_hildesheim.sse.Ivml.ExpressionAccess");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleContainerInitializer
entryRuleContainerInitializer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerInitializerRule()); }
	iv_ruleContainerInitializer=ruleContainerInitializer
	{ $current=$iv_ruleContainerInitializer.current; }
	EOF;

// Rule ContainerInitializer
ruleContainerInitializer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getContainerInitializerAccess().getContainerInitializerAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerInitializerAccess().getTypeQualifiedNameParserRuleCall_1_0());
				}
				lv_type_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerInitializerRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"de.uni_hildesheim.sse.Ivml.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getContainerInitializerAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerInitializerAccess().getInitExpressionListOrRangeParserRuleCall_3_0());
				}
				lv_init_3_0=ruleExpressionListOrRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerInitializerRule());
					}
					set(
						$current,
						"init",
						lv_init_3_0,
						"de.uni_hildesheim.sse.Ivml.ExpressionListOrRange");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getContainerInitializerAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleExpressionListOrRange
entryRuleExpressionListOrRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListOrRangeRule()); }
	iv_ruleExpressionListOrRange=ruleExpressionListOrRange
	{ $current=$iv_ruleExpressionListOrRange.current; }
	EOF;

// Rule ExpressionListOrRange
ruleExpressionListOrRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionListOrRangeAccess().getListExpressionListEntryParserRuleCall_0_0());
				}
				lv_list_0_0=ruleExpressionListEntry
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionListOrRangeRule());
					}
					add(
						$current,
						"list",
						lv_list_0_0,
						"de.uni_hildesheim.sse.Ivml.ExpressionListEntry");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionListOrRangeAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionListOrRangeAccess().getListExpressionListEntryParserRuleCall_1_1_0());
					}
					lv_list_2_0=ruleExpressionListEntry
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionListOrRangeRule());
						}
						add(
							$current,
							"list",
							lv_list_2_0,
							"de.uni_hildesheim.sse.Ivml.ExpressionListEntry");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getExpressionListOrRangeAccess().getCommaKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleExpressionListEntry
entryRuleExpressionListEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListEntryRule()); }
	iv_ruleExpressionListEntry=ruleExpressionListEntry
	{ $current=$iv_ruleExpressionListEntry.current; }
	EOF;

// Rule ExpressionListEntry
ruleExpressionListEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionListEntryAccess().getNameIdentifierParserRuleCall_0_0_0());
					}
					lv_name_0_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionListEntryRule());
						}
						set(
							$current,
							"name",
							lv_name_0_0,
							"de.uni_hildesheim.sse.Ivml.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1='.'
				{
					newLeafNode(otherlv_1, grammarAccess.getExpressionListEntryAccess().getFullStopKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionListEntryAccess().getAttribIdentifierParserRuleCall_0_1_1_0());
						}
						lv_attrib_2_0=ruleIdentifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionListEntryRule());
							}
							set(
								$current,
								"attrib",
								lv_attrib_2_0,
								"de.uni_hildesheim.sse.Ivml.Identifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getExpressionListEntryAccess().getEqualsSignKeyword_0_2());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionListEntryAccess().getValueImplicationExpressionParserRuleCall_1_0_0());
					}
					lv_value_4_0=ruleImplicationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionListEntryRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"de.uni_hildesheim.sse.Ivml.ImplicationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionListEntryAccess().getContainerContainerInitializerParserRuleCall_1_1_0());
					}
					lv_container_5_0=ruleContainerInitializer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionListEntryRule());
						}
						set(
							$current,
							"container",
							lv_container_5_0,
							"de.uni_hildesheim.sse.Ivml.ContainerInitializer");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLiteralAccess().getValValueParserRuleCall_0());
			}
			lv_val_0_0=ruleValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLiteralRule());
				}
				set(
					$current,
					"val",
					lv_val_0_0,
					"de.uni_hildesheim.sse.Ivml.Value");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	iv_ruleIfExpression=ruleIfExpression
	{ $current=$iv_ruleIfExpression.current; }
	EOF;

// Rule IfExpression
ruleIfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfExpressionAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getIfExExpressionParserRuleCall_1_0());
				}
				lv_ifEx_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"ifEx",
						lv_ifEx_1_0,
						"de.uni_hildesheim.sse.Ivml.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getThenExOptBlockExpressionParserRuleCall_3_0());
				}
				lv_thenEx_3_0=ruleOptBlockExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"thenEx",
						lv_thenEx_3_0,
						"de.uni_hildesheim.sse.Ivml.OptBlockExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='else'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getElseKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getElseExOptBlockExpressionParserRuleCall_5_0());
				}
				lv_elseEx_5_0=ruleOptBlockExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"elseEx",
						lv_elseEx_5_0,
						"de.uni_hildesheim.sse.Ivml.OptBlockExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='endif'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfExpressionAccess().getEndifKeyword_6());
		}
	)
;

// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleIdentifier=ruleIdentifier
	{ $current=$iv_ruleIdentifier.current.getText(); }
	EOF;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_VERSION_1=RULE_VERSION
		{
			$current.merge(this_VERSION_1);
		}
		{
			newLeafNode(this_VERSION_1, grammarAccess.getIdentifierAccess().getVERSIONTerminalRuleCall_1());
		}
		    |
		this_EXPONENT_2=RULE_EXPONENT
		{
			$current.merge(this_EXPONENT_2);
		}
		{
			newLeafNode(this_EXPONENT_2, grammarAccess.getIdentifierAccess().getEXPONENTTerminalRuleCall_2());
		}
		    |
		kw='version'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIdentifierAccess().getVersionKeyword_3());
		}
	)
;

RULE_VERSION : 'v' ('0'..'9')+ ('.' ('0'..'9')+)*;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NUMBER : '-'? (('0'..'9')+ ('.' ('0'..'9')* RULE_EXPONENT?)?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT);

RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
