/*
 * generated by Xtext 2.34.0
 */
package de.uni_hildesheim.sse.formatting2;

import de.uni_hildesheim.sse.ivml.ConflictStmt;
import de.uni_hildesheim.sse.ivml.ImportStmt;
import de.uni_hildesheim.sse.ivml.InterfaceDeclaration;
import de.uni_hildesheim.sse.ivml.Project;
import de.uni_hildesheim.sse.ivml.VariabilityUnit;
import org.eclipse.xtext.formatting2.AbstractJavaFormatter;
import org.eclipse.xtext.formatting2.IFormattableDocument;

public class IvmlFormatter extends AbstractJavaFormatter {

    protected void format(VariabilityUnit variabilityUnit, IFormattableDocument doc) {
        // TODO: format HiddenRegions around keywords, attributes, cross
        // references, etc.
        for (Project project : variabilityUnit.getProjects()) {
            doc.format(project);
        }
    }

    protected void format(Project project, IFormattableDocument doc) {
        // TODO: format HiddenRegions around keywords, attributes, cross
        // references, etc.
        doc.format(project.getVersion());
        for (ImportStmt importStmt : project.getImports()) {
            doc.format(importStmt);
        }
        for (ConflictStmt conflictStmt : project.getConflicts()) {
            doc.format(conflictStmt);
        }
        for (InterfaceDeclaration interfaceDeclaration : project.getInterfaces()) {
            doc.format(interfaceDeclaration);
        }
        doc.format(project.getContents());
    }

    // TODO: implement for ProjectContents, Typedef, TypedefEnum,
    // TypedefEnumLiteral, TypedefCompound, AttrAssignment, AttrAssignmentPart,
    // TypedefMapping, TypedefConstraint, VariableDeclaration,
    // VariableDeclarationPart, Type, Value, DerivedType, AnnotateTo, Freeze,
    // FreezeStatement, Eval, InterfaceDeclaration, Export, ImportStmt,
    // ConflictStmt, OpDefStatement, OpDefParameterList, OpDefParameter,
    // ExpressionStatement, Expression, LetExpression, OptBlockExpression,
    // BlockExpression, AssignmentExpression, AssignmentExpressionPart,
    // ImplicationExpression, ImplicationExpressionPart, LogicalExpression,
    // LogicalExpressionPart, EqualityExpression, EqualityExpressionPart,
    // RelationalExpression, RelationalExpressionPart, AdditiveExpression,
    // AdditiveExpressionPart, MultiplicativeExpression,
    // MultiplicativeExpressionPart, UnaryExpression, PostfixExpression, Call,
    // ContainerOp, Declarator, Declaration, ActualArgumentList, ActualArgument,
    // ExpressionAccess, PrimaryExpression, ContainerInitializer,
    // ExpressionListOrRange, ExpressionListEntry, Literal, IfExpression
}
