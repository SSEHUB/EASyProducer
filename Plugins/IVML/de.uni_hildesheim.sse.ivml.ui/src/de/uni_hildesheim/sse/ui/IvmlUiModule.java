/*
 * generated by Xtext
 */
package de.uni_hildesheim.sse.ui;

import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.builder.IXtextBuilderParticipant;
import org.eclipse.xtext.ui.editor.DirtyStateEditorSupport.IConcurrentEditingCallback;
import org.eclipse.xtext.ui.editor.DirtyStateEditorSupport.IDirtyStateEditorSupportClient;
import org.eclipse.xtext.ui.editor.DirtyStateEditorSupport.InteractiveConcurrentEditingQuestion;
import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper;
import org.eclipse.xtext.ui.resource.IResourceUIServiceProvider;

import de.uni_hildesheim.sse.ui.hyperlinking.IvmlHyperlinkHelper;
import net.ssehub.easy.dslCore.ui.BuilderParticipant;
import net.ssehub.easy.dslCore.ui.EasyUiResourceServiceProvider;

//import com.google.inject.name.Names;

/**
 * Use this class to register components to be used within the IDE.
 */
public class IvmlUiModule extends de.uni_hildesheim.sse.ui.AbstractIvmlUiModule {
	public IvmlUiModule(AbstractUIPlugin plugin) {
		super(plugin);
	}
	
	/**
	 * Registers the dirty state editor to be notified about storing the model.
	 * 
	 * @param binder the model binder
	 */
	public void configureMyDSLXtextEditorCallback(com.google.inject.Binder binder) {
		// suppress concurrent editing warnings
		binder.bind(IConcurrentEditingCallback.class).to(MyConcurrentEditingCallback.class);
		// validate on startup http://www.eclipse.org/forums/index.php/t/268257/
		//binder.bind(IXtextEditorCallback.class).annotatedWith(Names.named("WHOCARES")).to(ValidatingEditorCallback.class);
		// TODO leads sometimes to completely failing validation
	}
	
	private static class MyConcurrentEditingCallback extends InteractiveConcurrentEditingQuestion {

		@Override
		public boolean isConcurrentEditingIgnored(IDirtyStateEditorSupportClient client) {
			// currently... ignore this at all
			return true;
		}
		
	}
	
	/**
	 * Binds the custom <code>IvmlHyperlinkHelper</code> for the creation of the <code>com.google.inject.Bindery</code>.
	 * 
	 * This enables the creation of <code>IvmlHyperlinks</code> for IVML-elements in an IVML-file and the custom
	 * reaction on selecting these Hyperlinks (or pressing F3), e.g. showing the element's declaration.
	 */
	public Class<? extends IHyperlinkHelper> bindIHyperlinkHelper() {
		return IvmlHyperlinkHelper.class;
	}

	@Override
	public Class<? extends IXtextBuilderParticipant> bindIXtextBuilderParticipant() {
	    return BuilderParticipant.class;
	}
	
	/**
	 * Binds a resource service provider.
	 * 
	 * @return the resource service provider
	 */
	public Class<? extends IResourceUIServiceProvider> bindIResourceUIServiceProvider() {
	    return EasyUiResourceServiceProvider.class;
	}
	
}
