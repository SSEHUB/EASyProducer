project Basics {

	// common type definitions

	typedef NaturalNumber Integer with (NaturalNumber >= 0 and isDefined(NaturalNumber));
	typedef PositiveInteger Integer with (PositiveInteger > 0 and isDefined(PositiveInteger));
	typedef OptionalNaturalNumber Integer with (OptionalNaturalNumber >= 0);
	typedef OptionalPositiveInteger Integer with (OptionalPositiveInteger > 0);
	typedef NonEmptyString String with (size(NonEmptyString) > 0 and isDefined(NonEmptyString));
	typedef PortInteger Integer with (PortInteger > 0 and PortInteger < 65536 and isDefined(PortInteger));
	typedef NonNegativeReal Real with (NonNegativeReal >= 0 and isDefined(NonNegativeReal));
	typedef OptionalNonNegativeReal Real with (OptionalNonNegativeReal >= 0);
	typedef ArtifactString String with (size(ArtifactString) > 0 and matches(ArtifactString, ".+:.+:.+") and isDefined(ArtifactString)); 
	typedef OptionalArtifactString String with (size(OptionalArtifactString) > 0 implies matches(OptionalArtifactString, ".+:.+:.+")); 
	typedef OptionalClassString String;
	typedef ClassString OptionalClassString with (size(ClassString) > 0 and isDefined(ClassString));
	typedef Description String;
	typedef OptionalUrlString String with (size(OptionalUrlString) > 0);
	typedef UrlString OptionalUrlString with (isDefined(UrlString));
	typedef MemorySize PositiveInteger;
	typedef Frequency PositiveInteger;
	typedef OptionalMemorySize OptionalPositiveInteger;
	typedef OptionalFrequency OptionalPositiveInteger;
	typedef Percentage Real with (Percentage >=0 and Percentage <=1);
	enum BindingTime {compile = 0, startup = 1, runtimeMon = 2, runtimeEnact = 3};
	annotate BindingTime bindingTime = BindingTime.compile to Basics;

	compound FieldType {
		NonEmptyString name;
		ClassString class;
		OptionalArtifactString artifact; // optional
		OptionalClassString serializer; // optional
		OptionalArtifactString serializerArtifact; // optional
		Boolean isTimestamp = false;
		// currently unclear: own compounds for inherited types, generic types
	}

	setOf(refTo(FieldType)) types = {};
	Constraint typeNamesUnique = size(types->collect(t|t.name)) == size(types);

	compound Field { // in order to fit the data structure in the Storm
		NonEmptyString name;
		refTo(FieldType) type;
		Boolean keyPart = false; //TODO: need to add constraint if the keypart is used in the instantiation
		isDefined(type);
	}
	typedef Fields sequenceOf(Field) with (Fields->collect(f|f.name).hasDuplicates() == false/* and isDefined(Fields)*/);

	// for the moment we assume that we will not have nested Tuples
	compound Tuple { // this conception is based on how the Storm describes the stream
		NonEmptyString name;
		Fields fields;
		size(fields) > 0; 
	} 
	typedef Tuples sequenceOf(Tuple) /*with (isDefined(Tuples))*/;
	
	
	// parameters are different than fields as they may have a configured default value for startup
	
	compound Parameter {
		NonEmptyString name;
	}
	typedef Parameters sequenceOf(Parameter) with (Parameters->collect(p|p.name).size() == Parameters.size()/*  and isDefined(Parameters)*/);

	compound IntegerParameter refines Parameter {
		Integer defaultValue;
		assign(bindingTime = BindingTime.runtimeEnact) to {
			Integer value; // this may get a "default/startup" value from the configuration
		}
		//Constraint defaultValueCheck = isDefined(defaultValue); // disabled - model does not comply with
	}
	
	compound StringParameter refines Parameter {
		String defaultValue;
		assign(bindingTime = BindingTime.runtimeEnact) to {
			String value; // this may get a "default/startup" value from the configuration
		}
		//Constraint defaultValueCheck = isDefined(defaultValue); // disabled - model does not comply with
	}

	compound RealParameter refines Parameter {
		Real defaultValue;
		assign(bindingTime = BindingTime.runtimeEnact) to {
			Real value; // this may get a "default/startup" value from the configuration
		}
		//Constraint defaultValueCheck = isDefined(defaultValue); // disabled - model does not comply with
	}

	compound BooleanParameter refines Parameter {
		Boolean defaultValue;
		assign(bindingTime = BindingTime.runtimeEnact) to {
			Boolean value; // this may get a "default/startup" value from the configuration
		}
		//Constraint defaultValueCheck = isDefined(defaultValue); // disabled - model does not comply with
	}
	
	compound LongParameter refines Parameter {
		Real defaultValue;
		assign(bindingTime = BindingTime.runtimeEnact) to {
			Real value; // this may get a "default/startup" value from the configuration
		}
		//Constraint defaultValueCheck = isDefined(defaultValue); // disabled - model does not comply with
	}

}