project FamiliesCfg {

	import ReconfigurableHardware;
	import Families;
	import AlgorithmsCfg;
	import BasicsCfg;
	Family fPreprocessor;
	Family fCorrelationFinancial;
	Family fSentimentAnalysis;
	Family fCorrelationTwitter;
	Family fMismatchedFamily;
	Family randomFamily;
	Family switchFamily;
	Family fExpertSearch;
	Family fFinancialNetworkExtraction;
	Family fTwitterCrawling;
	Family fTwitterEventDetection;
	Family fTwitterEventPrediction;
	Family fTwitterStreamFiltering;
	Family FamilyVar_14;
	Family FamilyVar_15;
	Family FamilyVar_16;
	Family FamilyVar_17;
	Family FamilyVar_18;
	Family FamilyVar_19;
	Family FamilyVar_20;
	Family FamilyVar_21;
	Family FamilyVar_22;
	Family FamilyVar_23;
	Family FamilyVar_24;
	Family fMapper;
	Family fHayashiYoshida;
	Family FamilyVar_25;
	Family FamilyVar_26;
	Family FamilyVar_27;
	Family FamilyVar_28;
	Family FamilyVar_29;
	Family FamilyVar_30;
    Family FamilyVar_31;
    Family FamilyVar_32;
    Family FamilyVar_33;
    Family FamilyVar_34;
    Family FamilyVar_35;
    Family FamilyVar_36;
	families = {
		refBy(fPreprocessor), refBy(fCorrelationFinancial), refBy(fSentimentAnalysis), refBy(fCorrelationTwitter), refBy(fMismatchedFamily), refBy(randomFamily), refBy(switchFamily), refBy(fExpertSearch), refBy(fFinancialNetworkExtraction), refBy(fTwitterCrawling), refBy(fTwitterEventDetection), refBy(fTwitterEventPrediction), refBy(fTwitterStreamFiltering), refBy(FamilyVar_14), refBy(FamilyVar_15), refBy(FamilyVar_16), refBy(FamilyVar_17), refBy(FamilyVar_18), refBy(FamilyVar_19), refBy(FamilyVar_20), refBy(FamilyVar_21), refBy(FamilyVar_22), refBy(FamilyVar_23), refBy(FamilyVar_24), refBy(fMapper), refBy(fHayashiYoshida), refBy(FamilyVar_25), refBy(FamilyVar_26), refBy(FamilyVar_27), refBy(FamilyVar_28), refBy(FamilyVar_29), refBy(FamilyVar_30), refBy(FamilyVar_31), refBy(FamilyVar_32), refBy(FamilyVar_33), refBy(FamilyVar_34), refBy(FamilyVar_35), refBy(FamilyVar_36)
	};
	families.bindingTime = BindingTime.compile;
	fPreprocessor = Family {
		name = "fPreprocessor", 
		description = "", 
		input = {
			Tuple {
				name = "springStream", 
				fields = {
					Field {
						name = "symbolTuple", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType), 
						keyPart = false
					}
				}
			}
		}, 
		members = {
			refBy(swPreprocessor)
		}
	};
	fCorrelationFinancial = Family {
		name = "fCorrelationFinancial", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "id0", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "id1", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "date", 
						type = refBy(StringTimeStampType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(DoubleType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "windowSize"
			}
		}, 
		members = {
			refBy(SWTopoCorrelationFinancial), refBy(GenHWTopoCorrelationFinancial)
		}
	};
	fSentimentAnalysis = Family {
		name = "fSentimentAnalysis", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}, IntegerParameter {
				name = "sentimentClass"
			}, RealParameter {
				name = "classificationThreshold"
			}
		}, 
		members = {
			refBy(topoSentiWord), refBy(topoSVM)
		}
	};
	fCorrelationTwitter = Family {
		name = "fCorrelationTwitter", 
		description = "", 
		input = {
			Tuple {
				name = "analyzedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseTwitter", 
				fields = {
					Field {
						name = "pairwiseCorrelationTwitter", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "windowSize"
			}
		}, 
		members = {
			refBy(SWTopoCorrelationTwitter), refBy(HWTopoCorrelationTwitter)
		}
	};
	fMismatchedFamily = Family {
		name = "fMismatchedFamily", 
		input = {
			Tuple {
				name = "misString", 
				fields = {
					Field {
						name = "symbolTuple1", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "misString", 
				fields = {
					Field {
						name = "streamID1", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(IntegerType), 
						keyPart = false
					}, Field {
						name = "quote", 
						type = refBy(RealType), 
						keyPart = false
					}
				}
			}
		}, 
		members = {
			refBy(mismatchedAlg)
		}
	};
	randomFamily = Family {
		name = "randomFamily", 
		description = "", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(TimeStampType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(TimeStampType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "delay"
			}, BooleanParameter {
				name = "flag"
			}, IntegerParameter {
				name = "windowSize"
			}
		}, 
		members = {
			refBy(randomAlg1), refBy(randomAlg2)
		}
	};
	switchFamily = Family {
		name = "switchFamily", 
		description = "", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(TimeStampType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(TimeStampType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "aggregationFactor"
			}, IntegerParameter {
				name = "delay"
			}, BooleanParameter {
				name = "flag"
			}, IntegerParameter {
				name = "windowSize"
			}
		}, 
		members = {
			refBy(switchAlg1), refBy(switchAlg2)
		}
	};
	fExpertSearch = Family {
		name = "fExpertSearch", 
		description = "", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(StatusType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "experts", 
						type = refBy(IFExpertListType), 
						keyPart = false
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType), 
						keyPart = false
					}, Field {
						name = "keywords", 
						type = refBy(StringListType), 
						keyPart = false
					}, Field {
						name = "symbols", 
						type = refBy(StringListType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		members = {
			refBy(expertSearch)
		}
	};
	fFinancialNetworkExtraction = Family {
		name = "fFinancialNetworkExtraction", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(StatusType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "edges", 
						type = refBy(IFEdgeListType), 
						keyPart = false
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		members = {
			refBy(financialNetworkExtraction)
		}
	};
	fTwitterCrawling = Family {
		name = "fTwitterCrawling", 
		description = "", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType), 
						keyPart = false
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		members = {
			refBy(twitterCrawling)
		}
	};
	fTwitterEventDetection = Family {
		name = "fTwitterEventDetection", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16), 
						keyPart = false
					}, Field {
						name = "stocks", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 1000, 
				name = "hardThreshold"
			}, RealParameter {
				defaultValue = 0.5, 
				name = "percentageThreshold"
			}, IntegerParameter {
				defaultValue = 86400, 
				name = "lengthOfTimeWindow"
			}, IntegerParameter {
				defaultValue = 1, 
				name = "frequenceOfCheckForEvent"
			}
		}, 
		members = {
			refBy(AlgorithmVar_24)
		}
	};
	fTwitterEventPrediction = Family {
		name = "fTwitterEventPrediction", 
		description = "", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType), 
						keyPart = false
					}, Field {
						name = "symbols", 
						type = refBy(IFEventListType), 
						keyPart = false
					}, Field {
						name = "timeInterval", 
						type = refBy(IFTimeIntervalType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "timeSeriesGranularity"
			}
		}, 
		members = {
			refBy(AlgorithmVar_20), refBy(AlgorithmVar_21)
		}
	};
	fTwitterStreamFiltering = Family {
		name = "fTwitterStreamFiltering", 
		description = "", 
		input = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "analysis", 
				fields = {
					Field {
						name = "status", 
						type = refBy(ObjectType), 
						keyPart = false
					}
				}
			}
		}, 
		members = {
			refBy(twitterStreamFiltering)
		}
	};
	FamilyVar_14 = Family {
		name = "fSpamDetection", 
		description = "Detects spam in tweet stream", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}, Field {
						name = "spamPropability", 
						type = refBy(DoubleType)
					}
				}
			}
		}, 
		members = {
			refBy(spamDetection)
		}
	};
	FamilyVar_15 = Family {
		name = "fSpamRemoval", 
		description = "Removes Spam from twitter stream", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}, Field {
						name = "spamPropability", 
						type = refBy(DoubleType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}
				}
			}
		}, 
		parameters = {
			RealParameter {
				defaultValue = 0.5, 
				name = "spamThreshold"
			}
		}, 
		members = {
			refBy(spamRemoval)
		}
	};
	FamilyVar_16 = Family {
		name = "fTweetClassifier", 
		description = "checks if tweet belongs to a certain stock", 
		input = {
			Tuple {
				name = "modifiedTwitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(StatusType)
					}
				}
			}, Tuple {
				name = "keywordStream", 
				fields = {
					Field {
						name = "keywords", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "modifiedTwitterStream", 
				fields = {
					Field {
						name = "tweet", 
						type = refBy(StatusType)
					}, Field {
						name = "stocks", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		members = {
			refBy(tweetClassifier)
		}
	};
	FamilyVar_17 = Family {
		name = "fKeywordAnalyzer", 
		description = "deduces typical keywords for a current event", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}
				}
			}
		}, 
		parameters = {
			RealParameter {
				defaultValue = 0.5, 
				name = "threshold"
			}, RealParameter {
				defaultValue = 0.5, 
				name = "decay"
			}
		}, 
		members = {
			refBy(keywordAnalyzer)
		}
	};
	FamilyVar_18 = Family {
		name = "fEventEnrichment", 
		description = "simply adds keywords to events", 
		input = {
			Tuple {
				name = "eventStream", 
				fields = {
					Field {
						name = "tweet", 
						type = refBy(FieldTypeVar_16)
					}, Field {
						name = "events", 
						type = refBy(IFEventListType)
					}
				}
			}, Tuple {
				name = "keywordStream", 
				fields = {
					Field {
						name = "keywords", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "enrichedEventsStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}
				}
			}
		}, 
		members = {
			refBy(eventEnrichment)
		}
	};
	FamilyVar_19 = Family {
		name = "fRecommendations", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "recommendationStream", 
				fields = {
					Field {
						name = "recommendations", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		parameters = {
			RealParameter {
				defaultValue = 0.5, 
				name = "impactThreshold"
			}, RealParameter {
				defaultValue = 0.5, 
				name = "stockCooccurrenceThreshold"
			}
		}, 
		members = {
			refBy(recommendations)
		}
	};
	FamilyVar_20 = Family {
		name = "fSimpleRecommendations", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "events", 
						type = refBy(IFEventListType)
					}, Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "recommendations", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		members = {
			refBy(AlgorithmVar_23)
		}
	};
	FamilyVar_21 = Family {
		name = "fStockParser", 
		description = "", 
		input = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "twitterStream", 
				fields = {
					Field {
						name = "status", 
						type = refBy(FieldTypeVar_16)
					}, Field {
						name = "stocks", 
						type = refBy(StringListType)
					}
				}
			}
		}, 
		members = {
			refBy(AlgorithmVar_22)
		}
	};
	FamilyVar_22 = Family {
		name = "fDynamicGraphCompilation", 
		description = "", 
		input = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "id0", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "id1", 
						type = refBy(StringType)
					}, Field {
						name = "date", 
						type = refBy(StringTimeStampType)
					}, Field {
						name = "value", 
						type = refBy(DoubleType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "edgeStream", 
				fields = {
					Field {
						name = "edge", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			RealParameter {
				name = "correlationThreshold"
			}
		}, 
		members = {
			refBy(AlgorithmVar_25)
		}
	};
	FamilyVar_23 = Family {
		name = "fDynamicHubComputation", 
		description = "", 
		input = {
			Tuple {
				name = "edgeStream", 
				fields = {
					Field {
						name = "edge", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "hubStream", 
				fields = {
					Field {
						name = "hubList", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 30, 
				name = "windowSize"
			}, IntegerParameter {
				defaultValue = 10, 
				name = "hubListSize"
			}
		}, 
		members = {
			refBy(AlgorithmVar_26)
		}
	};
	FamilyVar_24 = Family {
		name = "fTransferEntropy", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "id0", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "id1", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "date", 
						type = refBy(StringTimeStampType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(DoubleType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 300, 
				name = "windowSize"
			}, IntegerParameter {
				defaultValue = 1, 
				name = "windowAdvance"
			}, IntegerParameter {
				defaultValue = 128, 
				name = "densitySize"
			}
		}, 
		members = {
			refBy(SoftwareAlgorithmVar_33)
		}
	};
	fMapper = Family {
		name = "fMapper", 
		description = "", 
		input = {
			Tuple {
				name = "preprocessedStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}, Field {
						name = "volume", 
						type = refBy(IntegerType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "symbolList", 
				fields = {
					Field {
						name = "allSymbols", 
						type = refBy(StringListType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "symbolsStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "configurationStream", 
				fields = {
					Field {
						name = "pairKey", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "pairValue", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "resetWindowStream", 
				fields = {
					Field {
						name = "windowStart", 
						type = refBy(LongType), 
						keyPart = false
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				name = "windowSize"
			}
		}, 
		members = {
			refBy(aMapper)
		}
	};
	fHayashiYoshida = Family {
		name = "fHayashiYoshida", 
		input = {
			Tuple {
				name = "symbolsStream", 
				fields = {
					Field {
						name = "symbolId", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "timestamp", 
						type = refBy(LongType), 
						keyPart = false
					}, Field {
						name = "value", 
						type = refBy(RealType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "configurationStream", 
				fields = {
					Field {
						name = "pairKey", 
						type = refBy(StringType), 
						keyPart = false
					}, Field {
						name = "pairValue", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}, Tuple {
				name = "resetWindowStream", 
				fields = {
					Field {
						name = "windowStart", 
						type = refBy(LongType), 
						keyPart = false
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "pairwiseFinancial", 
				fields = {
					Field {
						name = "pairwiseCorrelationFinancial", 
						type = refBy(StringType), 
						keyPart = false
					}
				}
			}
		}, 
		members = {
			refBy(aHayashiYoshida)
		}
	};
	FamilyVar_25 = Family {
		name = "fTimeGraph", 
		description = "", 
		input = {
			Tuple {
				name = "dataStream", 
				fields = {
					Field {
						name = "update", 
						type = refBy(ObjectType)
					}, Field {
						name = "isAddition", 
						type = refBy(BooleanType)
					}
				}
			}, Tuple {
				name = "snapshotQueryStream", 
				fields = {
					Field {
						name = "start", 
						type = refBy(LongType)
					}, Field {
						name = "end", 
						type = refBy(LongType)
					}
				}
			}, Tuple {
				name = "pathQueryStream", 
				fields = {
					Field {
						name = "start", 
						type = refBy(LongType)
					}, Field {
						name = "end", 
						type = refBy(LongType)
					}, Field {
						name = "vertexA", 
						type = refBy(StringType)
					}, Field {
						name = "vertexB", 
						type = refBy(StringType)
					}, Field {
						name = "type", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "snapshotStream", 
				fields = {
					Field {
						name = "snapshot", 
						type = refBy(StringType)
					}
				}
			}, Tuple {
				name = "pathStream", 
				fields = {
					Field {
						name = "path", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		members = {
			refBy(SoftwareAlgorithmVar_29)
		}
	};
	FamilyVar_26 = Family {
		name = "fTimeGraphMapper", 
		description = "", 
		input = {
			Tuple {
				name = "edgeStream", 
				fields = {
					Field {
						name = "edge", 
						type = refBy(StringType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "dataStream", 
				fields = {
					Field {
						name = "update", 
						type = refBy(ObjectType), 
						keyPart = false
					}, Field {
						name = "isAddition", 
						type = refBy(BooleanType)
					}
				}
			}
		}, 
		members = {
			refBy(SoftwareAlgorithmVar_34)
		}
	};
	FamilyVar_27 = Family {
		name = "fTimeGraphIndexer", 
		description = "", 
		input = {
			Tuple {
				name = "dataStream", 
				fields = {
					Field {
						name = "update", 
						type = refBy(ObjectType), 
						keyPart = false
					}, Field {
						name = "isAddition", 
						type = refBy(BooleanType)
					}
				}
			}, Tuple {
				name = "internalRequests", 
				fields = {
					Field {
						name = "internalRequest", 
						type = refBy(ObjectType)
					}
				}
			}, Tuple {
				name = "unicastRequests", 
				fields = {
					Field {
						name = "unicastExternalRequest", 
						type = refBy(ObjectType)
					}
				}
			}, Tuple {
				name = "broadcastRequests", 
				fields = {
					Field {
						name = "broadcastExternalRequest", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "externalResponses", 
				fields = {
					Field {
						name = "externalResponse", 
						type = refBy(ObjectType)
					}
				}
			}, Tuple {
				name = "internalRequests", 
				fields = {
					Field {
						name = "internalRequest", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		members = {
			refBy(SoftwareAlgorithmVar_35)
		}
	};
	FamilyVar_28 = Family {
		name = "fTimeGraphQueryExecutor", 
		description = "", 
		input = {
			Tuple {
				name = "snapshotQueryStream", 
				fields = {
					Field {
						name = "start", 
						type = refBy(LongType)
					}, Field {
						name = "end", 
						type = refBy(LongType)
					}
				}
			}, Tuple {
				name = "pathQueryStream", 
				fields = {
					Field {
						name = "start", 
						type = refBy(LongType)
					}, Field {
						name = "end", 
						type = refBy(LongType)
					}, Field {
						name = "vertexA", 
						type = refBy(StringType)
					}, Field {
						name = "vertexB", 
						type = refBy(StringType)
					}, Field {
						name = "type", 
						type = refBy(StringType)
					}
				}
			}, Tuple {
				name = "externalResponses", 
				fields = {
					Field {
						name = "externalResponse", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "snapshotStream", 
				fields = {
					Field {
						name = "snapshot", 
						type = refBy(StringType)
					}
				}
			}, Tuple {
				name = "pathStream", 
				fields = {
					Field {
						name = "path", 
						type = refBy(StringType)
					}
				}
			}, Tuple {
				name = "unicastRequests", 
				fields = {
					Field {
						name = "unicastExternalRequest", 
						type = refBy(ObjectType)
					}
				}
			}, Tuple {
				name = "broadcastRequests", 
				fields = {
					Field {
						name = "broadcastExternalRequest", 
						type = refBy(ObjectType)
					}
				}
			}
		}, 
		members = {
			refBy(SoftwareAlgorithmVar_36)
		}
	};
	FamilyVar_29 = Family {
		name = "fElectricMapper", 
		description = "", 
		input = {
			Tuple {
				name = "elData", 
				fields = {
					Field {
						name = "key", 
						type = refBy(FieldTypeVar_17)
					}, Field {
						name = "value", 
						type = refBy(FieldTypeVar_18)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "elData", 
				fields = {
					Field {
						name = "key", 
						type = refBy(FieldTypeVar_18)
					}, Field {
						name = "value", 
						type = refBy(FieldTypeVar_19)
					}
				}
			}
		}, 
		members = {
			refBy(SoftwareAlgorithmVar_39)
		}
	};
	FamilyVar_30 = Family {
		name = "fElectricReducer", 
		description = "", 
		input = {
			Tuple {
				name = "elData", 
				fields = {
					Field {
						name = "key", 
						type = refBy(FieldTypeVar_18)
					}, Field {
						name = "value", 
						type = refBy(FieldTypeVar_19)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "elData", 
				fields = {
					Field {
						name = "key", 
						type = refBy(FieldTypeVar_18)
					}, Field {
						name = "value", 
						type = refBy(FieldTypeVar_19)
					}
				}
			}
		}, 
		members = {
			refBy(SoftwareAlgorithmVar_40)
		}
	};
    FamilyVar_31 = Family {
        name = "fFinancialMapper", 
        description = "", 
        input = {
            Tuple {
                name = "springStream", 
                fields = {
                    Field {
                       name = "key",
                       type = refBy(StringType)  
                    }, 
                    Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_1)
                    }
                }
            }
        }, 
        output = {
            Tuple {
                name = "finIntermediaryData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                    }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_1)
                    }
                }
            }
        }, 
        members = {
            refBy(SoftwareAlgorithmVar_41)
        }
    };
    FamilyVar_32 = Family {
        name = "fFinancialReducer", 
        description = "", 
        input = {
            Tuple {
                name = "finIntermediaryData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                    }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_1)
                    }
                }
            }
        }, 
        output = {
            Tuple {
                name = "finOutputData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                    }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_3)
                    }
                }
            }
        }, 
        members = {
            refBy(SoftwareAlgorithmVar_42)
        }
    };
    FamilyVar_33 = Family {
        name = "fTwitterMapper", 
        description = "", 
        input = {
            Tuple {
                name = "twitInputData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                     }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_2)
                    }
                }
            }
        }, 
        output = {
            Tuple {
                name = "twitIntermediaryData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                   }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_2)
                    }
                }
            }
        }, 
        members = {
            refBy(SoftwareAlgorithmVar_43)
        }
    };
    FamilyVar_34 = Family {
        name = "fTwitterReducer", 
        description = "", 
        input = {
            Tuple {
                name = "twitIntermediaryData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                     }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_2)
                    }
                }
            }
        }, 
        output = {
            Tuple {
                name = "twitOutputData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                     }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_3)
                    }
                }
            }
        }, 
        members = {
            refBy(SoftwareAlgorithmVar_44)
        }
    };
    FamilyVar_35 = Family {
        name = "fCombinedCorrelationMapper", 
        description = "", 
        input = {
            Tuple {
                name = "combinedInputData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                     }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_3)
                    }
                }
            }
        }, 
        output = {
            Tuple {
                name = "correlationIntermediaryData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                   }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_3)
                    }
                }
            }
        }, 
        members = {
            refBy(SoftwareAlgorithmVar_45)
        }
    };
    FamilyVar_36 = Family {
        name = "fCombinedCorrelationReducer", 
        description = "", 
        input = {
            Tuple {
                name = "correlationIntermediaryData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                     }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_3)
                    }
                }
            }
        }, 
        output = {
            Tuple {
                name = "correlationOutputData", 
                fields = {
                    Field {
                        name = "key", 
                        type = refBy(StringType)  
                     }, Field {
                        name = "value", 
                        type = refBy(RecordFieldTypeVar_3)
                    }
                }
            }
        }, 
        members = {
            refBy(SoftwareAlgorithmVar_46)
        }
    };
	freeze {
		families;
		fPreprocessor;
		fCorrelationFinancial;
		fSentimentAnalysis;
		fCorrelationTwitter;
		fMismatchedFamily;
		randomFamily;
		switchFamily;
		fExpertSearch;
		fFinancialNetworkExtraction;
		fTwitterCrawling;
		fTwitterEventDetection;
		fTwitterEventPrediction;
		fTwitterStreamFiltering;
		FamilyVar_14;
		FamilyVar_15;
		FamilyVar_16;
		FamilyVar_17;
		FamilyVar_18;
		FamilyVar_19;
		FamilyVar_20;
		FamilyVar_21;
		FamilyVar_22;
		FamilyVar_23;
		FamilyVar_24;
		fMapper;
		fHayashiYoshida;
		FamilyVar_25;
		FamilyVar_26;
		FamilyVar_27;
		FamilyVar_28;
		FamilyVar_29;
		FamilyVar_30;
        FamilyVar_31;
        FamilyVar_32;
        FamilyVar_33;
        FamilyVar_34;
        FamilyVar_35;
        FamilyVar_36;
	} but (f|f.bindingTime >= BindingTime.runtimeMon)
}
