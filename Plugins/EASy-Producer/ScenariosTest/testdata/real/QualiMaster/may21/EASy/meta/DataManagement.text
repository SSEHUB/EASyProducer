DataManagement::DataElement::name = name|The logical name of this source, sink, data element.
DataManagement::DataElement::storageLocation = storage name|The name of the container used for storing the related data according to the storage strategy.
DataManagement::DataElement::strategy = storage strategy|Strategy for saving data, in particular how to handle mass data over time.
DataManagement::DataElement::timeLine = time line|Time in milliseconds after the data element has been stored - for time-based storage strategies.
DataManagement::DataElement::cutoffCapacity = cutoff capacity|Capacity in bytes when to start throwing away data - for capacity-based storage strategies.
DataManagement::DataElement::description = description|Freetext description for documentation purposes.
DataManagement::DataElement::artifact = artifact|The implementing Maven artifact.
DataManagement::DataElement::strategyAssigned = Strategy must be assigned
DataManagement::DataElement::strategyC1 = Capacity-based strategies require a positive cutoff capacity
DataManagement::DataElement::strategyC2 = Time-based strategies require a positive time line
DataManagement::DataElement::strategyC3 = For the current strategy, time line and cutoff capacitiy must be 0.
DataManagement::DataSource::input = data fields|The data fields provided by this data source.
DataManagement::DataSource::constraints = SLA constraints|Runtime constraints to be considered by the adaptation.
DataManagement::DataSource::parameters = adaptable parameters|Parameters of the data source that can be changed at runtime.
DataManagement::DataSource::supportsHadoop = whether the data source can directly be used in Hadoop and provides related interfaces.
DataManagement::DataSource::sourceCls = class|The implementing Java class as qualified class name.
DataManagement::DataSource::velocity = data stream velocity (runtime)|Data stream velocity
DataManagement::DataSource::volume = data stream volume (runtime)|Data stream volumes
DataManagement::DataSource::volatility = data stream volatility (runtime)|Data stream volatility
DataManagement::DataSource::confidence = data confidence (runtime)|Data stream confidence
DataManagement::DataSource::completeness = data completeness (runtime)|Data completeness
DataManagement::DataSource::profilingSource = profiling|internal use - shall not be visible - do not set to true
DataManagement::DataSource::aggregationFrequency = volume aggregation frequency|How often shall the volume aggregation be executed (valid values in ms are between 500 and 1800000).
DataManagement::DataSource::aggregationFrequencyConstraint = Volume aggregation frequency is not within 500 and 1800000 ms. 
DataManagement::DataSource::hadoopInputOk = A Hadoop source input requires at least one tuple and within that two fields;
DataManagement::dataSources = configured data sources
DataManagement::sourceNamesUnique = All source names must be unique
DataManagement::DataSink::output = data fields|The data fields accepted by this data sink.
DataManagement::DataSink::parameters = parameters|Configuration parameters of the data sink that can be changed at runtime.
DataManagement::DataSink::supportsHadoop = whether the data sink can directly be used in Hadoop and provides related interfaces.
DataManagement::DataSink::constraints = SLA constraints|Runtime constraints to be considered by the adaptation.
DataManagement::DataSink::sinkCls = class|The implementing Java class as qualified class name.
DataManagement::DataSink::velocity = data stream velocity (runtime)|Data stream velocity
DataManagement::DataSink::volume = data stream volume (runtime)|Data stream volume
DataManagement::DataSink::confidence = data confidence (runtime)|Data stream confidence
DataManagement::DataSource::hadoopInputOk = A Hadoop sink output requires at least one tuple and within that two fields;
DataManagement::dataSinks = configured data sinks
DataManagement::sinkNamesUnique = All sink names must be unique
