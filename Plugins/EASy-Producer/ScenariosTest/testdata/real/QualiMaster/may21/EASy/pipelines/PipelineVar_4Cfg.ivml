project PipelineVar_4Cfg {

	import Basics;
	import Pipelines;
	import FamiliesCfg;
	import DataManagementCfg;
	annotate BindingTime bindingTime = BindingTime.compile to PipelineVar_4Cfg;
	SubPipeline PipelineVar_4;
	PipelineVar_4 = {name = "RandomProcessor", sources = {}, connectors = {refBy(PipelineVar_4_FamilyElement0)}, subPipelineFamily = refBy(randomFamily),numworkers = 1, artifact = "eu.qualimaster.test:RandomProcessor:0.0.1-SNAPSHOT", debug = false, fastSerialization = false, constraints = {}};
	FamilyElement PipelineVar_4_FamilyElement0;
	PipelineVar_4_FamilyElement0 = {family = refBy(randomFamily), output = {}, parallelism = 1, name = "processor", constraints = {}};
	
	SubPipelineAlgorithm randomProcessor = SubPipelineAlgorithm {
		name = "RandomProcessor", 
		artifact = "eu.qualimaster.test:RandomProcessor:0.0.1-SNAPSHOT", 
		//class = "eu.qualimaster.RandomProcessor.topology.SubTopology", 
		input = {
			Tuple {
				name = "randomData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		output = {
			Tuple {
				name = "proccessedData", 
				fields = {
					Field {
						name = "randomInteger", 
						type = refBy(IntegerType)
					}
				}
			}
		}, 
		parameters = {
			IntegerParameter {
				defaultValue = 0, 
				name = "delay"
			}, BooleanParameter {
				defaultValue = false, 
				name = "flag"
			}
		}, 
		subPipeline = refBy(PipelineVar_4),
		//algTopologyClass = "RandomProcessor", 
		successor = null, 
		inputGivenCheck = false, 
		outputGivenCheck = false
	};
	freeze {
		PipelineVar_4;
		PipelineVar_4_FamilyElement0;
		randomProcessor;
	} but (f|f.bindingTime >= BindingTime.runtimeMon)
}
