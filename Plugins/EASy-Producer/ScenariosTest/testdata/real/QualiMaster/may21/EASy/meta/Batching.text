Batching::Pair::type1 = First type of pair (of types)
Batching::Pair::type2 = First type of pair (of types)
Batching::FieldType::elementType = Generic element type of List type
Batching::Mapper::family = Mapper algorithm family
Batching::Mapper::inputOk = The input type of a Mapper must be a simple tuple.
Batching::Mapper::outputOk = The output type of a Mapper must be a simple tuple.
Batching::Mapper::available = The available algorithms instances at runtime, i.e., members of the family.
Batching::Mapper::actual = The actual algorithm at runtime.
Batching::Mapper::actualAlgorithmCheck = The actual algorithm must be from the set of available algorithms.
Batching::mappers = All available mappers.
Batching::Reducer::family = Reducer algorithm family
Batching::Reducer::inputOk = The input type of a Reducer must be a simple tuple.
Batching::Reducer::outputOk = The output type of a Reducer must be a simple tuple.
Batching::Reducer::available = The available algorithms instances at runtime, i.e., members of the family.
Batching::Reducer::actual = The actual algorithm at runtime.
Batching::Reducer::actualAlgorithmCheck = The actual algorithm must be from the set of available algorithms.
Batching::reducers = All available reducers.
Batching::Job::name = The name of the job.
Batching::Job::mapper = The mapper of the job.
Batching::Job::reducer = The reducer of the job.
Batching::Job::typesOk = Reducer output type must be compliant with mapper input type.
Batching::Job::sourceOk = The source of a job must have supportHadoop=true set and the output type must be a simple tuple.
Batching::Job::sinkOk = The sink of a job must have supportHadoop=true set and the input type must be a simple tuple.
Batching::Job::sourceTypesOk = The source output type must be compliant with the mapper input type.
Batching::Job::sinkTypesOk = The reducer output type must be compliant with the sink input type.
Batching::Job::minNumMapTasks = The minimum number of mapper tasks at runtime.
Batching::Job::maxNumMapTasks = The maximum number of mapper tasks at runtime.
Batching::Job::minNumReduceTasks = The minimum number of reducer tasks at runtime.
Batching::Job::maxNumReduceTasks = The maximum number of reducer tasks at runtime.
Batching::Job::minNumTasksPerJvm = The minimum number of tasks per JVM at runtime.
Batching::Job::maxNumTasksPerJvm = The maximum number of tasks per JVM at runtime.
Batching::Job::mapTasksRangeOk = The minimum number of mapper tasks must be less or equal than the maximum number of mapper tasks.
Batching::Job::reduceTasksRangeOk = The minimum number of reducer tasks must be less or equal than the maximum number of reducer tasks.
Batching::Job::jvmTasksRangeOk = The minimum number of mapper per JVM must be less or equal than the maximum number of tasks per JVM.
Batching::Job::numMapTasks = The actual number of mapper tasks at runtime.
Batching::Job::numReduceTasks = The actual number of reducer tasks at runtime.
Batching::Job::numTasksPerJvm = The actual number of tasks per JVM at runtime.
Batching::Job::mapTasksOk = The actual number of mapper tasks must be within the respective minimum and maximum number.
Batching::Job::reduceTasksOk = The actual number of reducer tasks must be within the respective minimum and maximum number.
Batching::Job::jvmTasksOk = The actual number of tasks per JVM must be within the respective minimum and maximum number.
Batching::ChainedJob::jobs = The job sequence.
Batching::ChainedJob::jobsExist = The job sequence must not be empty.
Batching::ChainedJob::firstSource = The source of the chained job must be the source of the first job in the sequence.
Batching::ChainedJob::firstJobMapper = The mapper of the chained job must be the mapper of the first job in the sequence.
Batching::ChainedJob::lastJobReducer = The reducer of the chained job must be the reducer of the last job in the sequence.
Batching::ChainedJob::lastSource = The sink of the chained job must be the sink of the first job in the sequence.
Batching::ChainedJob::sequenceOk = The output pair type of a previous job must match the input pairs type of the subsequent job.
Batching::jobs = All jobs.
Batching::jobUnique = All jobs must have unique names.
Batching::activeJobs = All active jobs considered in generation/execution.
Batching::activeJobsCheck = activeJobs must be defined and a subset of all jobs.