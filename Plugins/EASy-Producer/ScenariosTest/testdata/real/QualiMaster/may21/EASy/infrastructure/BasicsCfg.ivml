project BasicsCfg {

	import Basics;
	FieldType IntegerType;
	FieldType LongType;
	FieldType StringType;
	FieldType BooleanType;
	FieldType FloatType;
	FieldType DoubleType;
	FieldType RealType;
	FieldType ObjectType;
	FieldType StringListType;
	FieldType IFExpertListType;
	FieldType IFTimeIntervalType;
	FieldType StatusType;
	FieldType IFEdgeListType;
	FieldType IFEventListType;
	FieldType TimeStampType;
	FieldType StringTimeStampType;
	FieldType FieldTypeVar_16;
    FieldType FieldTypeVar_17;
    FieldType FieldTypeVar_18;
    FieldType FieldTypeVar_19;
    types = {
		refBy(IntegerType), refBy(LongType), refBy(StringType), refBy(BooleanType), refBy(FloatType), refBy(DoubleType), refBy(RealType), refBy(ObjectType), refBy(StringListType), refBy(IFTimeIntervalType), refBy(IFExpertListType), refBy(StatusType), refBy(IFEdgeListType), refBy(IFEventListType), refBy(TimeStampType), refBy(StringTimeStampType), refBy(FieldTypeVar_16), refBy(FieldTypeVar_17), refBy(FieldTypeVar_18), refBy(FieldTypeVar_19)
	};
	types.bindingTime = BindingTime.compile;
	IntegerType = FieldType {
		name = "INTEGER", 
		class = "int"
	};
	LongType = FieldType {
		name = "LONG", 
		class = "long"
	};
	StringType = FieldType {
		name = "STRING", 
		class = "String"
	};
	BooleanType = FieldType {
		name = "BOOLEAN", 
		class = "boolean"
	};
	FloatType = FieldType {
		name = "Float", 
		class = "float"
	};
	DoubleType = FieldType {
		name = "Double", 
		class = "double"
	};
	RealType = FieldType {
		name = "REAL", 
		class = "double"
	};
	ObjectType = FieldType {
		name = "OBJECT", 
		class = "Object"
	};
	StringListType = FieldType {
		name = "STRINGLIST", 
		class = "java.util.List<String>", 
		artifact = "", 
		serializer = "eu.qualimaster.base.serializer.StringListSerializer", 
		serializerArtifact = "eu.qualimaster:StormCommons:0.5.0-SNAPSHOT"
	};
	IFExpertListType = FieldType {
		name = "IFEXPERTLIST", 
		class = "java.util.List<eu.qualimaster.families.datatypes.expertsearch.IFExpert>", 
		artifact = "eu.qualimaster.families:Datatypes:0.0.1-SNAPSHOT", 
		serializer = "", 
		serializerArtifact = ""
	};
	IFTimeIntervalType = FieldType {
		name = "IFTIMEINTERVAL", 
		class = "eu.qualimaster.families.datatypes.common.IFTimeInterval", 
		artifact = "eu.qualimaster.families:Datatypes:0.0.1-SNAPSHOT", 
		serializer = "", 
		serializerArtifact = ""
	};
	StatusType = FieldType {
		name = "STATUS", 
		class = "twitter4j.Status", 
		artifact = "org.twitter4j:twitter4j-stream:4.0.1", 
		serializer = "", 
		serializerArtifact = ""
	};
	IFEdgeListType = FieldType {
		name = "IFEDGETYPE", 
		class = "java.util.List<eu.qualimaster.families.datatypes.financialnetwork.IFEdge>", 
		artifact = "eu.qualimaster.families:Datatypes:0.0.1-SNAPSHOT", 
		serializer = "", 
		serializerArtifact = ""
	};
	IFEventListType = FieldType {
		name = "IFEVENTLISTTYPE", 
		class = "java.util.List<eu.qualimaster.families.datatypes.events.IFEvent>", 
		artifact = "eu.qualimaster.families:Datatypes:0.0.1-SNAPSHOT", 
		serializer = "", 
		serializerArtifact = ""
	};
	TimeStampType = FieldType {
		name = "TIMESTAMP", 
		class = "long",
		isTimestamp = true
	};
    StringTimeStampType = FieldType {
        name = "STRING-TIMESTAMP", // must be in format MM/dd/yyyy,HH:mm:ss 
        class = "String",
        isTimestamp = true
    };
	FieldTypeVar_16 = FieldType {
		name = "LABELLEDTWEET", 
		class = "eu.qualimaster.data.stream.source.LabelledTweet", 
		artifact = "eu.qualimaster:TwitterStreamDataSource:0.0.5-SNAPSHOT", 
		serializer = "", 
		serializerArtifact = ""
	};
	FieldTypeVar_17 = FieldType {
		name = "LongWritable", 
		class = "org.apache.hadoop.io.LongWritable"
	};
	FieldTypeVar_18 = FieldType {
		name = "Text", 
		class = "org.apache.hadoop.io.Text"
	};
	FieldTypeVar_19 = FieldType {
		name = "IntWritable", 
		class = "org.apache.hadoop.io.IntWritable"
	};
	freeze {
		types;
		IntegerType;
		LongType;
		StringType;
		BooleanType;
		FloatType;
		DoubleType;
		RealType;
		ObjectType;
		StringListType;
		IFExpertListType;
		IFTimeIntervalType;
		StatusType;
		IFEdgeListType;
		IFEventListType;
		TimeStampType;
		StringTimeStampType;
		FieldTypeVar_16;
		FieldTypeVar_17;
		FieldTypeVar_18;
		FieldTypeVar_19;
	} but (f|f.bindingTime >= BindingTime.runtimeMon)
}
