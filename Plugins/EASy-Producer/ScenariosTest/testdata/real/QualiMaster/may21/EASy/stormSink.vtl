import commonVTLMethods;
@advice(QM)
template stormSink(Configuration config, FileArtifact target, DecisionVariable preElt, DecisionVariable elt, String topoName, mapOf(Tuple,String) nameToOutputMap, mapOf(String, mapOf(Tuple, sequenceOf(Tuple))) globalMap,mapOf(String, setOf(DecisionVariable)) lastElementMap, Boolean debug) {
    Boolean isReplay = false;
    Boolean lastHasSubPipeline = false; //indicates whether the last elements have sub-pipeline-based algorithm	
	Boolean loadShedding = false;
	def produceInputVariable(sequenceOf(Tuple) tuples, Boolean variable, String fName) {
		String ifInputName = "I" + fName;
		String tupleName;

		for(Tuple t : tuples) {
			//get the tuple name
			tupleName = t.name;
			//change the first letter to upper letter
			tupleName = firstToUpperCase(tupleName);
			String inputInfName = ifInputName + "${tupleName}Input";
			String fImpInputName = 	fName + "${tupleName}Input";
			if(variable) {
				'    transient ${toIdentifier(inputInfName)} input${tupleName} = null;'
			} else {
				'        input${tupleName} = new ${toIdentifier(fName)}.${toIdentifier(fImpInputName)}();'
			}			
		}
	}
	
	def registerSerializer(sequenceOf(Tuple) tuples,  String fName) {
		String ifInputName = "I" + fName;
		String tupleName;

		for(Tuple t : tuples) {
			//get the tuple name
			tupleName = t.name;
			//change the first letter to upper letter
			tupleName = firstToUpperCase(tupleName);
			String inputInfName = ifInputName + "${tupleName}Input";
			String fImpInputName = 	fName + "${tupleName}Input";
			'        new ${toIdentifier(fName)}.${toIdentifier(fImpInputName)}();'
		}
	}
	
	/*
	 * Produces the casting statement from tuple value to right tuple type.
	 */	
    def produceInputForTuples(mapOf(Tuple, sequenceOf(Tuple)) inputToOutputMapping, mapOf(Tuple,String) nameToOutputMap, DecisionVariable elt) {
		String familyName = elt.byName("sink").varName().firstToUpperCase();	
		String outputInfName; //output interface name	
		String inputInfName; //input interface name		
        Sink snk = elt;
        DataSink dataSnk = snk.sink;
		String snkName =dataSnk.name;
		String inputName = snkName.firstToUpperCase();
		String ifInputName = "I" + inputName; 
		String inputImpName;       

		String qualifiedClsName = dataSnk.sinkCls;
		JavaPath javaPath = qualifiedClsName;
		String impClassName = javaPath.getName(); //the class name of the sink implementation
        
        String tupleName;		
		Boolean multiStream = false;
		Integer indent = 4;
		sequenceOf(Tuple) tuples = dataSnk.output;
		Integer tuplesSize = tuples.size();
		for(Tuple t : tuples) {
			if(tuplesSize > 1){
				multiStream = true;
				indent = 8;
			}
			//get the tuple name
			tupleName = t.name;
			//change the first letter to upper letter
			tupleName = firstToUpperCase(tupleName);
			//get input interface name
			inputInfName = ifInputName + "${tupleName}Input";
			
			inputImpName = inputName +"${tupleName}Input";
					
			//get output interface name	
			if(inputToOutputMapping.containsKey(t))	{
			  sequenceOf(Tuple) outputs = inputToOutputMapping.get(t);
			  String number;
			  Integer size = outputs.size();
			  Integer count = 0;
			  for(Tuple tuple : outputs) {
			  	  count = count + 1;
			  	  outputInfName = nameToOutputMap.get(tuple);
			  	  if(size > 1) {
				      number = "$count";
				  } else {
				  	  number = "";
				  }
				  
				'if(tupleItem instanceof $outputInfName) {' | indent;
				'iTuple${tupleName}$number = ($outputInfName)tupleItem;' | indent+4;
				if(genInstance) {
					'input${tupleName} = new ${toIdentifier(inputName)}.${toIdentifier(inputImpName)}();' | indent+4;
				}
				 for(Field f : t.fields) {
					 String fname = toIdentifier("${f.name}");
	    			 String mname = firstToUpperCase(fname);
	    	         'input${tupleName}.set${mname}(iTuple${tupleName}$number.get${mname}());' | indent+4;
				 }
				 if(isReplay) {
				 	'store(input${tupleName});' | indent+4;
				 } else {
				 	'sinkHandler.postData${tupleName}(input${tupleName});' | indent+4;
				 }
				 if (genMonitoringProbes) {
				     'emitted(input${tupleName});' | indent+4;
				 }
				 '}' | indent;
				 ''	
			  }			  			

			 }						 
		}							
	}
	
	/**
	 * Returns the base class, for Sink or ReplaySink. 
	 */
	def String baseClass(DecisionVariable elt) {
		if(elt.type() == "ReplaySink") {
			'AbstractReplaySink';
		} else {
			'BaseSignalBolt';
		}		
	}
	
	/**
	 * Produce emitters per tuple type for replay sink.
	 */
	def produceEmitters(String snkName, Tuples tuples) {
		String ifInputName = "I" + formulateString(snkName);
		String inputInfName;
		for (Tuple t : tuples) {
			inputInfName = ifInputName + formulateString(t.name) + "Input";
			'public class ${inputInfName}Emitter<$inputInfName> implements AbstractReplaySink.ITupleEmitter<$inputInfName> {' | 4;
	        	'@Override' | 8;
        		'public void emit(int ticket, $inputInfName tuple) {' | 8;
					'//call from sink implementation' | 12;  
					'sinkHandler.emit(ticket, (I${toIdentifier(snkName)}.$inputInfName)tuple);' | 12;         
        		'}' | 8;
        
    		'}' | 4;
		}
	}
	
	def produceRegister(DataSink dataSnk) {
		String strategyStr = obtainManagementStrategyInstance(dataSnk);
		String ifInputName = "I" + formulateString(dataSnk.name);
		String inputInfName;
		String inputImpName;
		'@Override' | 4;
    	'protected void registerHandlers(Map conf, TopologyContext context) {' | 4;
    		'eu.qualimaster.dataManagement.common.replay.Tuple schema;' | 8;
    		for(Tuple t : dataSnk.output) {
    			inputInfName = ifInputName + formulateString(t.name) + "Input";
    			inputImpName = formulateString(dataSnk.name) + formulateString(t.name) + "Input";
    			'schema = new eu.qualimaster.dataManagement.common.replay.Tuple("${t.name}");' | 8;
    			for(Field f : t.fields) {
    				'schema.addField(new eu.qualimaster.dataManagement.common.replay.Field("${f.name}", ${f.type.class}.class, ${key(f)}, ${f.type.isTimestamp}));' | 8;
    			}
        		'addTupleHandler(${inputImpName}.class, schema, "${dataSnk.storageLocation}", $strategyStr, new ${inputInfName}Emitter());' | 8;
        	}
    	'}'
    	''
	}	
	
    def main(Configuration config, FileArtifact target, DecisionVariable preElt, DecisionVariable elt, String topoName, mapOf(Tuple,String) nameToOutputMap, mapOf(String, mapOf(Tuple, sequenceOf(Tuple))) globalMap,mapOf(String, setOf(DecisionVariable)) lastElementMap, Boolean debug) {
        if(elt.type() == "ReplaySink") {
        	isReplay = true;
        }
        String name = elt.varName().firstToUpperCase() + elt.type();
        String preIfName = "I" + preElt.byName("family").varName().firstToUpperCase();
		String streamId = elt.varName() + "Stream";
		Sink snk = elt;
		loadShedding = snk.loadShedding;
		DataSink dataSnk = snk.sink;
		String qualifiedClsName = dataSnk.sinkCls;
		JavaPath javaPath = qualifiedClsName;
		String impClassName = javaPath.getName(); //the class name of the sink implementation	
			
		String fmVarName = elt.varName().firstToUpperCase();
		setOf(DecisionVariable) lastElt = {};
		if(lastElementMap.containsKey(fmVarName)) {
			lastElt = lastElementMap.get(fmVarName); //last elements linked to the current element	
		}
		
		//determine whether the last elements have sub-pipeline-based algorithm
		for(DecisionVariable elt : lastElt) {
			if(elt.type() == "FamilyElement") {
				FamilyElement fe = elt;
				Family fm = fe.family;
				if(looseSub and hasGenAlgorithm(fm)) {
					lastHasSubPipeline = true;
				}
			}
		}
		
		String snkName =dataSnk.name;
		String inputName = snkName.firstToUpperCase();	
		
		String eltName = elt.varName().firstToUpperCase();
		mapOf(Tuple, sequenceOf(Tuple)) inputToOutputMapping = {};
		if(globalMap.containsKey(eltName)){
			inputToOutputMapping = globalMap.get(eltName);
		}		
		
        'package eu.qualimaster.${toIdentifier(topoName)}.topology;'
    	''
    	/****************************/
    	/*        Imports           */  
    	/****************************/     	
    	'import java.util.*;'
    	'import java.io.IOException;'
    	'import java.net.InetAddress;'
		'import java.net.UnknownHostException;'
    	'import org.apache.log4j.Logger;'
    	'import backtype.storm.tuple.*;'
    	'import backtype.storm.task.*;'
    	'import backtype.storm.topology.*;'
    	'import eu.qualimaster.common.signal.*;'
    	'import eu.qualimaster.base.algorithm.*;'
    	'import eu.qualimaster.dataManagement.strategies.*;'
    	'import eu.qualimaster.infrastructure.PipelineOptions;'
    	'import eu.qualimaster.events.EventManager;'
		'import eu.qualimaster.monitoring.events.AlgorithmChangedMonitoringEvent;' 
    	'import eu.qualimaster.data.inf.I${toIdentifier(snkName)};'
    	'import eu.qualimaster.data.inf.I${toIdentifier(snkName)}.*;'
    	'import eu.qualimaster.data.imp.${toIdentifier(snkName)};'
    	'import eu.qualimaster.data.imp.${toIdentifier(snkName)}.*;'
    	//'import $qualifiedClsName;'
		'import eu.qualimaster.dataManagement.strategies.*;'
		'import eu.qualimaster.dataManagement.DataManager;'
    	produceImportsFromLastElements(lastElt, lastElementMap, topoName);
    	if(newSwitchLog) {
			'import java.io.PrintWriter;'
			'import eu.qualimaster.common.logging.DataLogger;'
			'import java.util.Calendar;'
		}
		if(lastHasSubPipeline) {
			'import com.esotericsoftware.kryo.KryoException;'
    		'import eu.qualimaster.base.serializer.KryoSwitchTupleSerializer;'
			'import eu.qualimaster.base.serializer.KryoGeneralTupleSerializer;'
			'import eu.qualimaster.common.switching.*;'
			'import java.util.concurrent.ConcurrentLinkedQueue;'
			'import eu.qualimaster.common.signal.PortManager.*;'
			'import eu.qualimaster.common.signal.PortManager;'
		}
    	''
    	/****************************/
    	/*        Sink class        */  
    	/****************************/    	
    	'/**'
    	'* Defines the Sink class(GEN).'
    	'**/'
    	'@SuppressWarnings({ "rawtypes", "serial" })'
    	'public class $name extends ${baseClass(elt)} {'
    	''
		    	/****************************/
		    	/*     Class variables      */  
		    	/****************************/     	
    	'    final static Logger logger = Logger.getLogger($name.class);'    	
    	'    transient OutputCollector _collector;'
    	'    transient I${toIdentifier(snkName)} sinkHandler;'
    	'private int counter = 0;'
    	produceOutputVariable(dataSnk.output, inputToOutputMapping, nameToOutputMap, inputName);
    	produceInputVariable(dataSnk.output, true, inputName);
    	if(newSwitchLog){
				'private transient PrintWriter out = null;' | 4;
		}
			
		if(lastHasSubPipeline) {
			'private int port;' | 4;
    		'private static int QUEUE_SIZE = 100;' | 4;
    		'private transient TupleReceiverServer server = null;' | 4;
    		'private transient Queue<IGeneralTuple> queue = new ConcurrentLinkedQueue<IGeneralTuple>();//receiving tuples' | 4;
    		'private transient SynchronizedQueue<IGeneralTuple> syn = null;' | 4;
    	}
    	''
		    	/****************************/
		    	/*    Class constructor     */  
		    	/****************************/   		  	
    	'	public $name(String name, String namespace) {'
    	'        super(name, namespace, $genMonitoringProbes);'
    	'    }'
    	''
    	if(isReplay) {
    	//generate emitters 
    	produceEmitters(snkName, dataSnk.output);
    	
    	//register tuple handler
    	produceRegister(dataSnk);
    	}
    			/***********************************/
		    	/* sendAlgorithmChangeEvent method */  
		    	/***********************************/
    	''
		'    /**'
		'     * Sends an algorithm change event and considers whether the coordination layer shall be bypassed for direct' 
		'     * testing.'
		'     * @param algorithm the new algorithm'
		'     * @param causeMsgId the message id of the causing message (may be empty or null)'
		'     */'
		'    private void sendAlgorithmChangeEvent(String algorithm, String causeMsgId) {'
		'        EventManager.send(new AlgorithmChangedMonitoringEvent(getPipeline(), getName(), algorithm, causeMsgId));'
		'    }' 
		''   	
		    	/****************************/
		    	/*     execute method       */  
		    	/****************************/     
		if(lastHasSubPipeline) {
		'/**' | 4;
		' * A thread executes tuples.' | 4;
		' */' | 4;
		'public class ExecuteTuple implements Runnable {' | 4;
			'@Override' | 8;
    		'public void run() {' | 8;
				'while(true) {' | 12;
					'forwardTuple(syn.consume().getValue(0));' | 16;
				'}' | 12;
			'}' | 8;
		'}' | 4;
		}
		''
		'public void forwardTuple(Object tupleItem) {' | 4; 
			if(newSwitchLog) {
				'counter++;'
				'out.println(Calendar.getInstance().getTimeInMillis() + " , " + counter);'
				'out.flush();'
			}
	        if (genMonitoringProbes) {		
			'        startMonitoring();'
			}
			'        //for now, sink just emits the tuple that get from last familyelement'		
			 //produce input -- output casting statement
			produceInputForTuples(inputToOutputMapping, nameToOutputMap, elt);	
			if(debug) {	
			'        logger.info("Received data in Sink:" + tuple);'
			}
			if (genMonitoringProbes) {
			'        endMonitoring();'
			}			
		'}' | 4;	
		''
		'    @Override'
        if (loadShedding) {
		'    protected void doExecute(Tuple tuple) {'
		} else {
        '    public void execute(Tuple tuple) {'
		}
			'forwardTuple(tuple.getValue(0));' | 8;
			if(newSwitch) {
				'_collector.ack(tuple);' | 8;
			}
		'    }'
	    ''
		    	/****************************/
		    	/*     prepare method       */  
		    	/****************************/ 	    
		'    @Override'
		'    public void prepare(Map map, TopologyContext topologyContext, OutputCollector collector) {'
		'		super.prepare(map, topologyContext, collector);'
		'        _collector = collector;'
		if(newSwitchLog) {
					'String logDir = (String) map.get("LOG.DIRECTORY");' | 8;
        			'out = DataLogger.getPrintWriter(logDir + "sink.csv");' | 8;
        			'counter = 0;' | 8;
        	}
		if(!genInstance) {
			produceInputVariable(dataSnk.output, false, inputName);
		}
		registerSerializer(dataSnk.output, inputName);
		String ifName = "I${toIdentifier(snkName)}";
		'        try {'
		'            @SuppressWarnings("unchecked")'
		'            Class<? extends $ifName> cls = (Class<? extends $ifName>)Class.forName("$qualifiedClsName");'
		String strategyStr = obtainManagementStrategyInstance(dataSnk);		
		'			boolean autoConnect = "true".equals(map.get(Constants.CONFIG_KEY_SOURCE_AUTOCONNECT));'
		'			if(autoConnect) {'
        '            	sinkHandler = DataManager.DATA_SINK_MANAGER.createDataSink(getPipeline(), cls, $strategyStr);'
		'			} else {'
		'            	sinkHandler = cls.newInstance();'
		'			}'
		setDefaultParameterValue(dataSnk.parameters, "map", "sinkHandler", 12);
		'			if (!autoConnect) {'
		'		    	sinkHandler.connect();'
		'			}'	
		if (initByAdaptation) {
		'		    sendAlgorithmChangeEvent("$impClassName", null);'	
		}
		'        } catch (ClassNotFoundException e) {'
		'            e.printStackTrace();'
		'        } catch (InstantiationException e) {'
		'            e.printStackTrace();'
		'        } catch (IllegalAccessException e) {'
		'            e.printStackTrace();'
		'        } catch (ClassCastException e) {'
		'            e.printStackTrace();'
		'        }'			
        		
        	if(lastHasSubPipeline) {
			 	'queue = new ConcurrentLinkedQueue<IGeneralTuple>();' | 8;
			 	'syn = new SynchronizedQueue<IGeneralTuple>(queue, QUEUE_SIZE);' | 8;
    			'IGeneralTupleSerializerCreator serCreator = new KryoGeneralTupleSerializerCreator(map);' | 8;
    			'ITupleReceiveCreator creator = new TupleReceiverHandlerCreator(serCreator, syn);' | 8;
    			produceDynamicPortObtainment();
        		'server = new TupleReceiverServer(creator, port);' | 8;
        		'server.start();' | 8;
        		''
        		'Thread exeTupleThread = new Thread(new ExecuteTuple());' | 8;
        		'exeTupleThread.start();' | 8;
			}
			'initMonitor();' | 8;
			'logger.info("The end of the prepare method.");' | 8;
		'    }'
	    ''
	    //override the initial monitor
	    produceInitMonitor(true, 4);
	    ''
		    	/****************************/
		    	/*     cleanup method       */  
		    	/****************************/ 	    
	    '    @Override'
        '    public void cleanup() {'
        '        super.cleanup();'
        '		 sinkHandler.disconnect();'
        '    }'
        ''
				/************************************/
				/*   declareOutputFields method     */
				/************************************/         
		'    @Override'
		'    public void declareOutputFields(OutputFieldsDeclarer declarer) {'
		if(genMultiTupleTypes) {
			produceStreamIdDeclaration(elt, false, 8);
		} else {
		'        declarer.declareStream("$streamId", new Fields("sinkData"));'
		}
		'    }'
    	''
        '@Override' | 4;
        'public void notifyAlgorithmChange(AlgorithmChangeSignal signal) {' | 4;
        // don't just ignore this, relevant for figuring out when enactment is completed!
        '    sendAlgorithmChangeEvent(signal.getAlgorithm(), signal.getCauseMessageId());' | 4;
        '    super.notifyAlgorithmChange(signal);' | 4;
        '}'    	
    	
    			/********************************/
		    	/* notifyParameterChange method */  
		    	/********************************/    	       
        if(dataSnk.parameters.isConfigured()) {
			'@Override' | 4;
			'public void notifyParameterChange(ParameterChangeSignal signal) {' | 4;
			'for(int i = 0; i < signal.getChangeCount(); i++) {' | 8;
			'ParameterChange para = signal.getChange(i);' | 12;			
			'switch (para.getName()) {' | 12;
			sequenceOf(Parameter) parameters = dataSnk.parameters;
			for(Parameter p : parameters) {
				String paraName = p.name;
				String type = parameterTypeName(p);								
				'case "$paraName" :' | 16;
				Integer indent = 16;
				if(formatException(type)) {
					indent = 20;
					'try {' | indent;
				}
				'logger.info("Received the parameter $paraName!");' | indent+4;
				'sinkHandler.setParameter${paraName.firstToUpperCase()}(para.get${type.firstToUpperCase()}Value()); ' | indent+4;
				if(formatException(type)) {
					'} catch (ValueFormatException e) {' | indent;
						'e.printStackTrace();' | indent+4;
					'}' | indent;
				} else {
					indent = indent+4;
				}
				'break;' | indent;
				}
			'}' | 12;
			'}' | 8;
			'}' |4;		
		}
		''
		/********************************* */
    	/*******Prepare shut down signal** */
    	/********************************* */
    	'@Override' | 4;
    	'protected void prepareShutdown(ShutdownSignal signal) {' | 4;
        	'super.prepareShutdown(signal);' | 8;
        	'sinkHandler.disconnect();' | 8;
    	'}' | 4;
    	''
    	'}'
    }    
}