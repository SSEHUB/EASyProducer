import commonVTLMethods;
import commonPomMethods;
@advice(QM)
template pipelinePom(Configuration config, FileArtifact target, Pipeline pipeline, String repoURL, String interfaceArtifact, Boolean profiling, setOf(String) subPipNames) {
    Boolean isSubPipeline = false;
    setOf(DecisionVariable) flows = {};//collect the visited flows
    setOf(String) artifacts = {}; //mark visited artifacts
    def processElement(sequenceOf(DecisionVariable) output, setOf(String) nodes, Text text) {     	
        for(Flow v : output) { 
        	if(flows.excludes(v)) {
        		flows.add(v);
        		DecisionVariable elt = v.destination;  
				checkForPipelineNode(elt, nodes, text);          
	            processElement(elt.byName("output").variables(), nodes, text);
        	}
        } 
    }
	def checkForPipelineNode(DecisionVariable elt, setOf(String) nodes, Text text) {
		String nodeName = elt.varName();
        String nodeClsName = elt.varName().firstToUpperCase() + elt.type();
        if(elt.type() == "Source" and !isStringExisted(nodeName, nodes)) {               	
	        Source src =elt;
	        produceDependencies(src, text);
	    }
		if(elt.type() == "Sink" or elt.type() == "ReplaySink" and !isStringExisted(nodeName, nodes)) {
            Sink snk = elt;
            produceDependencies(snk, text);
        }
        if(elt.type() == "FamilyElement" and !isStringExisted(nodeName, nodes)) {
            FamilyElement fe = elt;
            produceDependencies(fe, text);
        }
        nodes.add(nodeName);		
	}
	def produceDependencies(Source source, Text text) {
	    produceDependencies(source.source, text, artifacts);
	}
	
	def produceDependencies(FamilyElement familyElt, Text text) {
        produceDependencies(familyElt.family, text, artifacts);
	}
	
	def produceDependencies(Sink snk, Text text) {
        produceDependencies(snk.sink, text, artifacts);
	}
	
	def appendPlugins(setOf(String) subPips, Text text) {
		if(!isSubPipeline) {
			text.append("            <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>2.3</version>
          <executions>
            <execution>
            <phase>package</phase>
            <goals>
                <goal>shade</goal>
            </goals>
            <configuration>
            <finalName>"+"$"+"{project.artifactId}-"+"$"+"{project.version}-jar-with-dependencies</finalName>
            <filters>\n");
            for(String a : subPipNames) {
            text.append("                <filter>
                    <artifact>eu.qualimaster:$a</artifact>
                    <excludes>
                      <exclude>mapping.xml</exclude>
                    </excludes>
                </filter>\n");
			}
            text.append("            </filters>
            </configuration>
              </execution>
          </executions>
        </plugin>\n");
		} else {
		text.append("            <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.6</version>\n");
		if(profiling) {
			text.append("            	<dependencies>
	                    <dependency>
	                        <groupId>eu.qualimaster</groupId>
	                        <artifactId>AlgorithmAssemblies</artifactId>
	                        <version>0.5.0-SNAPSHOT</version>
	                    </dependency>
	                </dependencies>\n");
        }
		text.append("					<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>\n");
		text.append("					<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<dependencySets>
						<dependencySet>
							<unpack>false</unpack>
							<scope>runtime</scope>
						</dependencySet>
						<dependencySet>
							<unpack>false</unpack>
							<scope>provided</scope>
						</dependencySet>
					</dependencySets>
					<archive>
						<manifest>
						</manifest>
					</archive>
				</configuration>\n");
		text.append("					</execution>\n");
		if(profiling) {
			text.append("				<execution>
                        <id>make-profilingAssembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>profiling</descriptorRef>
                            </descriptorRefs>
                        </configuration>
                    </execution>\n");
        }
            text.append("				</executions>
						</plugin>\n");
		}
			text.append("            <plugin>
				<artifactId>maven-install-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<createChecksum>true</createChecksum>
				</configuration>
			</plugin>\n");
            text.append("            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>              
            </plugin>\n");
            text.append("            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <useDefaultManifestFile>true</useDefaultManifestFile>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>TestFramework</mainClass>
						</manifest>
					</archive>
                </configuration>
            </plugin>\n");
            text.append("            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>\n");
            text.append("            <plugin>
		        <groupId>org.codehaus.mojo</groupId>
		        <artifactId>exec-maven-plugin</artifactId>
		        <version>1.3</version>
		        <executions>
		          <execution>
		            <goals>
		              <goal>exec</goal>
		            </goals>
		          </execution>
		        </executions>
		        <configuration>
		          <executable>java</executable>
		          <includeProjectDependencies>true</includeProjectDependencies>
		          <includePluginDependencies>false</includePluginDependencies>
		          <classpathScope>compile</classpathScope>
		          <mainClass>"+"$"+"{storm.topology}"+"</mainClass>
		        </configuration>
		    </plugin>\n");
      text.append("            <plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[2.0,)</versionRange>
										<goals>
											<goal>copy-dependencies</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>\n");
	}   
	
	def appendResources(Text text) {
		text.append("        <resource>
            <directory>"+"$"+"{basedir}/</directory>
            <filtering>false</filtering>
            <includes>
            <include>mapping.xml</include>
			<include>settings.xml</include>
            </includes>
        </resource>\n");        
	}
	
	def main(Configuration config, FileArtifact target, Pipeline pipeline, String repoURL, String interfaceArtifact, Boolean profiling, setOf(String) subPipNames) {
		if(pipeline.type() == "SubPipeline") {
			isSubPipeline = true;
		}
		//createPomTemplate(target);
		setOf(String) nodes = {};
		Text text = target.getText();		
		text.append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n");		
		text.append("  <modelVersion>4.0.0</modelVersion>\n");
		//get the artifact
		String artifact = pipeline.artifact;
		appendArtifact(artifact, text);		
		text.append("  <packaging>jar</packaging>\n");
		text.append("\n");
		text.append("  <properties>\n");
	    text.append("    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n");
	    text.append("  </properties>\n");
		text.append("  <repositories>\n");
		//text.append("    <repository>\n      <id>clojars.org</id>\n      <url>http://clojars.org/repo</url>\n    </repository>\n");
		appendRepositories(text, repoURL);
		text.append("  </repositories>\n");
		text.append("  <build>\n");
		text.append("    <sourceDirectory>"+"$"+"{basedir}/topology</sourceDirectory>\n");
		//text.append("    <pluginManagement>\n");
		text.append("        <plugins>\n");
		appendPlugins(subPipNames, text);
		text.append("        </plugins>\n");
		//text.append("    </pluginManagement>\n");
		text.append("    <resources>\n");
		appendResources(text);
		text.append("    </resources>\n");
		text.append("  </build>\n");
		text.append("\n");
		text.append("\n");
		appendDependencyManagement(text);
		text.append("  <dependencies>\n");
//		appendBasicInfrastructureDependencies(text); //for a fat jar
		if(profiling) {
			appendAlgorithmAssembiliesDependency(text);
		}
		appendQmInfrastructureDependencies(text);
		appendInterfaceDependency(interfaceArtifact, text);
		appendCommonDependencies(text);
		for(DecisionVariable v : pipeline.sources) { 
	        checkForPipelineNode(v, nodes, text);
	        processElement(v.byName("output").variables(), nodes, text);
	    }	
	    if(isSubPipeline) {
	    	SubPipeline subPip = pipeline;
		    for(DecisionVariable v : subPip.connectors) {//considering the connectors from subpipeline
				checkForPipelineNode(v, nodes, text);
		    	processElement(v.byName("output").variables(), nodes, text);
		    }
	    }					
		text.append("  </dependencies>\n");
		text.append("</project>\n");
		target.rename("pom.xml");							
	}
}