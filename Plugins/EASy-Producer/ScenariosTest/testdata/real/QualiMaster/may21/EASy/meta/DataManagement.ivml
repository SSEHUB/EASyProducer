project DataManagement {

	import Basics;
	import Observables;

	annotate BindingTime bindingTime = BindingTime.compile to DataManagement;
	annotate Boolean userVisible = true to DataManagement;

	enum DataManagementStrategy {None, FirstInFirstOut, LeastFrequentlyUsed, LeastRecentlyUsed, LeastFrequentlyRecentlyUsed};

	compound DataElement {
		NonEmptyString name;
		Description description;
		ArtifactString artifact;
		NonEmptyString storageLocation;
		DataManagementStrategy strategy;
		OptionalNaturalNumber timeLine;
		OptionalNaturalNumber cutoffCapacity;

		Constraint strategyAssigned = isDefined(strategy); 
		Constraint strategyC1 = strategy == DataManagementStrategy.LeastFrequentlyUsed or strategy == DataManagementStrategy.LeastFrequentlyRecentlyUsed implies cutoffCapacity > 0;
		Constraint strategyC2 = strategy == DataManagementStrategy.LeastRecentlyUsed or strategy == DataManagementStrategy.LeastFrequentlyRecentlyUsed implies timeLine > 0;
		Constraint strategyC3 = strategy == DataManagementStrategy.None or strategy == DataManagementStrategy.FirstInFirstOut implies timeLine == 0 and cutoffCapacity == 0;
	}
	
	compound DataSource refines DataElement {
		Tuples input;
		Parameters parameters;
		ClassString sourceCls;
        Boolean supportsHadoop = false;
		setOf(Constraint) constraints;
		Integer aggregationFrequency = 60000;
		Constraint aggregationFrequencyConstraint = 500 <= aggregationFrequency and aggregationFrequency < 1800000; 
		Constraint hadoopInputOk = supportsHadoop implies input.size() > 0 and input[0].fields.size() == 2;
		assign(userVisible = false) to {
			Boolean profilingSource = false;
		}
		// runtime observables
		assign(bindingTime = BindingTime.runtimeMon) to {
			Velocity velocity;
			Volume volume;
			Volatility volatility;
			Accuracy_Confidence accuracyConfidence;
			Completeness completeness;
			Integer aggregationFreq = aggregationFrequency;
			
			Boolean isValid = true;
		} 
	}
	
	sequenceOf(refTo(DataSource)) dataSources;
	Constraint sourceNamesUnique = not (hasDuplicates(dataSources->collect(s|s.name)));
	compound DataSink refines DataElement {		
		Tuples output;
		Parameters parameters;
		ClassString sinkCls;
        Boolean supportsHadoop = false;
        Constraint hadoopOutputOk = supportsHadoop implies output.size() > 0 and output[0].fields.size() == 2;
		setOf(Constraint) constraints;
		// runtime observables
		assign(bindingTime = BindingTime.runtimeMon) to {
			Velocity velocity;
			Volume volume;
			Accuracy_Confidence accuracyConfidence;
			//MPVolatility mpVolatility;
			Boolean isValid = true;
		} 
	}	
 
	sequenceOf(refTo(DataSink)) dataSinks;
	Constraint sinkNamesUnique = not (hasDuplicates(dataSinks->collect(s|s.name)));
	compound PersistentDataElement refines DataElement{
	}
	
	sequenceOf(refTo(PersistentDataElement)) persistentDataElements;
}
