import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaType(Configuration config, FileArtifact target, RecordType type, String pkg) {

    // generates code for the individual attributes
    def attributes(RecordType type) {
        for (Field f: type.fields) {
            'private ${toTypeName(f.type)} ${asIdentifier(f.name)};\n'
        }
    }

    // generates code for shallow copy of all fields (shallow for now)
    def copy(RecordType type, String sourceVariable) {
        for (Field f: type.fields) {
            'this.${asIdentifier(f.name)} = ${sourceVariable}.${asIdentifier(f.name)};'
        }
    }
    
    // generates code for the getters
    def getters(RecordType type) {
        for (Field f: type.fields) {
            '/**
              * Returns the value of {@code ${asIdentifier(f.name)}}.
              * 
              * @return the value
              */
             public ${toTypeName(f.type)} get${asMethodNameSuffix(f.name)}() {
                 return ${asIdentifier(f.name)};
             }\n'
        }
    }

    // generates code for the setters
    def setters(RecordType type) {
        for (Field f: type.fields) {
            '/**
              * Changes the value of {@code ${asIdentifier(f.name)}}.
              * 
              * @param value the new value
              */
             public void set${asMethodNameSuffix(f.name)}(${toTypeName(f.type)} value) {
                 this.${asIdentifier(f.name)} = value;
             }\n'
        }
    }

    def main(Configuration config, FileArtifact target, RecordType type, String pkg) {
        String clsName = asTypeName(type.name);
        'package ${pkg};

        /**
         * Implementation of the application data type ${clsName}.
         * Generated by: EASy-Producer.
         */
        public class ${clsName} {
         
            ${attributes(type)}

            /**
             * Default constructor. Fields are pre-allocated with default Java values.
             */
            public ${clsName}() {
            }

            /**
             * Copy constructor.
             * 
             * @param from the instance to copy the values from
             */
            public ${clsName}(${clsName} from) {
                ${copy(type, "from")}
            }

            ${getters(type)}
            
            ${setters(type)}

        }'
    }
    
}
