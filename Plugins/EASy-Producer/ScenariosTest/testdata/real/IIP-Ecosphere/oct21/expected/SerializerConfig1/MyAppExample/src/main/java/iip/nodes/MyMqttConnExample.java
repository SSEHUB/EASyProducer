package iip.nodes;

import java.io.IOException;
import java.util.function.*;
import javax.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.stereotype.Component;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;
import de.iip_ecosphere.platform.transport.serialization.*;
import de.iip_ecosphere.platform.transport.connectors.ReceptionCallback;
import de.iip_ecosphere.platform.transport.spring.SerializerMessageConverter;
import de.iip_ecosphere.platform.services.environment.*;
import de.iip_ecosphere.platform.services.environment.spring.Starter;
import de.iip_ecosphere.platform.services.environment.spring.metricsProvider.MetricsProvider;
import de.iip_ecosphere.platform.connectors.ConnectorParameter;
import de.iip_ecosphere.platform.connectors.types.*;
import iip.datatypes.*;
import iip.interfaces.*;
import iip.stubs.*;

/**
 * Spring Cloud Stream service frame for net node 'myMqttConnExample'.
 * Generated by: EASy-Producer.
 */
@Component
@EnableScheduling
public class MyMqttConnExample {

    @Autowired
    private StreamBridge streamBridge;
    private ConnectorServiceWrapper<byte[],byte[],String,String> service;
    // so far plain delegation, preparation but so far no support for service switching
    @Autowired
    @SuppressWarnings("unused")
    private MetricsProvider metrics;

    /**
     * Creates an instance.
     */
    public MyMqttConnExample() {
        ChannelTranslatingProtocolAdapter<byte[],byte[],String,String> adapter = new ChannelTranslatingProtocolAdapter<byte[],byte[],String,String>(
            "OUT", new ConnectorOutputTypeAdapter<String>(SerializerRegistry.getSerializer(String.class)), 
            "IN", new ConnectorInputTypeAdapter<String>(SerializerRegistry.getSerializer(String.class)));
                de.iip_ecosphere.platform.connectors.mqttv3.PahoMqttv3Connector<String,String> conn = new de.iip_ecosphere.platform.connectors.mqttv3.PahoMqttv3Connector<>(adapter);
                YamlService serviceData = YamlArtifact.readFromYamlSafe(MyMqttConnExample.class
                    .getResourceAsStream("/deployment.yml")).getServiceSafe("myMqttConn"); 
                service = new ConnectorServiceWrapper<byte[],byte[],String,String>(serviceData, conn, 
                    () -> createConnectorParameter());
                service.setReceptionCallback(new ConnectorReceptionCallback());
                Starter.mapService(service);
    }

    /**
    * Called when data arrived that shall be passed on to the connector.
    *
    * @return the data consumer functor
    */
    @Bean
    public Consumer<String> createString_myMqttConn() {
        return data -> service.send(data);
    }
    /**
    * Creates the connector parameter instance.
    *
    * @return the instance to be passed to the connector
    */
    private ConnectorParameter createConnectorParameter() {
        return ConnectorParameter.ConnectorParameterBuilder
            .newBuilder("localhost", 4321)
            .setApplicationInformation("myApp", "")
            .build();
    }

    /**
     * Attaches the ingestors.
     */
    @PostConstruct 
    public void attachIngestors() {    }
    
    private class ConnectorReceptionCallback implements ReceptionCallback<String> {
    
        @Override
        public void received(String data) {
            streamBridge.send("createString_myMqttConn", data);
        }
    
        @Override
        public Class<String> getType() {
            return String.class;
        }
            
    }
}
