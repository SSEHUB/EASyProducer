package iip.nodes;

import java.io.IOException;
import java.util.*;
import java.util.function.*;
import static de.iip_ecosphere.platform.support.function.IOVoidFunction.optional;
import de.iip_ecosphere.platform.support.function.*;
import de.iip_ecosphere.platform.transport.serialization.*;
import de.iip_ecosphere.platform.connectors.parser.InputParser.InputConverter;
import de.iip_ecosphere.platform.connectors.parser.InputParser.ParseResult;
import de.iip_ecosphere.platform.connectors.parser.*;
import de.iip_ecosphere.platform.connectors.formatter.OutputFormatter.OutputConverter;
import de.iip_ecosphere.platform.connectors.formatter.*;
import de.iip_ecosphere.platform.connectors.types.ChanneledConnectorOutputTypeAdapter.ChanneledSerializer;        
import iip.datatypes.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;

/**
 * Parser/formatter connector serializer for MyConnPltfOut.
 * Generated by: EASy-Producer.
 */
public class MyMqttConnExampleFormatterSerializer implements ChanneledSerializer<MyConnPltfOut> {

    private TextLineFormatter formatter;
    private Map<String, Integer> mapping;
    private Supplier<String> pathSupplier;
    
    public MyMqttConnExampleFormatterSerializer(String encoding, Map<String, Integer> mapping, Supplier<String> pathSupplier) {
        this.mapping = mapping;
        this.pathSupplier = pathSupplier;
        formatter = (TextLineFormatter) FormatterUtils.createInstance(
            MyMqttConnExampleFormatterSerializer.class.getClassLoader(), "TextLineFormatter", encoding);
    }

    @Override             
    public MyConnPltfOut from(String channel, byte[] data) throws IOException {
        final String path = pathSupplier == null ? "" : pathSupplier.get();
        return null;
    }

    @Override    
    public byte[] to(MyConnPltfOut source) throws IOException {
        final String path = pathSupplier == null ? "" : pathSupplier.get();
        TextLineFormatter.TextLineFormatterConverter outConverter = formatter.getConverter();
        formatter.add(path + "cmdField", outConverter.fromString(source.getCmdField()));
        
        formatter.startArrayStructure("nested");
        formatter.startObjectStructure(null);
        MyNested[] array1 = source.getNested();
        for (int i = 0; i < array1.length; i++) {
            formatter.add(path + "state", outConverter.fromString(array1[i].getState()));
            
        }
        formatter.endStructure();
        formatter.endStructure();
        return formatter.chunkCompleted();
    }

    @Override
    public MyConnPltfOut clone(MyConnPltfOut origin) throws IOException {
        return new MyConnPltfOutImpl(origin);
    }

    @Override
    public Class<MyConnPltfOut> getType() {
        return MyConnPltfOut.class;
    }

}

