package iip;

import java.util.*;
import de.iip_ecosphere.platform.services.environment.Service;
import de.iip_ecosphere.platform.services.environment.YamlArtifact;
import de.iip_ecosphere.platform.transport.serialization.*;
import de.iip_ecosphere.platform.transport.spring.SerializerMessageConverter;
import org.springframework.core.env.Environment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.converter.MessageConverter;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Bean;

/**
 * Service artifact starter.
 * Generated by: EASy-Producer.
 */
@SpringBootApplication
@ComponentScan({"iip.nodes", "de.iip_ecosphere.platform.services.environment.spring", "de.iip_ecosphere.platform.transport.spring"})
public class Starter extends de.iip_ecosphere.platform.services.environment.spring.Starter {

    /**
    * Creates an instance.
    * 
    * @param environment the Spring environment
    */
    @Autowired
    public Starter(Environment environment) {
        super(environment);
    }
    
    @Override
    protected List<Service> createServices(YamlArtifact artifact) {
        return null; // services do register themselves
    }
    
    /**
    * Creates a custom message converter and binds it against "application/iip".
    * 
    * @return the custom message converter
    */
    @Bean
    public MessageConverter customMessageConverter() {
        return new SerializerMessageConverter();
    }

    /**
    * Registers required, generated serializers.
    */
    public static void registerSerializers() {
        SerializerRegistry.registerSerializer(iip.serializers.AvaMqttOutputImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.AvaMqttOutputSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MipMqttInputImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MipMqttInputSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MipMqttOutputImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MipMqttOutputSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyConnMachineInImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyConnMachineInSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyConnMachineOutImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyConnMachineOutSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyConnPltfInImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyConnPltfInSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyConnPltfOutImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyConnPltfOutSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyNestedImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.MyNestedSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.Rec1ImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.Rec1Serializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.RtsaTestInputImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.RtsaTestInputSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.RtsaTestOutputImplSerializer.class);
        SerializerRegistry.registerSerializer(iip.serializers.RtsaTestOutputSerializer.class);
    }

    /**
     * Starts the service chain.
     *
     * @param args command line arguments
     */        
    public static void main(String[] args) {
        registerSerializers();
        main(iip.Starter.class, args);
    }

}

