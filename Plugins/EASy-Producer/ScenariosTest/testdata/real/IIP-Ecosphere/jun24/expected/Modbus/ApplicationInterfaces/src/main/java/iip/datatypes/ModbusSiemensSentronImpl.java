package iip.datatypes;

import iip.datatypes.ModbusSiemensSentron;
import de.iip_ecosphere.platform.support.iip_aas.ConfiguredName;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Implementation of the application data type ModbusSiemensSentron.
 * Generated by: EASy-Producer.
 */
@ConfiguredName("ModbusSiemensSentron")
public class ModbusSiemensSentronImpl implements ModbusSiemensSentron {
 
    @JsonProperty("DisplayContrast")
    @ConfiguredName("DisplayContrast")
    private long DisplayContrast;
    
    @JsonProperty("DisplayBrightness")
    @ConfiguredName("DisplayBrightness")
    private long DisplayBrightness;
    
    @JsonProperty("BrightnessDuration")
    @ConfiguredName("BrightnessDuration")
    private long BrightnessDuration;
    
    @JsonProperty("Frequency")
    @ConfiguredName("Frequency")
    private float Frequency;
    
    @JsonProperty("VoltageL1N")
    @ConfiguredName("VoltageL1N")
    private float VoltageL1N;
    
    @JsonProperty("CurrentL1")
    @ConfiguredName("CurrentL1")
    private float CurrentL1;
    

    /**
     * Default constructor. Fields are pre-allocated with default Java values.
     */
    public ModbusSiemensSentronImpl() {
    }
    
    /**
     * Copy constructor.
     * 
     * @param from the instance to copy the values from
     */
    public ModbusSiemensSentronImpl(ModbusSiemensSentron from) {
        this.DisplayContrast = from.getDisplayContrast();
        this.DisplayBrightness = from.getDisplayBrightness();
        this.BrightnessDuration = from.getBrightnessDuration();
        this.Frequency = from.getFrequency();
        this.VoltageL1N = from.getVoltageL1N();
        this.CurrentL1 = from.getCurrentL1();
    }

    @Override
    @JsonIgnore
    public long getDisplayContrast() {
    
        return DisplayContrast;
    }
    
    @Override
    @JsonIgnore
    public long getDisplayBrightness() {
    
        return DisplayBrightness;
    }
    
    @Override
    @JsonIgnore
    public long getBrightnessDuration() {
    
        return BrightnessDuration;
    }
    
    @Override
    @JsonIgnore
    public float getFrequency() {
    
        return Frequency;
    }
    
    @Override
    @JsonIgnore
    public float getVoltageL1N() {
    
        return VoltageL1N;
    }
    
    @Override
    @JsonIgnore
    public float getCurrentL1() {
    
        return CurrentL1;
    }
    
    
    @Override
    @JsonIgnore
    public void setDisplayContrast(long value) {
    
        this.DisplayContrast = value;
    }
    
    @Override
    @JsonIgnore
    public void setDisplayBrightness(long value) {
    
        this.DisplayBrightness = value;
    }
    
    @Override
    @JsonIgnore
    public void setBrightnessDuration(long value) {
    
        this.BrightnessDuration = value;
    }
    
    @Override
    @JsonIgnore
    public void setFrequency(float value) {
    
        this.Frequency = value;
    }
    
    @Override
    @JsonIgnore
    public void setVoltageL1N(float value) {
    
        this.VoltageL1N = value;
    }
    
    @Override
    @JsonIgnore
    public void setCurrentL1(float value) {
    
        this.CurrentL1 = value;
    }
    

    @Override
    public int hashCode() {
        int hc = 0;
        hc += Long.hashCode(getDisplayContrast());
        hc += Long.hashCode(getDisplayBrightness());
        hc += Long.hashCode(getBrightnessDuration());
        hc += Float.hashCode(getFrequency());
        hc += Float.hashCode(getVoltageL1N());
        hc += Float.hashCode(getCurrentL1());
        return hc;
    }
    
    @Override
    public boolean equals(Object other) {
        boolean eq;
        if (other instanceof ModbusSiemensSentron) {
            ModbusSiemensSentron oth = (ModbusSiemensSentron) other;
            eq = true;
            eq &= getDisplayContrast() == oth.getDisplayContrast();
            eq &= getDisplayBrightness() == oth.getDisplayBrightness();
            eq &= getBrightnessDuration() == oth.getBrightnessDuration();
            eq &= getFrequency() == oth.getFrequency();
            eq &= getVoltageL1N() == oth.getVoltageL1N();
            eq &= getCurrentL1() == oth.getCurrentL1();
        } else {
            eq = false;
        }
        return eq;
    }
    
    @Override
    public String toString() {
        return org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(this, 
            de.iip_ecosphere.platform.services.environment.IipStringStyle.SHORT_STRING_STYLE);
    }

}
