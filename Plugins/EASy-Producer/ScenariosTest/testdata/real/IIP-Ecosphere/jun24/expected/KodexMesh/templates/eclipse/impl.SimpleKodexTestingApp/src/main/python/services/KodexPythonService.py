import iip.Registry
from Version import Version
from Service import ServiceState
from Service import ServiceKind
from datatypes.KRec13Anon import KRec13Anon
from datatypes.KRec13AnonImpl import KRec13AnonImpl
from interfaces.KodexPythonServiceInterface import KodexPythonServiceInterface

"""Do not utilise global code here. Place the needed function in the start / end methods.
   Add methods needed to be run on the start of a service in the start or end methods NOT in init()"""

class KodexPythonService(KodexPythonServiceInterface):
    """Template service implementation for KodexPythonService
       Generated by: EASy-Producer."""
    
    def __init__(self):
        """Initializes the service.""" 
        super().__init__()
        

    def start(self):
        """Called when the server shall start.
        """
        #code for set state to STARTING
        pass

    def stop(self):
        """Called when the server shall stop.
        """

        #code for set state to STOPPING
        pass
    def notifyReconfigured(self, values: dict):
        """Called to inform the implementing class that a parameter reconfiguration happened.
           
           Parameters:
             - values -- the new param names/values
           """ 
        # if you want to react on parameter changes, you may add code here
        # if you are not interested in parameter changes, feel free to delete this method
        pass
    
    def transformKRec13AnonKRec13Anon(self, data: KRec13Anon) -> KRec13Anon:
        """Synchronous data processing method.
    
        Parameters:
          - data -- the data to process
        Returns:
          the processed data              
        """
        result = KRec13AnonImpl()
        #TODO add your code here
        return result
    
    

#registers itself
KodexPythonService()
