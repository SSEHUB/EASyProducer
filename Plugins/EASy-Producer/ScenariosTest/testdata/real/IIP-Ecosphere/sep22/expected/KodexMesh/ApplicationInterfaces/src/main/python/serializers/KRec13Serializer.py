from json import JSONEncoder
import json
from datetime import datetime
from iip.TypeTranslatorToString import TypeTranslatorToString
import Registry
from datatypes.KRec13 import KRec13
from datatypes.KRec13Impl import KRec13Impl

class KRec13Encoder(JSONEncoder):
    """JSON encoder class for KRec13.
    Generated by: EASy-Producer."""

    def default(self, o):
        """Provides access to the attributes in o.
        
        Parameters:
          - o -- the object to serialize
        Returns:
          dict
            the attributes
        """
        return o.__dict__
    

class KRec13Serializer(TypeTranslatorToString):
    """JSON transport serializer for KRec13.
       Generated by: EASy-Producer."""
                
    def __init__(self):
        """Initializes the transformer.""" 
        Registry.serializers["KRec13"] = self
        Registry.types[KRec13] = "KRec13"
        Registry.serializers["KRec13Impl"] = self # there is a serializer for the Impl
        Registry.types[KRec13Impl] = "KRec13" # the Impl maps back to the type name
    
    def readFrom(self, data: str) -> KRec13:
        """Turns bytes into a String.
        
        Parameters:
          - data -- the data string
        Returns:
          object
            the deserialized object
        """
    
        result = KRec13Impl()
        result.__dict__ = json.loads(data)
        return result

    def writeTo(self, source: KRec13) -> str:
        """Turns an object into a String.
        
        Parameters:
          - source -- the object
        Returns:
          bytes
            the serialized data string
        """
        
        return KRec13Encoder().encode(source).encode("UTF-8").decode()
        
KRec13Serializer()
