from json import JSONEncoder
import json
from datetime import datetime
from iip.TypeTranslatorToString import TypeTranslatorToString
import Registry
from datatypes.TestType import TestType
from datatypes.TestTypeImpl import TestTypeImpl

class TestTypeEncoder(JSONEncoder):
    """JSON encoder class for TestType.
    Generated by: EASy-Producer."""

    def default(self, o):
        """Provides access to the attributes in o.
        
        Parameters:
          - o -- the object to serialize
        Returns:
          dict
            the attributes
        """
        return o.__dict__
    

class TestTypeSerializer(TypeTranslatorToString):
    """JSON transport serializer for TestType.
       Generated by: EASy-Producer."""
                
    def __init__(self):
        """Initializes the transformer.""" 
        Registry.serializers["TestType"] = self
        Registry.types[TestType] = "TestType"
    
    def readFrom(self, data: str) -> TestType:
        """Turns bytes into a String.
        
        Parameters:
          - data -- the data string
        Returns:
          object
            the deserialized object
        """
    
        result = TestType()
        result.__dict__ = json.loads(data)
        return result

    def writeTo(self, source: TestType) -> str:
        """Turns an object into a String.
        
        Parameters:
          - source -- the object
        Returns:
          bytes
            the serialized data string
        """
        
        return TestTypeEncoder().encode(source).encode("UTF-8").decode()
        
TestTypeSerializer()
