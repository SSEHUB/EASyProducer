from iip.AbstractService import AbstractService
import Registry
from iip.Version import Version
from iip.Service import ServiceState
from iip.Service import ServiceKind
from datatypes.KRec13Anon import KRec13Anon

class KodexPythonServiceInterface(AbstractService):
    """Partially implemented service interface for "Kodex Python Service"
       Generated by: EASy-Producer."""
    
    ingestor = None
    
    def __init__(self):
        """Initializes the service.""" 
        super().__init__("KodexPythonService", "Kodex Python Service", Version("0.1.0"), "", True, ServiceKind.TRANSFORMATION_SERVICE)
        Registry.services['KodexPythonService'] = self
        self.registerMethods()
        
    def attachIngestor(self, ingestor):
        """Called by ServiceEnvironment to attach an individual type-generic ingestor, i.e., a function 
           that allows to asynchronously ingest result data back into stream processing. The ingestor
           cares for the type and the target stream.
           
           Parameters:
             - ingestor -- the ingestor function
           """ 
        self.ingestor = ingestor

    def ingest(self, data):
        """Ingests result data asynchronously into stream processing. Target stream and data type are 
           handled by the ingestor.
           
           Parameters:
             - data -- the data to ingest; if the type is unknown/no type translator registered, nothing will happen
           """ 
        if self.ingestor is not None:
            self.ingestor(data)
    
    def transformKRec13Anon(self, data: KRec13Anon) -> KRec13Anon:
        """Synchronous data processing/transformation method.
    
        Parameters:
          - data -- the data to process
        Returns:
          the processed data              
        """
        raise NotImplementedError
    
    
    def registerMethods(self):
        Registry.syncTransformers['KodexPythonService_KRec13Anon'] = self.transformKRec13Anon
