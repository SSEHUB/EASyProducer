package iip.nodes;

import java.io.IOException;
import java.util.*;
import static de.iip_ecosphere.platform.support.function.IOVoidFunction.optional;
import de.iip_ecosphere.platform.support.function.*;
import de.iip_ecosphere.platform.transport.serialization.*;
import de.iip_ecosphere.platform.connectors.parser.InputParser.InputConverter;
import de.iip_ecosphere.platform.connectors.parser.InputParser.ParseResult;
import de.iip_ecosphere.platform.connectors.parser.*;
import de.iip_ecosphere.platform.connectors.formatter.OutputFormatter.OutputConverter;
import de.iip_ecosphere.platform.connectors.formatter.*;
import iip.datatypes.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;

/**
 * Parser/formatter connector serializer for String.
 * Generated by: EASy-Producer.
 */
public class MyMqttConnExampleFormatterSerializer implements Serializer<String> {

    private TextLineFormatter formatter;
    private Map<String, Integer> mapping;
    
    public MyMqttConnExampleFormatterSerializer(String encoding, Map<String, Integer> mapping) {
        this.mapping = mapping;
        formatter = (TextLineFormatter) FormatterUtils.createInstance(
            MyMqttConnExampleFormatterSerializer.class.getClassLoader(), "TextLineFormatter", encoding);
    }

    @Override             
    public String from(byte[] data) throws IOException {
        return null;
    }

    @Override    
    public byte[] to(String source) throws IOException {
        TextLineFormatter.TextLineFormatterConverter outConverter = formatter.getConverter();
        formatter.add("", outConverter.fromString(source));
        return formatter.chunkCompleted();
    }

    @Override
    public String clone(String origin) throws IOException {
        return new String(origin);
    }

    @Override
    public Class<String> getType() {
        return String.class;
    }

}

