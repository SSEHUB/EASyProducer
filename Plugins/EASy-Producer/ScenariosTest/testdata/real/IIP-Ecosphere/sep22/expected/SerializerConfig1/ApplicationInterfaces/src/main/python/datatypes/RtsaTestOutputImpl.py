from datatypes.RtsaTestOutput import RtsaTestOutput

from datetime import datetime

class RtsaTestOutputImpl(RtsaTestOutput):
    """Implementation of the application data type RtsaTestOutput. 
       Generated by: EASy-Producer."""
 
    id: int
    value1: float
    value2: float
    confidence: float
    prediction: bool
    
    def getId(self) -> int:
        """Returns the value of {@code id}.
        
           Returns:
             - the value of id"""
        return self.id
    
    def getValue1(self) -> float:
        """Returns the value of {@code value1}.
        
           Returns:
             - the value of value1"""
        return self.value1
    
    def getValue2(self) -> float:
        """Returns the value of {@code value2}.
        
           Returns:
             - the value of value2"""
        return self.value2
    
    def getConfidence(self) -> float:
        """Returns the value of {@code confidence}.
        
           Returns:
             - the value of confidence"""
        return self.confidence
    
    def getPrediction(self) -> bool:
        """Returns the value of {@code prediction}.
        
           Returns:
             - the value of prediction"""
        return self.prediction
    
    
    def setId(self, v):
        """Changes the value of {@code id}.
        
           Parameters:
             - v -- the new value of id, may be of type int or the corresponding numpy type"""
        if ("numpy" in str(type(v))):
           self.id = v.item()
        else:
           self.id = v
    
    def setValue1(self, v):
        """Changes the value of {@code value1}.
        
           Parameters:
             - v -- the new value of value1, may be of type float or the corresponding numpy type"""
        if ("numpy" in str(type(v))):
           self.value1 = v.item()
        else:
           self.value1 = v
    
    def setValue2(self, v):
        """Changes the value of {@code value2}.
        
           Parameters:
             - v -- the new value of value2, may be of type float or the corresponding numpy type"""
        if ("numpy" in str(type(v))):
           self.value2 = v.item()
        else:
           self.value2 = v
    
    def setConfidence(self, v):
        """Changes the value of {@code confidence}.
        
           Parameters:
             - v -- the new value of confidence, may be of type float or the corresponding numpy type"""
        if ("numpy" in str(type(v))):
           self.confidence = v.item()
        else:
           self.confidence = v
    
    def setPrediction(self, v: bool):
        """Changes the value of {@code prediction}.
        
           Parameters:
             - v -- the new value of prediction"""
        if ("numpy" in str(type(v))):
           self.prediction = v.item()
        else:
           self.prediction = v
    
