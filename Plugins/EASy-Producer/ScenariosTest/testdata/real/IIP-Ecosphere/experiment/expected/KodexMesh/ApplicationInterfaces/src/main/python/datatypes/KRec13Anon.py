
from datetime import datetime
from decimal import Decimal

class KRec13Anon:
    """Interface of the application data type KRec13Anon. 
       Generated by: EASy-Producer."""
 
    
    def getKip(self) -> str:
        """Returns the value of {@code kip}.
        
           Returns:
             - the value of kip"""
        raise NotImplementedError
    
    def getIntField(self) -> int:
        """Returns the value of {@code intField}.
        
           Returns:
             - the value of intField"""
        raise NotImplementedError
    
    def getStringField(self) -> str:
        """Returns the value of {@code stringField}.
        
           Returns:
             - the value of stringField"""
        raise NotImplementedError
    
    
    def setKip(self, v: str):
        """Changes the value of {@code kip}.
        
           Parameters:
             - v -- the new value of kip"""
        raise NotImplementedError
    
    def setIntField(self, v):
        """Changes the value of {@code intField}.
        
           Parameters:
             - v -- the new value of intField, may be of type int or the corresponding numpy type"""
        raise NotImplementedError
    
    def setStringField(self, v: str):
        """Changes the value of {@code stringField}.
        
           Parameters:
             - v -- the new value of stringField"""
        raise NotImplementedError
    
    
    #Indeed, there are 2.4 decorators for this, but for now we want to have all here: pythonic field access
    #backed by getter/setter and the ability to replace data classes by e.g. projecting or data enhancing
    #functionality (original idea of the "interfaces" with similar naming as in Java. It may be that the 
    #interfaces become superfluous due to the properties, but let's leave them in for now.
    kip = property(getKip, setKip)
    intField = property(getIntField, setIntField)
    stringField = property(getStringField, setStringField)
    
