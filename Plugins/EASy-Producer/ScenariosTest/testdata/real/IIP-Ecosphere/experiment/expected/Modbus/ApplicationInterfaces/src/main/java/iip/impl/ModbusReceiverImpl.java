package iip.impl;

import java.util.*;
import java.util.concurrent.ExecutionException;
import java.io.InputStream;
import de.iip_ecosphere.platform.transport.serialization.TypeTranslators;
import de.iip_ecosphere.platform.services.environment.*;
import iip.datatypes.*;
import iip.interfaces.*;

/**
 * IIP-Ecosphere supporting service implementation for 'Modbus Receiver'.
 * Generated by: EASy-Producer.
 */
public abstract class ModbusReceiverImpl extends DefaultServiceImpl implements ModbusReceiverInterface {
    private Map<String, ParameterConfigurer<?>> paramConfigurers = new HashMap<>();

    /**
     * Fallback constructor setting most fields to "empty" default values.
     * 
     * @param kind the service kind
     */
    protected ModbusReceiverImpl(ServiceKind kind) {
        super(kind);
        registerParameterConfigurers();
    }

    /**
     * Fallback constructor setting most fields to "empty" default values.
     * 
     * @param id the id of the service
     * @param kind the service kind
     */
    protected ModbusReceiverImpl(String id, ServiceKind kind) {
        super(id, kind);
        registerParameterConfigurers();
    }

    /**
    * Creates a service instance from YAML information.
    * 
    * @param yaml the service information as read from YAML
    */
    protected ModbusReceiverImpl(YamlService yaml) {
        super(yaml);
        registerParameterConfigurers();
    }
    
    /**
    * Creates a service instance from a service id and a YAML artifact.
    * 
    * @param serviceId the service id
    * @param ymlFile the YML file containing the YAML artifact with the service descriptor
    */
    protected ModbusReceiverImpl(String serviceId, InputStream ymlFile) {
        super(serviceId, ymlFile);
        registerParameterConfigurers();
    }
    
    @Override
    public ParameterConfigurer<?> getParameterConfigurer(String paramName) {
        return paramConfigurers.get(paramName);
    }
    
    @Override
    public Set<String> getParameterNames() {
        return paramConfigurers.keySet();
    }
    
    /**
    * Registers the configurers.
    */
    protected void registerParameterConfigurers() {            }
                        
}
