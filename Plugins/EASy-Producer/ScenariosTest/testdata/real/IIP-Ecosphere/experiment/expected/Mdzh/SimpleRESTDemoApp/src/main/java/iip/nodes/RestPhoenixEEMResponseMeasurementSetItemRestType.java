package iip.nodes;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import de.iip_ecosphere.platform.connectors.rest.Convertable;

import iip.datatypes.RestPhoenixEEMResponseMeasurementSetItem;
import iip.datatypes.RestPhoenixEEMResponseMeasurementSetItemImpl;

/**
 * Rest type for the application data type RestPhoenixEEMResponseMeasurementSetItem.
 * Generated by: EASy-Producer.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class RestPhoenixEEMResponseMeasurementSetItemRestType implements Convertable {

    @JsonProperty("href")
    private String href;
    @JsonProperty("id")
    private String id;
    @JsonProperty("name")
    private String name;
    @JsonProperty("value")
    private Object value;
    @JsonProperty("unit")
    private String unit;
    @JsonProperty("description")
    private String description;

    /**
     * Default constructor. Fields are pre-allocated with default Java values.
     */
    public RestPhoenixEEMResponseMeasurementSetItemRestType() {
    }

    /**
     * Returns the value of href.
     *
     * @return the value of href
     */
    public String getHref() {
        return href;
    }

    /**
     * Changes the value of href.
     *
     * @param value the new value
     */
    public void setHref(String value) {
        this.href = value;
    }

    /**
     * Returns the value of id.
     *
     * @return the value of id
     */
    public String getId() {
        return id;
    }

    /**
     * Changes the value of id.
     *
     * @param value the new value
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Returns the value of name.
     *
     * @return the value of name
     */
    public String getName() {
        return name;
    }

    /**
     * Changes the value of name.
     *
     * @param value the new value
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Returns the value of value.
     *
     * @return the value of value
     */
    public Object getValue() {
        return value;
    }

    /**
     * Changes the value of value.
     *
     * @param value the new value
     */
    public void setValue(Object value) {
        this.value = value;
    }

    /**
     * Returns the value of unit.
     *
     * @return the value of unit
     */
    public String getUnit() {
        return unit;
    }

    /**
     * Changes the value of unit.
     *
     * @param value the new value
     */
    public void setUnit(String value) {
        this.unit = value;
    }

    /**
     * Returns the value of description.
     *
     * @return the value of description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Changes the value of description.
     *
     * @param value the new value
     */
    public void setDescription(String value) {
        this.description = value;
    }

    @Override
    public Object fromREST(Object data) {
        Object result = data;
        if (data instanceof RestPhoenixEEMResponseMeasurementSetItemRestType) {
            result = fromRESTImpl((RestPhoenixEEMResponseMeasurementSetItemRestType) data);
        } else if (data instanceof RestPhoenixEEMResponseMeasurementSetItemRestType[]) {
            result = fromRESTImpl((RestPhoenixEEMResponseMeasurementSetItemRestType[]) data);
        }
        return result;
    }

    /**
     * Implements the conversion from the corresponding REST type.
     *
     * @param orig the original value
     * @return the converted instance
     */
    public static RestPhoenixEEMResponseMeasurementSetItem fromRESTImpl(RestPhoenixEEMResponseMeasurementSetItemRestType
        orig) {
        RestPhoenixEEMResponseMeasurementSetItem result = new RestPhoenixEEMResponseMeasurementSetItemImpl();
        result.setHref(orig.getHref());
        result.setId(orig.getId());
        result.setName(orig.getName());
        result.setValue(orig.getValue());
        result.setUnit(orig.getUnit());
        result.setDescription(orig.getDescription());
        return result;
    }

    /**
     * Implements the conversion from the corresponding REST type array.
     *
     * @param orig the original value
     * @return the converted instance
     */
    public static RestPhoenixEEMResponseMeasurementSetItem[] fromRESTImpl(
        RestPhoenixEEMResponseMeasurementSetItemRestType[] orig) {
        RestPhoenixEEMResponseMeasurementSetItem[] result = null;
        if (orig != null) {
            result = new RestPhoenixEEMResponseMeasurementSetItem[orig.length];
            for (int i = 0; i < orig.length; i++) {
                result[i] = fromRESTImpl(orig[i]);
            }
        }
        return result;
    }

    @Override
    public Object toREST(Object data) {
        Object result = data;
        if (data instanceof RestPhoenixEEMResponseMeasurementSetItem) {
            result = toRESTImpl((RestPhoenixEEMResponseMeasurementSetItem) data);
        } else if (data instanceof RestPhoenixEEMResponseMeasurementSetItem[]) {
            result = toRESTImpl((RestPhoenixEEMResponseMeasurementSetItem[]) data);
        }
        return result;
    }

    /**
     * Implements the conversion from the transport type to REST
     *
     * @param orig the original value
     * @return the converted instance
     */
    public static RestPhoenixEEMResponseMeasurementSetItemRestType[] toRESTImpl(RestPhoenixEEMResponseMeasurementSetItem[
        ] orig) {
        RestPhoenixEEMResponseMeasurementSetItemRestType[] result = null;
        if (orig != null) {
            result = new RestPhoenixEEMResponseMeasurementSetItemRestType[orig.length];
            for (int i = 0; i < orig.length; i++) {
                result[i] = toRESTImpl(orig[i]);
            }
        }
        return result;
    }

    /**
     * Implements the conversion from the transport type to REST
     *
     * @param orig the original value
     * @return the converted instance
     */
    public static RestPhoenixEEMResponseMeasurementSetItemRestType toRESTImpl(RestPhoenixEEMResponseMeasurementSetItem
        orig) {
        RestPhoenixEEMResponseMeasurementSetItemRestType result = new RestPhoenixEEMResponseMeasurementSetItemRestType(
            );
        result.setHref(orig.getHref());
        result.setId(orig.getId());
        result.setName(orig.getName());
        result.setValue(orig.getValue());
        result.setUnit(orig.getUnit());
        result.setDescription(orig.getDescription());
        return result;
    }

}
