package iip.nodes;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;
import javax.annotation.PostConstruct;

import de.iip_ecosphere.platform.connectors.Connector;
import de.iip_ecosphere.platform.connectors.ConnectorFactory;
import de.iip_ecosphere.platform.connectors.ConnectorParameter;
import de.iip_ecosphere.platform.connectors.ConnectorParameter.CacheMode;
import de.iip_ecosphere.platform.connectors.ConnectorParameter.ConnectorParameterBuilder;
import de.iip_ecosphere.platform.connectors.model.ModelAccess;
import de.iip_ecosphere.platform.connectors.model.ModelInputConverter;
import de.iip_ecosphere.platform.connectors.model.ModelOutputConverter;
import de.iip_ecosphere.platform.connectors.opcuav1.DataItem;
import de.iip_ecosphere.platform.connectors.types.AbstractConnectorInputTypeTranslator;
import de.iip_ecosphere.platform.connectors.types.AbstractConnectorOutputTypeTranslator;
import de.iip_ecosphere.platform.connectors.types.TranslatingProtocolAdapter;
import de.iip_ecosphere.platform.services.environment.ConnectorServiceWrapper;
import de.iip_ecosphere.platform.services.environment.MonitoringService;
import de.iip_ecosphere.platform.services.environment.YamlArtifact;
import de.iip_ecosphere.platform.services.environment.YamlService;
import de.iip_ecosphere.platform.services.environment.metricsProvider.MonitoredTranslatingProtocolAdapter;
import de.iip_ecosphere.platform.services.environment.spring.SpringAsyncServiceBase;
import de.iip_ecosphere.platform.services.environment.spring.Starter;
import de.iip_ecosphere.platform.services.environment.spring.metricsProvider.MetricsProvider;
import de.iip_ecosphere.platform.services.environment.switching.ServiceBase;
import de.iip_ecosphere.platform.support.ServerAddress;
import de.iip_ecosphere.platform.support.identities.IdentityStore;
import de.iip_ecosphere.platform.support.identities.IdentityToken;
import de.iip_ecosphere.platform.support.iip_aas.NameplateSetup;
import de.iip_ecosphere.platform.support.iip_aas.NameplateSetup.Service;
import de.iip_ecosphere.platform.support.net.NetworkManagerFactory;
import de.iip_ecosphere.platform.support.resources.ResourceLoader;
import de.iip_ecosphere.platform.transport.Transport;
import de.iip_ecosphere.platform.transport.connectors.ReceptionCallback;
import de.iip_ecosphere.platform.transport.status.TraceRecord;

import iip.datatypes.MyConnPltfIn;
import iip.datatypes.MyConnPltfOut;
import iip.datatypes.MyNested;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Timer;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.stereotype.Component;

import static de.iip_ecosphere.platform.connectors.model.ModelAccessProvider.optional;

/**
 * Spring Cloud Stream service frame for net node 'myOpcConn example'.
 * Generated by: EASy-Producer.
 */
@Component
@ConditionalOnProperty(value = "iip.service.myOpcConn", havingValue = "true", matchIfMissing = true)
@EnableScheduling
public class MyOpcConnExample extends SpringAsyncServiceBase {

    @Value("${iip.service.myOpcConn:true}")
    private String activated;
    @Autowired
    private StreamBridge streamBridge;
    private ConnectorServiceWrapper<DataItem, Object, MyConnPltfIn, MyConnPltfOut> service;
    @Autowired
    private MetricsProvider metrics;
    private Counter serviceSent;
    private Counter serviceReceived;
    private Timer processingTime;
    private String appInstId = "";

     /**
     * Creates an instance.
     */
    public MyOpcConnExample() {
        ConnectorParameter param = createConnectorParameter();
        Connector<DataItem, Object, MyConnPltfIn, MyConnPltfOut> conn = ConnectorFactory.createConnector(
            "de.iip_ecosphere.platform.connectors.opcuav1.OpcUaConnector", () -> param, createConnectorAdapter((
            )->service.getInPath("/opc/machIn/"), ()->service.getOutPath("/opc/machOut/")));
        conn.enablePolling(false);
        YamlArtifact art = YamlArtifact.readFromYamlSafe(ResourceLoader.getResourceAsStream("deployment.yml"));
        YamlService serviceData = art.getServiceSafe("myOpcConn"); 
        service = new ConnectorServiceWrapper<DataItem, Object, MyConnPltfIn, MyConnPltfOut>(serviceData, conn, () -> 
            param);
        service.setReceptionCallback(new ConnectorReceptionCallback());
        appInstId = getAppInstIdSuffix(service, "_");
    }

    /**
    * Creates the default connector adapter without path suppliers. [public for testing]
    *
    * @return the connector adapter
    */
    public static TranslatingProtocolAdapter<DataItem, Object, MyConnPltfIn, MyConnPltfOut> createConnectorAdapter() {
        return createConnectorAdapter(null, null, null, null);
    }
    
    /**
    * Creates the connector adapter. [public for testing]
    *
    * @param inPathSupplier function returning the actual input base path to use for data accesses, may be <b>null</b>
    * @param outPathSupplier function returning the actual output base path to use for data accesses, may be <b>null</b>
    * @return the connector adapter
    */
    public static TranslatingProtocolAdapter<DataItem, Object, MyConnPltfIn, MyConnPltfOut> createConnectorAdapter(
        Supplier<String> inPathSupplier, Supplier<String> outPathSupplier) {
        return createConnectorAdapter(null, null, inPathSupplier, outPathSupplier);
    }
    
    /**
    * Creates the connector adapter. [public for testing]
    *
    * @param metrics the metrics provider to use, <b>null</b> for no metric measurements
    * @param log the log file to use to record individual measurements in experiments, <b>null</b> for no logging. Only
    * becomes active if {@code metrics} is not <b>null</b>
    * @return the connector adapter
    */
    public static TranslatingProtocolAdapter<DataItem, Object, MyConnPltfIn, MyConnPltfOut> createConnectorAdapter(de.
        iip_ecosphere.platform.services.environment.metricsProvider.MetricsProvider metrics, File log) {
        return createConnectorAdapter(metrics, log, null, null);
    }
    
    /**
    * Creates the connector adapter. [public for testing]
    *
    * @param metrics the metrics provider to use, <b>null</b> for no metric measurements
    * @param log the log file to use to record individual measurements in experiments, <b>null</b> for no logging. Only
    * becomes active if {@code metrics} is not <b>null</b>
    * @param inPathSupplier function returning the actual input base path to use for data accesses, may be <b>null</b>
    * @param outPathSupplier function returning the actual output base path to use for data accesses, may be <b>null</b>
    * @return the connector adapter
    */
    public static TranslatingProtocolAdapter<DataItem, Object, MyConnPltfIn, MyConnPltfOut> createConnectorAdapter(de.
        iip_ecosphere.platform.services.environment.metricsProvider.MetricsProvider metrics, File log, Supplier<String>
        inPathSupplier, Supplier<String> outPathSupplier) {
        TranslatingProtocolAdapter<DataItem, Object, MyConnPltfIn, MyConnPltfOut> adapter;
        if (metrics != null) {
            adapter = new MonitoredTranslatingProtocolAdapter<DataItem, Object, MyConnPltfIn, MyConnPltfOut>(new 
                MachineOutputTranslator(outPathSupplier), new MachineInputTranslator(inPathSupplier), metrics, log);
        } else {
            adapter = new TranslatingProtocolAdapter<DataItem, Object, MyConnPltfIn, MyConnPltfOut>(new 
                MachineOutputTranslator(outPathSupplier), new MachineInputTranslator(inPathSupplier));
        }
        return adapter;
    }
    /**
    * Called when data arrived that shall be passed on to the connector.
    *
    * @return the data consumer functor
    */
    @Bean
    public Consumer<MyConnPltfOut> createMyConnPltfOut_myOpcConn() {
        return data -> {
            MetricsProvider.increaseCounterBy(serviceReceived, 1.0);
            Transport.sendTraceRecord(new TraceRecord("myOpcConn", "receiving", data)); 
            processingTime.record(() -> service.send(data)); 
        };
    }
    
    /**
    * Creates the connector parameter instance. [public for testing]
    *
    * @return the instance to be passed to the connector
    */
    public static ConnectorParameter createConnectorParameter() {
        YamlArtifact art = YamlArtifact.readFromYamlSafe(ResourceLoader.getResourceAsStream("deployment.yml"));
        YamlService yaml = art.getServiceSafe("myOpcConn"); 
        Map<String, IdentityToken> identities = new HashMap<>();
        IdentityToken tok = IdentityStore.getInstance()
            .getToken("myOpc:auth", true, "localhost:1234"); 
        identities.put(ConnectorParameter.ANY_ENDPOINT, tok);
        identities.put("opc.tcp://localhost:1234", tok);
        String keystoreKey = "myOpc:keystore";
        String host = "localhost";
        String hostOverride = null;
        int port = 1234;
        if (null != yaml.getNetMgtKey() && yaml.getNetMgtKey().length() > 0) {
            ServerAddress netKeyMgtAddress = NetworkManagerFactory.getInstance()
                .getPort(yaml.getNetMgtKey());
            if (null != netKeyMgtAddress) {
                host = netKeyMgtAddress.getHost();
                hostOverride = host;
                port = netKeyMgtAddress.getPort();
                System.out.println(host+" "+port);
            }
        }
        Service svc = NameplateSetup.resolveServiceFromAas("opcua");
        if (null != svc) {
            host = svc.getHost();
            port = svc.getPort();
        }
        return ConnectorParameterBuilder.newBuilder(host, port)
            .setService(svc)
            .setApplicationInformation("myApp", "")
            .setCacheMode(CacheMode.NONE)
            .setNotificationInterval(0)
            .setIdentities(identities)
            .setKeystoreKey(keystoreKey)
            .setKeyAlias("device")
            .setHostnameVerification(false)
            .build();
    }

    /**
     * Initializes the service when feasible in Spring lifecycle.
     */
    @PostConstruct
    public void initService() {
        if (null == activated || "".equals(activated) || "true".equals(activated)) {
            LoggerFactory.getLogger(getClass())
                .info("Initializing service myOpcConn: {}", activated);
            String iId;
            String sId;
            sId = Starter.getServiceId(service);
            iId = ServiceBase.getApplicationInstanceId(sId);
            if (iId == null || iId.length() == 0) {
                iId = "dflt";
            }
            serviceSent = metrics.createServiceSentCounter("myOpcConn", sId, "myApp", iId);
            serviceReceived = metrics.createServiceReceivedCounter("myOpcConn", sId, "myApp", iId);
            processingTime = metrics.createServiceProcessingTimer("myOpcConn", sId, "myApp", iId);
            MonitoringService.setUp(service, metrics);
            Starter.mapService(service);
            // if notifications enabled, enable now also polling as @Autowired is done
            service.enablePolling(true);
        }
    }

    private static class MachineInputTranslator extends AbstractConnectorInputTypeTranslator<MyConnPltfOut, Object> {
    
        private Supplier<String> pathSupplier;
    
        private MachineInputTranslator(Supplier<String> pathSupplier) {
            this.pathSupplier = pathSupplier;
        }
    
        @Override
        public Object from(MyConnPltfOut data) throws IOException {
            ModelAccess access = getModelAccess();
            final ModelInputConverter inConverter = access.getInputConverter();
            final ModelOutputConverter outConverter = access.getOutputConverter();
            final String path = pathSupplier == null ? "/opc/machIn/" : pathSupplier.get();
            access.call("myOp", inConverter.toString(access.get(path + "dataField", -1)), 100);
            optional(access, a -> a.set(path + "cmdField", outConverter.fromString(data.getCmdField())));
            access.set(path + "nested", outConverter.fromObject(data.getNested()));
            // done, no instance of pseudo type
            return null;
        }
    
        @Override
        public Class<? extends Object> getSourceType() {
            return Object.class;
        }
    
        @Override
        public Class<? extends MyConnPltfOut> getTargetType() {
            return MyConnPltfOut.class;
        }
    
    }

    private static class MachineOutputTranslator extends AbstractConnectorOutputTypeTranslator<DataItem, MyConnPltfIn> {
    
        private Supplier<String> pathSupplier;
    
        private MachineOutputTranslator(Supplier<String> pathSupplier) {
            this.pathSupplier = pathSupplier;
        }
    
        @Override
        public MyConnPltfIn to(DataItem source) throws IOException {
            ModelAccess access = getModelAccess();
            final ModelInputConverter inConverter = access.getInputConverter();
            final ModelOutputConverter outConverter = access.getOutputConverter();
            final String path = pathSupplier == null ? "/opc/machOut/" : pathSupplier.get();
            MyConnPltfIn result = new MyConnPltfIn();
            optional(access, a -> result.setAxis(inConverter.toInteger(a.get(path + "dataValue", -1)) + 100));
            access.call("myOp", inConverter.toString(access.get(path + "dataField", -1)), 100);
            optional(access, a -> result.setDataField(inConverter.toString(a.get(path + "dataField", -1))));
            result.setNested((MyNested[]) inConverter.toObject(access.get(path + "nested", -1)));
            return result; 
        }
    
        @Override
        public void initializeModelAccess() throws IOException {
            ModelAccess access = getModelAccess();
            access.useNotifications(true);
        }
    
        @Override
        public Class<? extends DataItem> getSourceType() {
            return DataItem.class;
        }
    
        @Override
        public Class<? extends MyConnPltfIn> getTargetType() {
            return MyConnPltfIn.class;
        }
    
    }
    
    private class ConnectorReceptionCallback implements ReceptionCallback<MyConnPltfIn> {
    
        {
            // initialize Transport if needed
            Starter.getSetup();
        }
    
        @Override
        public void received(MyConnPltfIn data) {
            MetricsProvider.increaseCounterBy(serviceSent, 1.0);
            Transport.send(c -> c.asyncSend("data_myOpcConn_MyConnPltfIn_myApp" + appInstId, data), "myOpcConn", "processMyConnPltfIn_myAnonymizer-in-0");
        }
    
        @Override
        public Class<MyConnPltfIn> getType() {
            return MyConnPltfIn.class;
        }
            
    }

}
