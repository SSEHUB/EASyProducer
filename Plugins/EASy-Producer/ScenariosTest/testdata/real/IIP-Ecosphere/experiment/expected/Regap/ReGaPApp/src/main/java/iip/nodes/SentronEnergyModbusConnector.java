package iip.nodes;

import java.io.File;
import java.io.IOException;
import java.util.function.Consumer;
import java.util.function.Supplier;
import javax.annotation.PostConstruct;

import de.iip_ecosphere.platform.connectors.Connector;
import de.iip_ecosphere.platform.connectors.ConnectorFactory;
import de.iip_ecosphere.platform.connectors.ConnectorParameter;
import de.iip_ecosphere.platform.connectors.ConnectorParameter.CacheMode;
import de.iip_ecosphere.platform.connectors.ConnectorParameter.ConnectorParameterBuilder;
import de.iip_ecosphere.platform.connectors.modbustcpipv1.ModbusItem;
import de.iip_ecosphere.platform.connectors.model.ModelAccess;
import de.iip_ecosphere.platform.connectors.model.ModelInputConverter;
import de.iip_ecosphere.platform.connectors.model.ModelOutputConverter;
import de.iip_ecosphere.platform.connectors.types.AbstractConnectorInputTypeTranslator;
import de.iip_ecosphere.platform.connectors.types.AbstractConnectorOutputTypeTranslator;
import de.iip_ecosphere.platform.connectors.types.TranslatingProtocolAdapter;
import de.iip_ecosphere.platform.services.environment.ConnectorServiceWrapper;
import de.iip_ecosphere.platform.services.environment.MonitoringService;
import de.iip_ecosphere.platform.services.environment.YamlArtifact;
import de.iip_ecosphere.platform.services.environment.YamlService;
import de.iip_ecosphere.platform.services.environment.metricsProvider.MonitoredTranslatingProtocolAdapter;
import de.iip_ecosphere.platform.services.environment.spring.SpringAsyncServiceBase;
import de.iip_ecosphere.platform.services.environment.spring.Starter;
import de.iip_ecosphere.platform.services.environment.spring.metricsProvider.MetricsProvider;
import de.iip_ecosphere.platform.services.environment.switching.ServiceBase;
import de.iip_ecosphere.platform.support.ServerAddress;
import de.iip_ecosphere.platform.support.iip_aas.NameplateSetup;
import de.iip_ecosphere.platform.support.iip_aas.NameplateSetup.Service;
import de.iip_ecosphere.platform.support.net.NetworkManagerFactory;
import de.iip_ecosphere.platform.support.resources.ResourceLoader;
import de.iip_ecosphere.platform.transport.Transport;
import de.iip_ecosphere.platform.transport.connectors.ReceptionCallback;

import iip.datatypes.Empty;
import iip.datatypes.SentronOutput;
import iip.datatypes.SentronOutputImpl;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Timer;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.stereotype.Component;

/**
 * Spring Cloud Stream service frame for net node 'Sentron Energy Modbus connector'.
 * Generated by: EASy-Producer.
 */
@Component
@ConditionalOnProperty(value = "iip.service.SentronModbusConn", havingValue = "true", matchIfMissing = true)
@EnableScheduling
public class SentronEnergyModbusConnector extends SpringAsyncServiceBase {

    @Value("${iip.service.SentronModbusConn:true}")
    private String activated;
    @Autowired
    private StreamBridge streamBridge;
    private ConnectorServiceWrapper<ModbusItem, Object, SentronOutput, Empty> service;
    @Autowired
    private MetricsProvider metrics;
    private Counter serviceSent;
    private Counter serviceReceived;
    private Timer processingTime;
    private String appInstId = "";

    /**
     * Creates an instance.
     */
    public SentronEnergyModbusConnector() {
        ConnectorParameter param = createConnectorParameter();
        Connector<ModbusItem, Object, SentronOutput, Empty> conn = ConnectorFactory.createConnector(
            "de.iip_ecosphere.platform.connectors.modbustcpipv1.ModbusTcpIpConnector", () -> param,
            createConnectorAdapter(()->service.getInPath(""), ()->service.getOutPath("")));
        conn.enablePolling(false);
        YamlArtifact art = YamlArtifact.readFromYamlSafe(ResourceLoader.getResourceAsStream("deployment.yml"));
        YamlService serviceData = art.getServiceSafe("SentronModbusConn");
        service = new ConnectorServiceWrapper<ModbusItem, Object, SentronOutput, Empty>(serviceData, conn, () -> param);
        service.setReceptionCallback(new ConnectorReceptionCallback());
        appInstId = getAppInstIdSuffix(service, "_");
    }

    /**
     * Creates the default connector adapter without path suppliers. [public for testing]
     *
     * @return the connector adapter
     */
    public static TranslatingProtocolAdapter<ModbusItem, Object, SentronOutput, Empty> createConnectorAdapter() {
        return createConnectorAdapter(null, null, null, null);
    }

    /**
     * Creates the connector adapter. [public for testing]
     *
     * @param inPathSupplier function returning the actual input base path to use for data accesses, may be <b>null</b>
     * @param outPathSupplier function returning the actual output base path to use for data accesses, may be <b>null</b>
     * @return the connector adapter
     */
    public static TranslatingProtocolAdapter<ModbusItem, Object, SentronOutput, Empty> createConnectorAdapter(
        Supplier<String> inPathSupplier, Supplier<String> outPathSupplier) {
        return createConnectorAdapter(null, null, inPathSupplier, outPathSupplier);
    }

    /**
     * Creates the connector adapter. [public for testing]
     *
     * @param metrics the metrics provider to use, <b>null</b> for no metric measurements
     * @param log the log file to use to record individual measurements in experiments, <b>null</b> for no logging. Only
     * becomes active if {@code metrics} is not <b>null</b>
     * @return the connector adapter
     */
    public static TranslatingProtocolAdapter<ModbusItem, Object, SentronOutput, Empty> createConnectorAdapter(de.
        iip_ecosphere.platform.services.environment.metricsProvider.MetricsProvider metrics, File log) {
        return createConnectorAdapter(metrics, log, null, null);
    }

    /**
     * Creates the connector adapter. [public for testing]
     *
     * @param metrics the metrics provider to use, <b>null</b> for no metric measurements
     * @param log the log file to use to record individual measurements in experiments, <b>null</b> for no logging. Only
     * becomes active if {@code metrics} is not <b>null</b>
     * @param inPathSupplier function returning the actual input base path to use for data accesses, may be <b>null</b>
     * @param outPathSupplier function returning the actual output base path to use for data accesses, may be <b>null</b>
     * @return the connector adapter
     */
    public static TranslatingProtocolAdapter<ModbusItem, Object, SentronOutput, Empty> createConnectorAdapter(de.
        iip_ecosphere.platform.services.environment.metricsProvider.MetricsProvider metrics, File log,
        Supplier<String> inPathSupplier, Supplier<String> outPathSupplier) {
        TranslatingProtocolAdapter<ModbusItem, Object, SentronOutput, Empty> adapter;
        if (metrics != null) {
            adapter = new MonitoredTranslatingProtocolAdapter<ModbusItem, Object, SentronOutput, Empty>(new
                MachineOutputTranslator(outPathSupplier), new MachineInputTranslator(inPathSupplier), metrics,
                log);
        } else {
            adapter = new TranslatingProtocolAdapter<ModbusItem, Object, SentronOutput, Empty>(new
                MachineOutputTranslator(outPathSupplier), new MachineInputTranslator(inPathSupplier));
        }
        return adapter;
    }

    /**
     * Called when data arrived that shall be passed on to the connector.
     *
     * @return the data consumer functor
     */
    @Bean
    public Consumer<Empty> createEmpty_SentronModbusConn() {
        return data -> {
            MetricsProvider.increaseCounterBy(serviceReceived, 1.0);
            processingTime.record(() -> service.send(data));
        };
    }

    /**
     * Creates the connector parameter instance. [public for testing]
     *
     * @return the instance to be passed to the connector
     */
    public static ConnectorParameter createConnectorParameter() {
        YamlArtifact art = YamlArtifact.readFromYamlSafe(ResourceLoader.getResourceAsStream("deployment.yml"));
        YamlService yaml = art.getServiceSafe("SentronModbusConn");
        String host = "192.168.1.25";
        String hostOverride = null;
        int port = 502;
        if (null != yaml.getNetMgtKey() && yaml.getNetMgtKey().length() > 0) {
            ServerAddress netKeyMgtAddress = NetworkManagerFactory.getInstance()
                .getPort(yaml.getNetMgtKey());
            if (null != netKeyMgtAddress) {
                host = netKeyMgtAddress.getHost();
                hostOverride = host;
                port = netKeyMgtAddress.getPort();
                System.out.println(host+" "+port);
            }
        }
        Service svc = NameplateSetup.resolveServiceFromAas("modbus/tcp");
        if (null != svc) {
            host = svc.getHost();
            port = svc.getPort();
        }
        return ConnectorParameterBuilder.newBuilder(host, port)
            .setService(svc)
            .setApplicationInformation("ReGaPApp", "")
            .setCacheMode(CacheMode.NONE)
            .setNotificationInterval(1000)
            .setSpecificSettingFromResourceSafe("SERVER_STRUCTURE", "SentronEnergyModbusconnector.server")
            .setSpecificSetting("UNITID", 1)
            .setSpecificSetting("TIMEOUT", 3000)
            .setSpecificSetting("BIGBYTE", true)
            .build();
    }

    /**
     * Initializes the service when feasible in Spring lifecycle.
     */
    @PostConstruct
    public void initService() {
        if (null == activated || "".equals(activated) || "true".equals(activated)) {
            LoggerFactory.getLogger(getClass())
                .info("Initializing service SentronModbusConn: {}", activated);
            String iId;
            String sId;
            sId = Starter.getServiceId(service);
            iId = ServiceBase.getApplicationInstanceId(sId);
            if (iId == null || iId.length() == 0) {
                iId = "dflt";
            }
            serviceSent = metrics.createServiceSentCounter("SentronModbusConn", sId, "ReGaPApp", iId);
            serviceReceived = metrics.createServiceReceivedCounter("SentronModbusConn", sId, "ReGaPApp", iId);
            processingTime = metrics.createServiceProcessingTimer("SentronModbusConn", sId, "ReGaPApp", iId);
            MonitoringService.setUp(service, metrics);
            Starter.mapService(service);
            // if notifications enabled, enable now also polling as @Autowired is done
            service.enablePolling(true);
        }
    }

    private static class MachineInputTranslator extends AbstractConnectorInputTypeTranslator<Empty, Object> {

        private Supplier<String> pathSupplier;

        private MachineInputTranslator(Supplier<String> pathSupplier) {
            this.pathSupplier = pathSupplier;
        }

        @Override
        public Object from(Empty data) throws IOException {
            ModelAccess access = getModelAccess();
            final ModelInputConverter inConverter = access.getInputConverter();
            final ModelOutputConverter outConverter = access.getOutputConverter();
            final String path = pathSupplier == null ? "" : pathSupplier.get();
            // done, no instance of pseudo type
            return null;
        }

        @Override
        public Class<? extends Object> getSourceType() {
            return Object.class;
        }

        @Override
        public Class<? extends Empty> getTargetType() {
            return Empty.class;
        }

    }

    private static class MachineOutputTranslator extends AbstractConnectorOutputTypeTranslator<ModbusItem,
        SentronOutput> {

        private Supplier<String> pathSupplier;

        private MachineOutputTranslator(Supplier<String> pathSupplier) {
            this.pathSupplier = pathSupplier;
        }

        @Override
        public SentronOutput to(ModbusItem source) throws IOException {
            ModelAccess access = getModelAccess();
            final ModelInputConverter inConverter = access.getInputConverter();
            final ModelOutputConverter outConverter = access.getOutputConverter();
            final String path = pathSupplier == null ? "" : pathSupplier.get();
            SentronOutput result = new SentronOutputImpl();
            result.setActivePowerL1(inConverter.toFloat(access.get(path + "ActivePowerL1", 0)));
            result.setActivePowerL2(inConverter.toFloat(access.get(path + "ActivePowerL2", 0)));
            result.setActivePowerL3(inConverter.toFloat(access.get(path + "ActivePowerL3", 0)));
            result.setVoltageL1(inConverter.toFloat(access.get(path + "VoltageL1", 0)));
            result.setVoltageL2(inConverter.toFloat(access.get(path + "VoltageL2", 0)));
            result.setVoltageL3(inConverter.toFloat(access.get(path + "VoltageL3", 0)));
            result.setCurrentL1(inConverter.toFloat(access.get(path + "CurrentL1", 0)));
            result.setCurrentL2(inConverter.toFloat(access.get(path + "CurrentL2", 0)));
            result.setCurrentL3(inConverter.toFloat(access.get(path + "CurrentL3", 0)));
            result.setFrequency(inConverter.toFloat(access.get(path + "Frequency", 0)));
            return result;
        }

        @Override
        public void initializeModelAccess() throws IOException {
            ModelAccess access = getModelAccess();
            access.useNotifications(false);
        }

        @Override
        public Class<? extends ModbusItem> getSourceType() {
            return ModbusItem.class;
        }

        @Override
        public Class<? extends SentronOutput> getTargetType() {
            return SentronOutput.class;
        }

    }

    private class ConnectorReceptionCallback implements ReceptionCallback<SentronOutput> {

        {
            // initialize Transport if needed
            Starter.getSetup();
        }

        @Override
        public void received(SentronOutput data) {
            MetricsProvider.increaseCounterBy(serviceSent, 1.0);
            Transport.send(c -> c.asyncSend("data_SentronModbusConn_SentronOutput_ReGaPApp" + appInstId, data), 
                "SentronModbusConn", "receiveSentronOutput_CSVReceiver-in-0");
        }

        @Override
        public Class<SentronOutput> getType() {
            return SentronOutput.class;
        }

    }

}
