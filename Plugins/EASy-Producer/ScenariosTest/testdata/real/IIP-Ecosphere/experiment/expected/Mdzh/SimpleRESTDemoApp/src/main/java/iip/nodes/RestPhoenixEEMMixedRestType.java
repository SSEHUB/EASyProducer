package iip.nodes;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import de.iip_ecosphere.platform.connectors.rest.Convertable;

import iip.datatypes.RestPhoenixEEMMixed;
import iip.datatypes.RestPhoenixEEMMixedImpl;

/**
 * Rest type for the application data type RestPhoenixEEMMixed.
 * Generated by: EASy-Producer.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class RestPhoenixEEMMixedRestType implements Convertable {

    private RestPhoenixEEMResponseTariffNumberRestType tn1;
    private RestPhoenixEEMResponseTariffNumberRestType tn2;
    private RestPhoenixEEMResponseMeasurementSingleRestType f;
    private RestPhoenixEEMResponseMeasurementSingleRestType U1;
    private RestPhoenixEEMResponseMeasurementSingleRestType U2;
    private RestPhoenixEEMResponseMeasurementSingleRestType U3;
    private RestPhoenixEEMResponseMeasurementSetRestType all;
    private RestPhoenixEEMResponseInformationRestType information;

    /**
     * Default constructor. Fields are pre-allocated with default Java values.
     */
    public RestPhoenixEEMMixedRestType() {
    }

    /**
     * Returns the value of tn1.
     *
     * @return the value of tn1
     */
    public RestPhoenixEEMResponseTariffNumberRestType getTn1() {
        return tn1;
    }

    /**
     * Changes the value of tn1.
     *
     * @param value the new value
     */
    public void setTn1(RestPhoenixEEMResponseTariffNumberRestType value) {
        this.tn1 = value;
    }

    /**
     * Returns the value of tn2.
     *
     * @return the value of tn2
     */
    public RestPhoenixEEMResponseTariffNumberRestType getTn2() {
        return tn2;
    }

    /**
     * Changes the value of tn2.
     *
     * @param value the new value
     */
    public void setTn2(RestPhoenixEEMResponseTariffNumberRestType value) {
        this.tn2 = value;
    }

    /**
     * Returns the value of f.
     *
     * @return the value of f
     */
    public RestPhoenixEEMResponseMeasurementSingleRestType getF() {
        return f;
    }

    /**
     * Changes the value of f.
     *
     * @param value the new value
     */
    public void setF(RestPhoenixEEMResponseMeasurementSingleRestType value) {
        this.f = value;
    }

    /**
     * Returns the value of U1.
     *
     * @return the value of U1
     */
    public RestPhoenixEEMResponseMeasurementSingleRestType getU1() {
        return U1;
    }

    /**
     * Changes the value of U1.
     *
     * @param value the new value
     */
    public void setU1(RestPhoenixEEMResponseMeasurementSingleRestType value) {
        this.U1 = value;
    }

    /**
     * Returns the value of U2.
     *
     * @return the value of U2
     */
    public RestPhoenixEEMResponseMeasurementSingleRestType getU2() {
        return U2;
    }

    /**
     * Changes the value of U2.
     *
     * @param value the new value
     */
    public void setU2(RestPhoenixEEMResponseMeasurementSingleRestType value) {
        this.U2 = value;
    }

    /**
     * Returns the value of U3.
     *
     * @return the value of U3
     */
    public RestPhoenixEEMResponseMeasurementSingleRestType getU3() {
        return U3;
    }

    /**
     * Changes the value of U3.
     *
     * @param value the new value
     */
    public void setU3(RestPhoenixEEMResponseMeasurementSingleRestType value) {
        this.U3 = value;
    }

    /**
     * Returns the value of all.
     *
     * @return the value of all
     */
    public RestPhoenixEEMResponseMeasurementSetRestType getAll() {
        return all;
    }

    /**
     * Changes the value of all.
     *
     * @param value the new value
     */
    public void setAll(RestPhoenixEEMResponseMeasurementSetRestType value) {
        this.all = value;
    }

    /**
     * Returns the value of information.
     *
     * @return the value of information
     */
    public RestPhoenixEEMResponseInformationRestType getInformation() {
        return information;
    }

    /**
     * Changes the value of information.
     *
     * @param value the new value
     */
    public void setInformation(RestPhoenixEEMResponseInformationRestType value) {
        this.information = value;
    }

    @Override
    public Object fromREST(Object data) {
        Object result = data;
        if (data instanceof RestPhoenixEEMMixedRestType) {
            result = fromRESTImpl((RestPhoenixEEMMixedRestType) data);
        } else if (data instanceof RestPhoenixEEMMixedRestType[]) {
            result = fromRESTImpl((RestPhoenixEEMMixedRestType[]) data);
        }
        return result;
    }

    /**
     * Implements the conversion from the corresponding REST type.
     *
     * @param orig the original value
     * @return the converted instance
     */
    public static RestPhoenixEEMMixed fromRESTImpl(RestPhoenixEEMMixedRestType orig) {
        RestPhoenixEEMMixed result = new RestPhoenixEEMMixedImpl();
        result.setTn1(RestPhoenixEEMResponseTariffNumberRestType.fromRESTImpl(orig.getTn1()));
        result.setTn2(RestPhoenixEEMResponseTariffNumberRestType.fromRESTImpl(orig.getTn2()));
        result.setF(RestPhoenixEEMResponseMeasurementSingleRestType.fromRESTImpl(orig.getF()));
        result.setU1(RestPhoenixEEMResponseMeasurementSingleRestType.fromRESTImpl(orig.getU1()));
        result.setU2(RestPhoenixEEMResponseMeasurementSingleRestType.fromRESTImpl(orig.getU2()));
        result.setU3(RestPhoenixEEMResponseMeasurementSingleRestType.fromRESTImpl(orig.getU3()));
        result.setAll(RestPhoenixEEMResponseMeasurementSetRestType.fromRESTImpl(orig.getAll()));
        result.setInformation(RestPhoenixEEMResponseInformationRestType.fromRESTImpl(orig.getInformation()));
        return result;
    }

    /**
     * Implements the conversion from the corresponding REST type array.
     *
     * @param orig the original value
     * @return the converted instance
     */
    public static RestPhoenixEEMMixed[] fromRESTImpl(RestPhoenixEEMMixedRestType[] orig) {
        RestPhoenixEEMMixed[] result = null;
        if (orig != null) {
            result = new RestPhoenixEEMMixed[orig.length];
            for (int i = 0; i < orig.length; i++) {
                result[i] = fromRESTImpl(orig[i]);
            }
        }
        return result;
    }

    @Override
    public Object toREST(Object data) {
        Object result = data;
        if (data instanceof RestPhoenixEEMMixed) {
            result = toRESTImpl((RestPhoenixEEMMixed) data);
        } else if (data instanceof RestPhoenixEEMMixed[]) {
            result = toRESTImpl((RestPhoenixEEMMixed[]) data);
        }
        return result;
    }

    /**
     * Implements the conversion from the transport type to REST
     *
     * @param orig the original value
     * @return the converted instance
     */
    public static RestPhoenixEEMMixedRestType[] toRESTImpl(RestPhoenixEEMMixed[] orig) {
        RestPhoenixEEMMixedRestType[] result = null;
        if (orig != null) {
            result = new RestPhoenixEEMMixedRestType[orig.length];
            for (int i = 0; i < orig.length; i++) {
                result[i] = toRESTImpl(orig[i]);
            }
        }
        return result;
    }

    /**
     * Implements the conversion from the transport type to REST
     *
     * @param orig the original value
     * @return the converted instance
     */
    public static RestPhoenixEEMMixedRestType toRESTImpl(RestPhoenixEEMMixed orig) {
        RestPhoenixEEMMixedRestType result = new RestPhoenixEEMMixedRestType();
        result.setTn1(RestPhoenixEEMResponseTariffNumberRestType.toRESTImpl(orig.getTn1()));
        result.setTn2(RestPhoenixEEMResponseTariffNumberRestType.toRESTImpl(orig.getTn2()));
        result.setF(RestPhoenixEEMResponseMeasurementSingleRestType.toRESTImpl(orig.getF()));
        result.setU1(RestPhoenixEEMResponseMeasurementSingleRestType.toRESTImpl(orig.getU1()));
        result.setU2(RestPhoenixEEMResponseMeasurementSingleRestType.toRESTImpl(orig.getU2()));
        result.setU3(RestPhoenixEEMResponseMeasurementSingleRestType.toRESTImpl(orig.getU3()));
        result.setAll(RestPhoenixEEMResponseMeasurementSetRestType.toRESTImpl(orig.getAll()));
        result.setInformation(RestPhoenixEEMResponseInformationRestType.toRESTImpl(orig.getInformation()));
        return result;
    }

}
