package iip;

import java.util.List;

import de.iip_ecosphere.platform.services.environment.Service;
import de.iip_ecosphere.platform.services.environment.YamlArtifact;
import de.iip_ecosphere.platform.transport.serialization.SerializerRegistry;
import de.iip_ecosphere.platform.transport.spring.SerializerMessageConverter;

import iip.serializers.AvaMqttOutputImplSerializer;
import iip.serializers.AvaMqttOutputSerializer;
import iip.serializers.MipMqttInputImplSerializer;
import iip.serializers.MipMqttInputSerializer;
import iip.serializers.MipMqttOutputImplSerializer;
import iip.serializers.MipMqttOutputSerializer;
import iip.serializers.MyConnMachineInImplSerializer;
import iip.serializers.MyConnMachineInSerializer;
import iip.serializers.MyConnMachineOutImplSerializer;
import iip.serializers.MyConnMachineOutSerializer;
import iip.serializers.MyConnPltfInImplSerializer;
import iip.serializers.MyConnPltfInSerializer;
import iip.serializers.MyConnPltfOutImplSerializer;
import iip.serializers.MyConnPltfOutSerializer;
import iip.serializers.MyNestedImplSerializer;
import iip.serializers.MyNestedSerializer;
import iip.serializers.Rec1ImplSerializer;
import iip.serializers.Rec1Serializer;
import iip.serializers.RtsaTestInputImplSerializer;
import iip.serializers.RtsaTestInputSerializer;
import iip.serializers.RtsaTestOutputImplSerializer;
import iip.serializers.RtsaTestOutputSerializer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.core.env.Environment;
import org.springframework.messaging.converter.MessageConverter;

/**
 * Service artifact starter.
 * Generated by: EASy-Producer.
 */
@SpringBootApplication
@ComponentScan({"iip.nodes", "de.iip_ecosphere.platform.services.environment.spring", 
"de.iip_ecosphere.platform.transport.spring"})
public class Starter extends de.iip_ecosphere.platform.services.environment.spring.Starter {

    /**
    * Creates an instance.
    * 
    * @param environment the Spring environment
    */
    @Autowired
    public Starter(Environment environment) {
        super(environment);
    }
    
    @Override
    protected List<Service> createServices(YamlArtifact artifact) {
        return null;
    }
    
    /**
    * Creates a custom message converter and binds it against "application/iip".
    * 
    * @return the custom message converter
    */
    @Bean
    public MessageConverter customMessageConverter() {
        return new SerializerMessageConverter();
    }

    /**
    * Registers required, generated serializers.
    */
    public static void registerSerializers() {
        SerializerRegistry.registerSerializer(AvaMqttOutputImplSerializer.class);
        SerializerRegistry.registerSerializer(AvaMqttOutputSerializer.class);
        SerializerRegistry.registerSerializer(MipMqttInputImplSerializer.class);
        SerializerRegistry.registerSerializer(MipMqttInputSerializer.class);
        SerializerRegistry.registerSerializer(MipMqttOutputImplSerializer.class);
        SerializerRegistry.registerSerializer(MipMqttOutputSerializer.class);
        SerializerRegistry.registerSerializer(MyConnMachineInImplSerializer.class);
        SerializerRegistry.registerSerializer(MyConnMachineInSerializer.class);
        SerializerRegistry.registerSerializer(MyConnMachineOutImplSerializer.class);
        SerializerRegistry.registerSerializer(MyConnMachineOutSerializer.class);
        SerializerRegistry.registerSerializer(MyConnPltfInImplSerializer.class);
        SerializerRegistry.registerSerializer(MyConnPltfInSerializer.class);
        SerializerRegistry.registerSerializer(MyConnPltfOutImplSerializer.class);
        SerializerRegistry.registerSerializer(MyConnPltfOutSerializer.class);
        SerializerRegistry.registerSerializer(MyNestedImplSerializer.class);
        SerializerRegistry.registerSerializer(MyNestedSerializer.class);
        SerializerRegistry.registerSerializer(Rec1ImplSerializer.class);
        SerializerRegistry.registerSerializer(Rec1Serializer.class);
        SerializerRegistry.registerSerializer(RtsaTestInputImplSerializer.class);
        SerializerRegistry.registerSerializer(RtsaTestInputSerializer.class);
        SerializerRegistry.registerSerializer(RtsaTestOutputImplSerializer.class);
        SerializerRegistry.registerSerializer(RtsaTestOutputSerializer.class);
    }

    /**
     * Starts the service chain.
     *
     * @param args command line arguments
     */        
    public static void main(String[] args) {
        registerSerializers();
        main(iip.Starter.class, args);
    }

}

