package MyAnonymizerImpl;

import java.util.concurrent.ExecutionException;

import de.iip_ecosphere.platform.services.environment.ServiceState;

import iip.datatypes.MyConnPltfIn;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.LoggerFactory;

/**
 * IIP-Ecosphere service jUnit test for 'myAnonymizer example'.
 * Generated by: EASy-Producer.
 */
public class MyAnonymizerImplTest {

    private MyAnonymizerImpl service;

    /**
     * Tests processing a data item of type "String" asynchronously.
     */
    @Test
    public void testProcessString() {
        String data = "";
        // TODO fill data via setters
        service.processString(data);
        // asynchronous results occur through ingestors, see startup()
    }
    /**
     * Tests processing a data item of type "MyConnPltfIn" asynchronously.
     */
    @Test
    public void testProcessMyConnPltfIn() {
        MyConnPltfIn data = new MyConnPltfIn();
        // TODO fill data via setters
        service.processMyConnPltfIn(data);
        // asynchronous results occur through ingestors, see startup()
    }
    

    /**
     * Initializes the test.
     */
    @Before
    public void startup() {
        // constructor for testing, does not set up service management values!
        service = new MyAnonymizerImpl();
        service.attachRec1Ingestor(d -> {
            // called when results from asynchronous service processing occurs 
            Assert.assertNotNull(d);  
            // TODO add assert here or collect results and assert in test
        });
        
        try {
            service.setState(ServiceState.STARTING);
        } catch (ExecutionException e) {
            LoggerFactory.getLogger(getClass())
                .error("Cannot start service: {}", e);
        }
    }

    /**
     * Shuts down the test.
     */
    @After
    public void shutdown() {
        try {
            service.setState(ServiceState.STOPPING);
        } catch (ExecutionException e) {
            LoggerFactory.getLogger(getClass())
                .error("Cannot stop service: {}", e);
        }
    }

}
