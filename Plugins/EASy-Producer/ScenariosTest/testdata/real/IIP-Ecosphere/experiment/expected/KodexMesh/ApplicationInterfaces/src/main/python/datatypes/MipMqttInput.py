
from datetime import datetime
from decimal import Decimal

class MipMqttInput:
    """Interface of the application data type MipMqttInput. 
       Generated by: EASy-Producer."""
    
    def getMipcontext(self) -> str:
        """Returns the value of mipcontext.
        
           Returns:
             str
               the value of mipcontext
        """
        raise NotImplementedError
    
    def getMipdate(self) -> str:
        """Returns the value of mipdate.
        
           Returns:
             str
               the value of mipdate
        """
        raise NotImplementedError
    
    def getMipto(self) -> str:
        """Returns the value of mipto.
        
           Returns:
             str
               the value of mipto
        """
        raise NotImplementedError
    
    def getMipfrom(self) -> str:
        """Returns the value of mipfrom.
        
           Returns:
             str
               the value of mipfrom
        """
        raise NotImplementedError
    
    def getMipcommand(self) -> str:
        """Returns the value of mipcommand.
        
           Returns:
             str
               the value of mipcommand
        """
        raise NotImplementedError
    
    def getMipbitstream_ai_clock(self) -> str:
        """Returns the value of mipbitstream_ai_clock.
        
           Returns:
             str
               the value of mipbitstream_ai_clock
        """
        raise NotImplementedError
    
    def getMipbitstream_ai_data1(self) -> str:
        """Returns the value of mipbitstream_ai_data1.
        
           Returns:
             str
               the value of mipbitstream_ai_data1
        """
        raise NotImplementedError
    
    def getMipbitstream_ai_data2(self) -> str:
        """Returns the value of mipbitstream_ai_data2.
        
           Returns:
             str
               the value of mipbitstream_ai_data2
        """
        raise NotImplementedError
    
    def getMipreader(self) -> str:
        """Returns the value of mipreader.
        
           Returns:
             str
               the value of mipreader
        """
        raise NotImplementedError
    
    def setMipcontext(self, v: str):
        """Changes the value of mipcontext.
        
           Parameters:
             - v (str) -- the new value of mipcontext
        """
        raise NotImplementedError
    
    def setMipdate(self, v: str):
        """Changes the value of mipdate.
        
           Parameters:
             - v (str) -- the new value of mipdate
        """
        raise NotImplementedError
    
    def setMipto(self, v: str):
        """Changes the value of mipto.
        
           Parameters:
             - v (str) -- the new value of mipto
        """
        raise NotImplementedError
    
    def setMipfrom(self, v: str):
        """Changes the value of mipfrom.
        
           Parameters:
             - v (str) -- the new value of mipfrom
        """
        raise NotImplementedError
    
    def setMipcommand(self, v: str):
        """Changes the value of mipcommand.
        
           Parameters:
             - v (str) -- the new value of mipcommand
        """
        raise NotImplementedError
    
    def setMipbitstream_ai_clock(self, v: str):
        """Changes the value of mipbitstream_ai_clock.
        
           Parameters:
             - v (str) -- the new value of mipbitstream_ai_clock
        """
        raise NotImplementedError
    
    def setMipbitstream_ai_data1(self, v: str):
        """Changes the value of mipbitstream_ai_data1.
        
           Parameters:
             - v (str) -- the new value of mipbitstream_ai_data1
        """
        raise NotImplementedError
    
    def setMipbitstream_ai_data2(self, v: str):
        """Changes the value of mipbitstream_ai_data2.
        
           Parameters:
             - v (str) -- the new value of mipbitstream_ai_data2
        """
        raise NotImplementedError
    
    def setMipreader(self, v: str):
        """Changes the value of mipreader.
        
           Parameters:
             - v (str) -- the new value of mipreader
        """
        raise NotImplementedError
    
    # Indeed, there are 2.4 decorators for this, but for now we want to have all here: pythonic field access
    # backed by getter/setter and the ability to replace data classes by e.g. projecting or data enhancing
    # functionality (original idea of the "interfaces" with similar naming as in Java. It may be that the 
    # interfaces become superfluous due to the properties, but let's leave them in for now.
    mipcontext = property(getMipcontext, setMipcontext)
    mipdate = property(getMipdate, setMipdate)
    mipto = property(getMipto, setMipto)
    mipfrom = property(getMipfrom, setMipfrom)
    mipcommand = property(getMipcommand, setMipcommand)
    mipbitstream_ai_clock = property(getMipbitstream_ai_clock, setMipbitstream_ai_clock)
    mipbitstream_ai_data1 = property(getMipbitstream_ai_data1, setMipbitstream_ai_data1)
    mipbitstream_ai_data2 = property(getMipbitstream_ai_data2, setMipbitstream_ai_data2)
    mipreader = property(getMipreader, setMipreader)
    
