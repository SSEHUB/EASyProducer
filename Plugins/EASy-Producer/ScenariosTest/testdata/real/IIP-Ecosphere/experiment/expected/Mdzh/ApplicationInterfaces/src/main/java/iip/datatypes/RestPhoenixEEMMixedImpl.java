package iip.datatypes;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import de.iip_ecosphere.platform.services.environment.IipStringStyle;
import de.iip_ecosphere.platform.support.iip_aas.ConfiguredName;

import iip.datatypes.RestPhoenixEEMMixed;

import org.apache.commons.lang3.builder.ReflectionToStringBuilder;

/**
 * Implementation of the application data type RestPhoenixEEMMixed.
 * Generated by: EASy-Producer.
 */
@ConfiguredName("RestPhoenixEEMMixed")
public class RestPhoenixEEMMixedImpl implements RestPhoenixEEMMixed {

    @JsonProperty("tn1")
    @ConfiguredName("tn1")
    private RestPhoenixEEMResponseTariffNumber tn1;
    @JsonProperty("tn2")
    @ConfiguredName("tn2")
    private RestPhoenixEEMResponseTariffNumber tn2;
    @JsonProperty("f")
    @ConfiguredName("f")
    private RestPhoenixEEMResponseMeasurementSingle f;
    @JsonProperty("U1")
    @ConfiguredName("U1")
    private RestPhoenixEEMResponseMeasurementSingle U1;
    @JsonProperty("U2")
    @ConfiguredName("U2")
    private RestPhoenixEEMResponseMeasurementSingle U2;
    @JsonProperty("U3")
    @ConfiguredName("U3")
    private RestPhoenixEEMResponseMeasurementSingle U3;
    @JsonProperty("all")
    @ConfiguredName("all")
    private RestPhoenixEEMResponseMeasurementSet all;
    @JsonProperty("information")
    @ConfiguredName("information")
    private RestPhoenixEEMResponseInformation information;

    /**
     * Default constructor. Fields are pre-allocated with default Java values.
     */
    public RestPhoenixEEMMixedImpl() {
    }

    /**
     * Copy constructor.
     *
     * @param from the instance to copy the values from
     */
    public RestPhoenixEEMMixedImpl(RestPhoenixEEMMixed from) {
        this.tn1 = from.getTn1();
        this.tn2 = from.getTn2();
        this.f = from.getF();
        this.U1 = from.getU1();
        this.U2 = from.getU2();
        this.U3 = from.getU3();
        this.all = from.getAll();
        this.information = from.getInformation();
    }

    @Override
    @JsonIgnore
    public RestPhoenixEEMResponseTariffNumber getTn1() {
        return tn1;
    }

    @Override
    @JsonIgnore
    public void setTn1(RestPhoenixEEMResponseTariffNumber value) {
        this.tn1 = value;
    }

    @Override
    @JsonIgnore
    public RestPhoenixEEMResponseTariffNumber getTn2() {
        return tn2;
    }

    @Override
    @JsonIgnore
    public void setTn2(RestPhoenixEEMResponseTariffNumber value) {
        this.tn2 = value;
    }

    @Override
    @JsonIgnore
    public RestPhoenixEEMResponseMeasurementSingle getF() {
        return f;
    }

    @Override
    @JsonIgnore
    public void setF(RestPhoenixEEMResponseMeasurementSingle value) {
        this.f = value;
    }

    @Override
    @JsonIgnore
    public RestPhoenixEEMResponseMeasurementSingle getU1() {
        return U1;
    }

    @Override
    @JsonIgnore
    public void setU1(RestPhoenixEEMResponseMeasurementSingle value) {
        this.U1 = value;
    }

    @Override
    @JsonIgnore
    public RestPhoenixEEMResponseMeasurementSingle getU2() {
        return U2;
    }

    @Override
    @JsonIgnore
    public void setU2(RestPhoenixEEMResponseMeasurementSingle value) {
        this.U2 = value;
    }

    @Override
    @JsonIgnore
    public RestPhoenixEEMResponseMeasurementSingle getU3() {
        return U3;
    }

    @Override
    @JsonIgnore
    public void setU3(RestPhoenixEEMResponseMeasurementSingle value) {
        this.U3 = value;
    }

    @Override
    @JsonIgnore
    public RestPhoenixEEMResponseMeasurementSet getAll() {
        return all;
    }

    @Override
    @JsonIgnore
    public void setAll(RestPhoenixEEMResponseMeasurementSet value) {
        this.all = value;
    }

    @Override
    @JsonIgnore
    public RestPhoenixEEMResponseInformation getInformation() {
        return information;
    }

    @Override
    @JsonIgnore
    public void setInformation(RestPhoenixEEMResponseInformation value) {
        this.information = value;
    }

    @Override
    public int hashCode() {
        int hc = 0;
        hc += getTn1() != null ? getTn1().hashCode() : 0;
        hc += getTn2() != null ? getTn2().hashCode() : 0;
        hc += getF() != null ? getF().hashCode() : 0;
        hc += getU1() != null ? getU1().hashCode() : 0;
        hc += getU2() != null ? getU2().hashCode() : 0;
        hc += getU3() != null ? getU3().hashCode() : 0;
        hc += getAll() != null ? getAll().hashCode() : 0;
        hc += getInformation() != null ? getInformation().hashCode() : 0;
        return hc;
    }

    @Override
    public boolean equals(Object other) {
        boolean eq;
        if (other instanceof RestPhoenixEEMMixed) {
            RestPhoenixEEMMixed oth = (RestPhoenixEEMMixed) other;
            eq = true;
            eq &= getTn1() != null ? getTn1().equals(oth.getTn1()) : true;
            eq &= getTn2() != null ? getTn2().equals(oth.getTn2()) : true;
            eq &= getF() != null ? getF().equals(oth.getF()) : true;
            eq &= getU1() != null ? getU1().equals(oth.getU1()) : true;
            eq &= getU2() != null ? getU2().equals(oth.getU2()) : true;
            eq &= getU3() != null ? getU3().equals(oth.getU3()) : true;
            eq &= getAll() != null ? getAll().equals(oth.getAll()) : true;
            eq &= getInformation() != null ? getInformation().equals(oth.getInformation()) : true;
        } else {
            eq = false;
        }
        return eq;
    }

    @Override
    public String toString() {
        return ReflectionToStringBuilder.toString(this, IipStringStyle.SHORT_STRING_STYLE);
    }

}
