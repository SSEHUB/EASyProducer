package iip.nodes;

import java.io.IOException;
import java.util.Map;
import java.util.function.Supplier;

import de.iip_ecosphere.platform.connectors.parser.TextLineParser;
import de.iip_ecosphere.platform.connectors.parser.TextLineParser.TextLineParseResult;
import de.iip_ecosphere.platform.connectors.parser.TextLineParser.TextLineParserConverter;
import de.iip_ecosphere.platform.connectors.types.ChanneledConnectorOutputTypeAdapter.ChanneledSerializer;

import iip.datatypes.SentronOutput;
import iip.datatypes.SentronOutputImpl;

/**
 * Parser/formatter connector serializer for SentronOutput.
 * Generated by: EASy-Producer.
 */
public class CSVDataReceiverParserSerializer implements ChanneledSerializer<SentronOutput> {

    private TextLineParser parser;
    private Map<String, Integer> mapping;
    private Supplier<String> pathSupplier;

    public CSVDataReceiverParserSerializer(String encoding, Map<String, Integer> mapping, Supplier<String> pathSupplier)
        {
        this.mapping = mapping;
        this.pathSupplier = pathSupplier;
        parser = new TextLineParser(encoding, ",");
    }

    @Override
    public SentronOutput from(String channel, byte[] data) throws IOException {
        final String path = pathSupplier == null ? "" : pathSupplier.get();
        TextLineParseResult pr = parser.parse(data);
        TextLineParserConverter inConverter = parser.getConverter();
        SentronOutput result = new SentronOutputImpl();
        result.setActivePowerL1(inConverter.toFloat(pr.getLocalData(path + "ActivePowerL1", 0)));
        result.setActivePowerL2(inConverter.toFloat(pr.getLocalData(path + "ActivePowerL2", 1)));
        result.setActivePowerL3(inConverter.toFloat(pr.getLocalData(path + "ActivePowerL3", 2)));
        result.setVoltageL1(inConverter.toFloat(pr.getLocalData(path + "VoltageL1", 3)));
        result.setVoltageL2(inConverter.toFloat(pr.getLocalData(path + "VoltageL2", 4)));
        result.setVoltageL3(inConverter.toFloat(pr.getLocalData(path + "VoltageL3", 5)));
        result.setCurrentL1(inConverter.toFloat(pr.getLocalData(path + "CurrentL1", 6)));
        result.setCurrentL2(inConverter.toFloat(pr.getLocalData(path + "CurrentL2", 7)));
        result.setCurrentL3(inConverter.toFloat(pr.getLocalData(path + "CurrentL3", 8)));
        result.setFrequency(inConverter.toFloat(pr.getLocalData(path + "Frequency", 9)));
        return result;
    }

    @Override
    public byte[] to(SentronOutput source) throws IOException {
        final String path = pathSupplier == null ? "" : pathSupplier.get();
        return null;
    }

    @Override
    public SentronOutput clone(SentronOutput origin) throws IOException {
        return new SentronOutputImpl(origin);
    }

    @Override
    public Class<SentronOutput> getType() {
        return SentronOutput.class;
    }

}
