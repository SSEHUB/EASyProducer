package iip.nodes;

import java.io.IOException;
import java.util.Map;
import java.util.function.Supplier;

import de.iip_ecosphere.platform.connectors.formatter.TextLineFormatter;
import de.iip_ecosphere.platform.connectors.formatter.TextLineFormatter.TextLineFormatterConverter;
import de.iip_ecosphere.platform.connectors.types.ChanneledConnectorOutputTypeAdapter.ChanneledSerializer;

import iip.datatypes.SentronOutput;
import iip.datatypes.SentronOutputImpl;

/**
 * Parser/formatter connector serializer for SentronOutput.
 * Generated by: EASy-Producer.
 */
public class CSVDataReceiverFormatterSerializer implements ChanneledSerializer<SentronOutput> {

    private TextLineFormatter formatter;
    private Map<String, Integer> mapping;
    private Supplier<String> pathSupplier;

    public CSVDataReceiverFormatterSerializer(String encoding, Map<String, Integer> mapping, Supplier<String>
        pathSupplier) {
        this.mapping = mapping;
        this.pathSupplier = pathSupplier;
        formatter = new TextLineFormatter(encoding, ",");
    }

    @Override
    public SentronOutput from(String channel, byte[] data) throws IOException {
        final String path = pathSupplier == null ? "" : pathSupplier.get();
        return null;
    }

    @Override
    public byte[] to(SentronOutput source) throws IOException {
        final String path = pathSupplier == null ? "" : pathSupplier.get();
        TextLineFormatterConverter outConverter = formatter.getConverter();
        SentronOutputImpl tmp = new SentronOutputImpl();
        return formatter.chunkCompleted();
    }

    @Override
    public SentronOutput clone(SentronOutput origin) throws IOException {
        return new SentronOutputImpl(origin);
    }

    @Override
    public Class<SentronOutput> getType() {
        return SentronOutput.class;
    }

}
