from datatypes.MipMqttOutput import MipMqttOutput
from datetime import datetime
from decimal import Decimal

class MipMqttOutputImpl(MipMqttOutput):
    """Implementation of the application data type MipMqttOutput. 
       Generated by: EASy-Producer."""
 
    #Mapped into properties without leading _ below resembling getter/setter
    
    _mipcontext: str = ""
    _mipdate: str = ""
    _mipfrom: str = ""
    _mipid_tag: str = ""
    _mipreader: str = ""
    _mipraw_signal_clock: str = None
    _mipraw_signal_data1: str = None
    _mipraw_signal_data2: str = None
    
    def getMipcontext(self) -> str:
        """Returns the value of {@code mipcontext}.
        
           Returns:
             - the value of mipcontext"""
        return self._mipcontext
    
    def getMipdate(self) -> str:
        """Returns the value of {@code mipdate}.
        
           Returns:
             - the value of mipdate"""
        return self._mipdate
    
    def getMipfrom(self) -> str:
        """Returns the value of {@code mipfrom}.
        
           Returns:
             - the value of mipfrom"""
        return self._mipfrom
    
    def getMipid_tag(self) -> str:
        """Returns the value of {@code mipid_tag}.
        
           Returns:
             - the value of mipid_tag"""
        return self._mipid_tag
    
    def getMipreader(self) -> str:
        """Returns the value of {@code mipreader}.
        
           Returns:
             - the value of mipreader"""
        return self._mipreader
    
    def getMipraw_signal_clock(self) -> str:
        """Returns the value of {@code mipraw_signal_clock}.
        
           Returns:
             - the value of mipraw_signal_clock"""
        return self._mipraw_signal_clock
    
    def getMipraw_signal_data1(self) -> str:
        """Returns the value of {@code mipraw_signal_data1}.
        
           Returns:
             - the value of mipraw_signal_data1"""
        return self._mipraw_signal_data1
    
    def getMipraw_signal_data2(self) -> str:
        """Returns the value of {@code mipraw_signal_data2}.
        
           Returns:
             - the value of mipraw_signal_data2"""
        return self._mipraw_signal_data2
    
    
    def setMipcontext(self, v: str):
        """Changes the value of {@code mipcontext}.
        
           Parameters:
             - v -- the new value of mipcontext"""
        self._mipcontext = v
    
    def setMipdate(self, v: str):
        """Changes the value of {@code mipdate}.
        
           Parameters:
             - v -- the new value of mipdate"""
        self._mipdate = v
    
    def setMipfrom(self, v: str):
        """Changes the value of {@code mipfrom}.
        
           Parameters:
             - v -- the new value of mipfrom"""
        self._mipfrom = v
    
    def setMipid_tag(self, v: str):
        """Changes the value of {@code mipid_tag}.
        
           Parameters:
             - v -- the new value of mipid_tag"""
        self._mipid_tag = v
    
    def setMipreader(self, v: str):
        """Changes the value of {@code mipreader}.
        
           Parameters:
             - v -- the new value of mipreader"""
        self._mipreader = v
    
    def setMipraw_signal_clock(self, v: str):
        """Changes the value of {@code mipraw_signal_clock}.
        
           Parameters:
             - v -- the new value of mipraw_signal_clock"""
        self._mipraw_signal_clock = v
    
    def setMipraw_signal_data1(self, v: str):
        """Changes the value of {@code mipraw_signal_data1}.
        
           Parameters:
             - v -- the new value of mipraw_signal_data1"""
        self._mipraw_signal_data1 = v
    
    def setMipraw_signal_data2(self, v: str):
        """Changes the value of {@code mipraw_signal_data2}.
        
           Parameters:
             - v -- the new value of mipraw_signal_data2"""
        self._mipraw_signal_data2 = v
    
    
    #Indeed, there are 2.4 decorators for this, but for now we want to have all here: pythonic field access
    #backed by getter/setter and the ability to replace data classes by e.g. projecting or data enhancing
    #functionality (original idea of the "interfaces" with similar naming as in Java. It may be that the 
    #interfaces become superfluous due to the properties, but let's leave them in for now.
    mipcontext = property(getMipcontext, setMipcontext)
    mipdate = property(getMipdate, setMipdate)
    mipfrom = property(getMipfrom, setMipfrom)
    mipid_tag = property(getMipid_tag, setMipid_tag)
    mipreader = property(getMipreader, setMipreader)
    mipraw_signal_clock = property(getMipraw_signal_clock, setMipraw_signal_clock)
    mipraw_signal_data1 = property(getMipraw_signal_data1, setMipraw_signal_data1)
    mipraw_signal_data2 = property(getMipraw_signal_data2, setMipraw_signal_data2)
    
