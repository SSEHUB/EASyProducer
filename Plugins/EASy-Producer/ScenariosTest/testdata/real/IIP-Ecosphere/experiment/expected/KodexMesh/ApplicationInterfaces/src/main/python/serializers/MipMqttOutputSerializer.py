from json import JSONEncoder
import json
from datetime import datetime
from TypeTranslatorToString import TypeTranslatorToString
import Registry
from datatypes.MipMqttOutput import MipMqttOutput
from datatypes.MipMqttOutputImpl import MipMqttOutputImpl









class MipMqttOutputEncoder(JSONEncoder):
    """JSON encoder class for MipMqttOutput.
    Generated by: EASy-Producer."""

    def default(self, o):
        """Provides access to the attributes in o.
        
        Parameters:
          - o -- the object to serialize
        Returns:
          dict
            the attributes
        """
        tmp = dict()
        for key in o.__dict__:
            k = key[1:] # by generation convention
            tmp[k] = o.__dict__[key]
        
        return tmp
    

class MipMqttOutputSerializer(TypeTranslatorToString):
    """JSON transport serializer for MipMqttOutput.
       Generated by: EASy-Producer."""
                
    def __init__(self):
        """Initializes the transformer.""" 
        Registry.serializers["MipMqttOutput"] = self
        Registry.types[MipMqttOutput] = "MipMqttOutput"
        Registry.serializers["MipMqttOutputImpl"] = self # there is a serializer for the Impl
        Registry.types[MipMqttOutputImpl] = "MipMqttOutput" # the Impl maps back to the type name
    
    def readFrom(self, data: str) -> MipMqttOutput:
        """Turns bytes into a String.
        
        Parameters:
          - data -- the data string
        Returns:
          object
            the deserialized object
        """
    
        result = MipMqttOutputImpl()
        jTmp = json.loads(data)
        tmp = dict()
        for key in jTmp:
            k = "_" + str(key) # by generation convention
            tmp[k] = jTmp[key]
        
        result.__dict__ = tmp
        return result

    def writeTo(self, source: MipMqttOutput) -> str:
        """Turns an object into a String.
        
        Parameters:
          - source -- the object
        Returns:
          bytes
            the serialized data string
        """
        
        return MipMqttOutputEncoder().encode(source).encode("UTF-8").decode()
        
    def readFromMipMqttOutput(d: dict) -> MipMqttOutput:
        """Turns a dict into an object of type MipMqttOutput for deep deserialization.
        
        Parameters:
          - d -- dict
        Returns:
          MipMqttOutput
            the object, may be None
        """
        if d is None:
            return None
        else:
            tmp = dict()
            result = MipMqttOutputImpl()
            for key in d:
                k = "_" + str(key) # by generation convention
                tmp[k] = d[key]
            
            result.__dict__ = tmp
            return result
    
    def writeToMipMqttOutput(o: MipMqttOutput) -> dict:
        """Turns an object of type MipMqttOutput into a dict for serialization.
        
        Parameters:
          - o -- the object, may be None
        Returns:
          dict
            the dict, may be None
        """
        if o is None:
            return None
        else:
            result = dict()
            for key in o.__dict__:
                k = key[1:] # by generation convention
                result[k] = o.__dict__[key]

MipMqttOutputSerializer()
