from datatypes.KRec13 import KRec13
from datetime import datetime
from decimal import Decimal

class KRec13Impl(KRec13):
    """Implementation of the application data type KRec13. 
       Generated by: EASy-Producer."""
 
    # Mapped into properties without leading _ below resembling getter/setter
    
    _intField: int = 0
    _stringField: str = ""
    
    def getIntField(self) -> int:
        """Returns the value of intField.
        
           Returns:
             int
               the value of intField
        """
        return self._intField
    
    def getStringField(self) -> str:
        """Returns the value of stringField.
        
           Returns:
            str
              the value of stringField
        """
        return self._stringField
    
    
    def setIntField(self, v: int):
        """Changes the value of intField.
        
           Parameters:
             - v (int) -- the new value of intField, may be of type int or the corresponding numpy type
        """
        if "numpy" in str(type(v)):
            self._intField = v.item()
        else:
            self._intField = v
    
    def setStringField(self, v: str):
        """Changes the value of stringField.
        
           Parameters:
             - v (str) -- the new value of stringField
        """
        self._stringField = v
    
    # Indeed, there are 2.4 decorators for this, but for now we want to have all here: pythonic field access
    # backed by getter/setter and the ability to replace data classes by e.g. projecting or data enhancing
    # functionality (original idea of the "interfaces" with similar naming as in Java. It may be that the 
    # interfaces become superfluous due to the properties, but let's leave them in for now.
    intField = property(getIntField, setIntField)
    stringField = property(getStringField, setStringField)
    
