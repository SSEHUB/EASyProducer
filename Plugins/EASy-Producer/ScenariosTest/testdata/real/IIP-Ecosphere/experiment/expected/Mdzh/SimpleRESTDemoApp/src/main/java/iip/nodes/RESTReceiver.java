package iip.nodes;

import java.util.function.Consumer;
import javax.annotation.PostConstruct;

import de.iip_ecosphere.platform.services.environment.AbstractService;
import de.iip_ecosphere.platform.services.environment.MonitoringService;
import de.iip_ecosphere.platform.services.environment.spring.SpringAsyncServiceBase;
import de.iip_ecosphere.platform.services.environment.spring.Starter;
import de.iip_ecosphere.platform.services.environment.spring.metricsProvider.MetricsProvider;
import de.iip_ecosphere.platform.services.environment.switching.ServiceBase;

import iip.datatypes.RestPhoenixEEMMixed;
import iip.interfaces.RESTReceiverInterface;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Timer;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.stereotype.Component;

/**
 * Spring Cloud Stream service frame for net node 'REST Receiver'.
 * Generated by: EASy-Producer.
 */
@Component
@ConditionalOnProperty(value = "iip.service.RestReceiver", havingValue = "true", matchIfMissing = true)
@EnableScheduling
public class RESTReceiver extends SpringAsyncServiceBase {

    @Value("${iip.service.RestReceiver:true}")
    private String activated;
    @Autowired
    private StreamBridge streamBridge;
    private RESTReceiverInterface service;
    @Autowired
    private MetricsProvider metrics;
    private Counter serviceSent;
    private Counter serviceReceived;
    private Timer processingTime;
    private String appInstId = "";

    /**
     * Creates an instance.
     */
    public RESTReceiver() {
        service = AbstractService.createInstance("ReceiverImpl", RESTReceiverInterface.class, "RestReceiver", 
            "deployment.yml");
        appInstId = getAppInstIdSuffix(service, "_");
    }

    /**
     * Called when data arrived that shall be received (data sink).
     *
     * @return the data consumer functor
     */
    @Bean
    public Consumer<RestPhoenixEEMMixed> receiveRestPhoenixEEMMixed_RestReceiver() {
        return data -> {
            MetricsProvider.increaseCounterBy(serviceReceived, 1.0);
            processingTime.record(() -> service.processRestPhoenixEEMMixed(data));
        };
    }

    /**
     * Initializes the service when feasible in Spring lifecycle.
     */
    @PostConstruct
    public void initService() {
        if (null == activated || "".equals(activated) || "true".equals(activated)) {
            LoggerFactory.getLogger(getClass())
                .info("Initializing service RestReceiver: {}", activated);
            String iId;
            String sId;
            sId = Starter.getServiceId(service);
            iId = ServiceBase.getApplicationInstanceId(sId);
            if (iId == null || iId.length() == 0) {
                iId = "dflt";
            }
            serviceSent = metrics.createServiceSentCounter("RestReceiver", sId, "myRestApp", iId);
            serviceReceived = metrics.createServiceReceivedCounter("RestReceiver", sId, "myRestApp", iId);
            processingTime = metrics.createServiceProcessingTimer("RestReceiver", sId, "myRestApp", iId);
            MonitoringService.setUp(service, metrics);
            Starter.mapService(service);
            createReceptionCallback("data_myRestConnEEMMixed_RestPhoenixEEMMixed_myRestApp" + appInstId,
                receiveRestPhoenixEEMMixed_RestReceiver(), RestPhoenixEEMMixed.class, 
                "receiveRestPhoenixEEMMixed_RestReceiver-in-0");
        }
    }

}
