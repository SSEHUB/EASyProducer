from AbstractService import AbstractService
import Registry
from Version import Version
from Service import ServiceState
from Service import ServiceKind

class TestpyServerServerInterface(AbstractService):
    """Interface for server "test-pyServer"
       Generated by: EASy-Producer."""

    ingestor = None ## gen    
    def __init__(self):
        """Initializes the server service.""" 
        super().__init__("test-pyServer", "test-pyServer", Version("1.3.0"), "Test server", True, ServiceKind.SERVER)
        Registry.services['test-pyServer'] = self

    def attachIngestor(self, ingestor): ## gen
        self.ingestor = ingestor

    def ingest(self, data): ## gen
        if self.ingestor is not None:
            self.ingestor(data)
    
    
    
    def setState(self, state:ServiceState):
        """Changes the state. [R133c]
        
        Parameters:
          - newState -- the new state (ServiceState)
        """
        super().setState(state)
        if (state==ServiceState.STARTING):
            self.start()
        if (state==ServiceState.STOPPING):
            self.stop()
            
    def start(self):
        """Called when the server shall start.
        """
        pass

    def stop(self):
        """Called when the server shall stop.
        """
        pass
            
    def receivedClientServer(self, data):
        """Called when data on client-server connection arrives.
        
        Parameters:
          - data -- the data (type depends on client-server implementation)
        """
        
        pass
    
