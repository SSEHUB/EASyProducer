package iip.nodes;

import java.io.IOException;
import java.util.Map;
import java.util.function.Supplier;

import de.iip_ecosphere.platform.connectors.parser.JsonInputParser;
import de.iip_ecosphere.platform.connectors.parser.JsonInputParser.JsonInputConverter;
import de.iip_ecosphere.platform.connectors.parser.JsonInputParser.JsonParseResult;
import de.iip_ecosphere.platform.connectors.parser.ParserUtils;
import de.iip_ecosphere.platform.connectors.types.ChanneledConnectorOutputTypeAdapter.ChanneledSerializer;

import iip.datatypes.MyConnPltfIn;
import iip.datatypes.MyConnPltfInImpl;
import iip.datatypes.MyNested;
import iip.datatypes.MyNestedImpl;

/**
 * Parser/formatter connector serializer for MyConnPltfIn.
 * Generated by: EASy-Producer.
 */
public class MyMqttConnExampleParserSerializer implements ChanneledSerializer<MyConnPltfIn> {

    private JsonInputParser parser;
    private Map<String, Integer> mapping;
    private Supplier<String> pathSupplier;
    
    public MyMqttConnExampleParserSerializer(String encoding, Map<String, Integer> mapping, Supplier<String> pathSupplier) {
        this.mapping = mapping;
        this.pathSupplier = pathSupplier;
        parser = (JsonInputParser) ParserUtils.createInstance(MyMqttConnExampleParserSerializer.class.getClassLoader(), 
            "de.iip_ecosphere.platform.connectors.parser.JsonInputParser", encoding);
    }

    @Override             
    public MyConnPltfIn from(String channel, byte[] data) throws IOException {
        final String path = pathSupplier == null ? "" : pathSupplier.get();
        JsonParseResult pr = parser.parse(data);
        JsonInputConverter inConverter = parser.getConverter(); 
        MyConnPltfIn result = new MyConnPltfInImpl();
        JsonParseResult prArray1 = pr.stepInto(path + "nested", 2);
        MyNested[] array1 = new MyNested[prArray1.getArraySize()];
        for (int i = 0, size = prArray1.getArraySize(); i < size; i++) {
            JsonParseResult prElement = prArray1.stepInto("", i);
            array1[i] = new MyNestedImpl();
            array1[i].setState(inConverter.toString(prElement.getLocalData(path + "state", 0)));
            prElement.stepOut();
        }
        prArray1.stepOut();
        result.setNested(array1);
        return result;
    }

    @Override    
    public byte[] to(MyConnPltfIn source) throws IOException {
        final String path = pathSupplier == null ? "" : pathSupplier.get();
        return null;
    }

    @Override
    public MyConnPltfIn clone(MyConnPltfIn origin) throws IOException {
        return new MyConnPltfInImpl(origin);
    }

    @Override
    public Class<MyConnPltfIn> getType() {
        return MyConnPltfIn.class;
    }

}

