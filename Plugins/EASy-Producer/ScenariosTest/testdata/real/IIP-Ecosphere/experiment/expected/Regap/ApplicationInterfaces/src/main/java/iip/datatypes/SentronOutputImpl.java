package iip.datatypes;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import de.iip_ecosphere.platform.services.environment.IipStringStyle;
import de.iip_ecosphere.platform.support.iip_aas.ConfiguredName;

import iip.datatypes.SentronOutput;

import org.apache.commons.lang3.builder.ReflectionToStringBuilder;

/**
 * Implementation of the application data type SentronOutput.
 * Generated by: EASy-Producer.
 */
@ConfiguredName("SentronOutput")
public class SentronOutputImpl implements SentronOutput {

    @JsonProperty("ActivePowerL1")
    @ConfiguredName("ActivePowerL1")
    private float ActivePowerL1;
    @JsonProperty("ActivePowerL2")
    @ConfiguredName("ActivePowerL2")
    private float ActivePowerL2;
    @JsonProperty("ActivePowerL3")
    @ConfiguredName("ActivePowerL3")
    private float ActivePowerL3;
    @JsonProperty("VoltageL1")
    @ConfiguredName("VoltageL1")
    private float VoltageL1;
    @JsonProperty("VoltageL2")
    @ConfiguredName("VoltageL2")
    private float VoltageL2;
    @JsonProperty("VoltageL3")
    @ConfiguredName("VoltageL3")
    private float VoltageL3;
    @JsonProperty("CurrentL1")
    @ConfiguredName("CurrentL1")
    private float CurrentL1;
    @JsonProperty("CurrentL2")
    @ConfiguredName("CurrentL2")
    private float CurrentL2;
    @JsonProperty("CurrentL3")
    @ConfiguredName("CurrentL3")
    private float CurrentL3;
    @JsonProperty("Frequency")
    @ConfiguredName("Frequency")
    private float Frequency;

    /**
     * Default constructor. Fields are pre-allocated with default Java values.
     */
    public SentronOutputImpl() {
    }

    /**
     * Copy constructor.
     *
     * @param from the instance to copy the values from
     */
    public SentronOutputImpl(SentronOutput from) {
        this.ActivePowerL1 = from.getActivePowerL1();
        this.ActivePowerL2 = from.getActivePowerL2();
        this.ActivePowerL3 = from.getActivePowerL3();
        this.VoltageL1 = from.getVoltageL1();
        this.VoltageL2 = from.getVoltageL2();
        this.VoltageL3 = from.getVoltageL3();
        this.CurrentL1 = from.getCurrentL1();
        this.CurrentL2 = from.getCurrentL2();
        this.CurrentL3 = from.getCurrentL3();
        this.Frequency = from.getFrequency();
    }

    @Override
    @JsonIgnore
    public float getActivePowerL1() {
        return ActivePowerL1;
    }

    @Override
    @JsonIgnore
    public void setActivePowerL1(float value) {
        this.ActivePowerL1 = value;
    }

    @Override
    @JsonIgnore
    public float getActivePowerL2() {
        return ActivePowerL2;
    }

    @Override
    @JsonIgnore
    public void setActivePowerL2(float value) {
        this.ActivePowerL2 = value;
    }

    @Override
    @JsonIgnore
    public float getActivePowerL3() {
        return ActivePowerL3;
    }

    @Override
    @JsonIgnore
    public void setActivePowerL3(float value) {
        this.ActivePowerL3 = value;
    }

    @Override
    @JsonIgnore
    public float getVoltageL1() {
        return VoltageL1;
    }

    @Override
    @JsonIgnore
    public void setVoltageL1(float value) {
        this.VoltageL1 = value;
    }

    @Override
    @JsonIgnore
    public float getVoltageL2() {
        return VoltageL2;
    }

    @Override
    @JsonIgnore
    public void setVoltageL2(float value) {
        this.VoltageL2 = value;
    }

    @Override
    @JsonIgnore
    public float getVoltageL3() {
        return VoltageL3;
    }

    @Override
    @JsonIgnore
    public void setVoltageL3(float value) {
        this.VoltageL3 = value;
    }

    @Override
    @JsonIgnore
    public float getCurrentL1() {
        return CurrentL1;
    }

    @Override
    @JsonIgnore
    public void setCurrentL1(float value) {
        this.CurrentL1 = value;
    }

    @Override
    @JsonIgnore
    public float getCurrentL2() {
        return CurrentL2;
    }

    @Override
    @JsonIgnore
    public void setCurrentL2(float value) {
        this.CurrentL2 = value;
    }

    @Override
    @JsonIgnore
    public float getCurrentL3() {
        return CurrentL3;
    }

    @Override
    @JsonIgnore
    public void setCurrentL3(float value) {
        this.CurrentL3 = value;
    }

    @Override
    @JsonIgnore
    public float getFrequency() {
        return Frequency;
    }

    @Override
    @JsonIgnore
    public void setFrequency(float value) {
        this.Frequency = value;
    }

    @Override
    public int hashCode() {
        int hc = 0;
        hc += Float.hashCode(getActivePowerL1());
        hc += Float.hashCode(getActivePowerL2());
        hc += Float.hashCode(getActivePowerL3());
        hc += Float.hashCode(getVoltageL1());
        hc += Float.hashCode(getVoltageL2());
        hc += Float.hashCode(getVoltageL3());
        hc += Float.hashCode(getCurrentL1());
        hc += Float.hashCode(getCurrentL2());
        hc += Float.hashCode(getCurrentL3());
        hc += Float.hashCode(getFrequency());
        return hc;
    }

    @Override
    public boolean equals(Object other) {
        boolean eq;
        if (other instanceof SentronOutput) {
            SentronOutput oth = (SentronOutput) other;
            eq = true;
            eq &= getActivePowerL1() == oth.getActivePowerL1();
            eq &= getActivePowerL2() == oth.getActivePowerL2();
            eq &= getActivePowerL3() == oth.getActivePowerL3();
            eq &= getVoltageL1() == oth.getVoltageL1();
            eq &= getVoltageL2() == oth.getVoltageL2();
            eq &= getVoltageL3() == oth.getVoltageL3();
            eq &= getCurrentL1() == oth.getCurrentL1();
            eq &= getCurrentL2() == oth.getCurrentL2();
            eq &= getCurrentL3() == oth.getCurrentL3();
            eq &= getFrequency() == oth.getFrequency();
        } else {
            eq = false;
        }
        return eq;
    }

    @Override
    public String toString() {
        return ReflectionToStringBuilder.toString(this, IipStringStyle.SHORT_STRING_STYLE);
    }

}
