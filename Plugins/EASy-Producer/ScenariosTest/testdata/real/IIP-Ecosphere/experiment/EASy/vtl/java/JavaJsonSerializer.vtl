import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent="* ", lineLength = 120, profileArg_eltSorting="CONS")
template JavaJsonSerializer(Configuration config, JavaCodeArtifact target, RecordType type, String pkg, String typePkg, Boolean sharedInterfaces, Boolean impl) {

    def defineJacksonOptionals(RecordType type, String objectMapperVar, String typeName, JavaCodeBlock block) {
        sequenceOf(String) fieldNames = type.fields->select(f|f.optional)->collect(f|f.name);
        if (fieldNames.size() > 0) {
            JavaCodeMethodCall call = block.addCall("de.iip_ecosphere.platform.support.json.JsonUtils.defineOptionals", JavaCodeImportScope.CLASS)
                .addArgument(objectMapperVar)
                .addClassArgument(typeName);
            fieldNames->forEach(n|call.addStringArgument(n));
        }
    }

    def defineJacksonTypeMapper(IIPEcosphere config, String varName, JavaCodeBlock block) {
        if (config.sharedInterfaces) {
             block.addCall("de.iip_ecosphere.platform.support.json.JsonUtils.handleIipDataClasses", JavaCodeImportScope.CLASS)
                 .addArgument("MAPPER");
        }
    }

    def main(Configuration config, JavaCodeArtifact target, RecordType type, String pkg, String typePkg, Boolean sharedInterfaces, Boolean impl) {
        String clsName = asTypeName(type.name);
        String typeName = clsName;
        String add = "";
        if (sharedInterfaces) {
            add = "Impl";
            if (impl) {
                typeName = typeName + add;
            }
        }

        JavaCodeClass mainCls = codeCreateClass(target, pkg, "${typeName}Serializer", 'JSON transport serializer for ${clsName}');
        if (pkg != typePkg) {
            mainCls.addImport("${typePkg}.*");
        }
        mainCls.addInterface("de.iip_ecosphere.platform.transport.serialization.Serializer<${typeName}>");
        mainCls.addAttribute("com.fasterxml.jackson.databind.ObjectMapper", "MAPPER")
            .addInitializer("new ObjectMapper()")
            .setStatic()
            .setFinal();
        JavaCodeBlock init = mainCls.addInitializer(true);
        defineJacksonOptionals(type, "MAPPER", typeName, init);
        defineJacksonTypeMapper(config, "MAPPER", init);
        mainCls.removeIfEmpty(init);
        
        JavaCodeMethod from = mainCls.addMethod(typeName, "from", "");
        from.addParameter("byte[]", "data");
        from.addOverrideAnnotation();
        from.addException("java.io.IOException");
        JavaCodeTryBlock fromTry = from.addTry();
        fromTry.addReturn("MAPPER.readValue(data, ${clsName}${add}.class)");
        fromTry.addCatch("com.fasterxml.jackson.core.JsonProcessingException", "e").addThrow("new IOException(e)");

        JavaCodeMethod to = mainCls.addMethod("byte[]", "to", "");
        to.addParameter(typeName, "source");
        to.addOverrideAnnotation();
        to.addException("java.io.IOException");
        JavaCodeTryBlock toTry = to.addTry();
        toTry.addReturn("MAPPER.writeValueAsBytes(source)");
        toTry.addCatch("com.fasterxml.jackson.core.JsonProcessingException", "e").addThrow("new IOException(e)");

        JavaCodeMethod clone = mainCls.addMethod(typeName, "clone", "");
        clone.addParameter(typeName, "origin");
        clone.addOverrideAnnotation();
        clone.addException("java.io.IOException");
        clone.addReturn("new ${clsName}${add}(origin)");

        JavaCodeMethod getType = mainCls.addMethod("Class<${typeName}>", "getType", "");
        getType.addOverrideAnnotation();
        getType.addReturn("${typeName}.class");
    }
    
}
