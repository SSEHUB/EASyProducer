/*
 * generated by Xtext
 */
grammar InternalVilBuildLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.uni_hildesheim.sse.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.uni_hildesheim.sse.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.uni_hildesheim.sse.services.VilBuildLanguageGrammarAccess;

}

@parser::members {
 
 	private VilBuildLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(VilBuildLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleImplementationUnit
entryRuleImplementationUnit 
:
{ before(grammarAccess.getImplementationUnitRule()); }
	 ruleImplementationUnit
{ after(grammarAccess.getImplementationUnitRule()); } 
	 EOF 
;

// Rule ImplementationUnit
ruleImplementationUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplementationUnitAccess().getGroup()); }
(rule__ImplementationUnit__Group__0)
{ after(grammarAccess.getImplementationUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRequire
entryRuleRequire 
:
{ before(grammarAccess.getRequireRule()); }
	 ruleRequire
{ after(grammarAccess.getRequireRule()); } 
	 EOF 
;

// Rule Require
ruleRequire
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRequireAccess().getGroup()); }
(rule__Require__Group__0)
{ after(grammarAccess.getRequireAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLanguageUnit
entryRuleLanguageUnit 
:
{ before(grammarAccess.getLanguageUnitRule()); }
	 ruleLanguageUnit
{ after(grammarAccess.getLanguageUnitRule()); } 
	 EOF 
;

// Rule LanguageUnit
ruleLanguageUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLanguageUnitAccess().getGroup()); }
(rule__LanguageUnit__Group__0)
{ after(grammarAccess.getLanguageUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScriptParentDecl
entryRuleScriptParentDecl 
:
{ before(grammarAccess.getScriptParentDeclRule()); }
	 ruleScriptParentDecl
{ after(grammarAccess.getScriptParentDeclRule()); } 
	 EOF 
;

// Rule ScriptParentDecl
ruleScriptParentDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScriptParentDeclAccess().getGroup()); }
(rule__ScriptParentDecl__Group__0)
{ after(grammarAccess.getScriptParentDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoadProperties
entryRuleLoadProperties 
:
{ before(grammarAccess.getLoadPropertiesRule()); }
	 ruleLoadProperties
{ after(grammarAccess.getLoadPropertiesRule()); } 
	 EOF 
;

// Rule LoadProperties
ruleLoadProperties
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoadPropertiesAccess().getGroup()); }
(rule__LoadProperties__Group__0)
{ after(grammarAccess.getLoadPropertiesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScriptContents
entryRuleScriptContents 
:
{ before(grammarAccess.getScriptContentsRule()); }
	 ruleScriptContents
{ after(grammarAccess.getScriptContentsRule()); } 
	 EOF 
;

// Rule ScriptContents
ruleScriptContents
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScriptContentsAccess().getGroup()); }
(rule__ScriptContents__Group__0)
{ after(grammarAccess.getScriptContentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleDeclaration
entryRuleRuleDeclaration 
:
{ before(grammarAccess.getRuleDeclarationRule()); }
	 ruleRuleDeclaration
{ after(grammarAccess.getRuleDeclarationRule()); } 
	 EOF 
;

// Rule RuleDeclaration
ruleRuleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroup()); }
(rule__RuleDeclaration__Group__0)
{ after(grammarAccess.getRuleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleConditions
entryRuleRuleConditions 
:
{ before(grammarAccess.getRuleConditionsRule()); }
	 ruleRuleConditions
{ after(grammarAccess.getRuleConditionsRule()); } 
	 EOF 
;

// Rule RuleConditions
ruleRuleConditions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleConditionsAccess().getGroup()); }
(rule__RuleConditions__Group__0)
{ after(grammarAccess.getRuleConditionsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleElementBlock
entryRuleRuleElementBlock 
:
{ before(grammarAccess.getRuleElementBlockRule()); }
	 ruleRuleElementBlock
{ after(grammarAccess.getRuleElementBlockRule()); } 
	 EOF 
;

// Rule RuleElementBlock
ruleRuleElementBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleElementBlockAccess().getGroup()); }
(rule__RuleElementBlock__Group__0)
{ after(grammarAccess.getRuleElementBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleElement
entryRuleRuleElement 
:
{ before(grammarAccess.getRuleElementRule()); }
	 ruleRuleElement
{ after(grammarAccess.getRuleElementRule()); } 
	 EOF 
;

// Rule RuleElement
ruleRuleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleElementAccess().getAlternatives()); }
(rule__RuleElement__Alternatives)
{ after(grammarAccess.getRuleElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleModifier
entryRuleRuleModifier 
:
{ before(grammarAccess.getRuleModifierRule()); }
	 ruleRuleModifier
{ after(grammarAccess.getRuleModifierRule()); } 
	 EOF 
;

// Rule RuleModifier
ruleRuleModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleModifierAccess().getProtectedAssignment()); }
(rule__RuleModifier__ProtectedAssignment)
{ after(grammarAccess.getRuleModifierAccess().getProtectedAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement 
:
{ before(grammarAccess.getExpressionStatementRule()); }
	 ruleExpressionStatement
{ after(grammarAccess.getExpressionStatementRule()); } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionStatementAccess().getAlternatives()); }
(rule__ExpressionStatement__Alternatives)
{ after(grammarAccess.getExpressionStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstantiate
entryRuleInstantiate 
:
{ before(grammarAccess.getInstantiateRule()); }
	 ruleInstantiate
{ after(grammarAccess.getInstantiateRule()); } 
	 EOF 
;

// Rule Instantiate
ruleInstantiate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstantiateAccess().getGroup()); }
(rule__Instantiate__Group__0)
{ after(grammarAccess.getInstantiateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoopVariable
entryRuleLoopVariable 
:
{ before(grammarAccess.getLoopVariableRule()); }
	 ruleLoopVariable
{ after(grammarAccess.getLoopVariableRule()); } 
	 EOF 
;

// Rule LoopVariable
ruleLoopVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopVariableAccess().getGroup()); }
(rule__LoopVariable__Group__0)
{ after(grammarAccess.getLoopVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMap
entryRuleMap 
:
{ before(grammarAccess.getMapRule()); }
	 ruleMap
{ after(grammarAccess.getMapRule()); } 
	 EOF 
;

// Rule Map
ruleMap
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapAccess().getGroup()); }
(rule__Map__Group__0)
{ after(grammarAccess.getMapAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFor
entryRuleFor 
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForAccess().getGroup()); }
(rule__For__Group__0)
{ after(grammarAccess.getForAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhile
entryRuleWhile 
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileAccess().getGroup()); }
(rule__While__Group__0)
{ after(grammarAccess.getWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlternative
entryRuleAlternative 
:
{ before(grammarAccess.getAlternativeRule()); }
	 ruleAlternative
{ after(grammarAccess.getAlternativeRule()); } 
	 EOF 
;

// Rule Alternative
ruleAlternative
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlternativeAccess().getGroup()); }
(rule__Alternative__Group__0)
{ after(grammarAccess.getAlternativeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatementOrBlock
entryRuleStatementOrBlock 
:
{ before(grammarAccess.getStatementOrBlockRule()); }
	 ruleStatementOrBlock
{ after(grammarAccess.getStatementOrBlockRule()); } 
	 EOF 
;

// Rule StatementOrBlock
ruleStatementOrBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementOrBlockAccess().getAlternatives()); }
(rule__StatementOrBlock__Alternatives)
{ after(grammarAccess.getStatementOrBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJoin
entryRuleJoin 
:
{ before(grammarAccess.getJoinRule()); }
	 ruleJoin
{ after(grammarAccess.getJoinRule()); } 
	 EOF 
;

// Rule Join
ruleJoin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJoinAccess().getGroup()); }
(rule__Join__Group__0)
{ after(grammarAccess.getJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJoinVariable
entryRuleJoinVariable 
:
{ before(grammarAccess.getJoinVariableRule()); }
	 ruleJoinVariable
{ after(grammarAccess.getJoinVariableRule()); } 
	 EOF 
;

// Rule JoinVariable
ruleJoinVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJoinVariableAccess().getGroup()); }
(rule__JoinVariable__Group__0)
{ after(grammarAccess.getJoinVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSystemExecution
entryRuleSystemExecution 
:
{ before(grammarAccess.getSystemExecutionRule()); }
	 ruleSystemExecution
{ after(grammarAccess.getSystemExecutionRule()); } 
	 EOF 
;

// Rule SystemExecution
ruleSystemExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSystemExecutionAccess().getGroup()); }
(rule__SystemExecution__Group__0)
{ after(grammarAccess.getSystemExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompound
entryRuleCompound 
:
{ before(grammarAccess.getCompoundRule()); }
	 ruleCompound
{ after(grammarAccess.getCompoundRule()); } 
	 EOF 
;

// Rule Compound
ruleCompound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundAccess().getGroup()); }
(rule__Compound__Group__0)
{ after(grammarAccess.getCompoundAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDef
entryRuleTypeDef 
:
{ before(grammarAccess.getTypeDefRule()); }
	 ruleTypeDef
{ after(grammarAccess.getTypeDefRule()); } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDefAccess().getGroup()); }
(rule__TypeDef__Group__0)
{ after(grammarAccess.getTypeDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdvice
entryRuleAdvice 
:
{ before(grammarAccess.getAdviceRule()); }
	 ruleAdvice
{ after(grammarAccess.getAdviceRule()); } 
	 EOF 
;

// Rule Advice
ruleAdvice
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdviceAccess().getGroup()); }
(rule__Advice__Group__0)
{ after(grammarAccess.getAdviceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersionSpec
entryRuleVersionSpec 
:
{ before(grammarAccess.getVersionSpecRule()); }
	 ruleVersionSpec
{ after(grammarAccess.getVersionSpecRule()); } 
	 EOF 
;

// Rule VersionSpec
ruleVersionSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVersionSpecAccess().getGroup()); }
(rule__VersionSpec__Group__0)
{ after(grammarAccess.getVersionSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterList
entryRuleParameterList 
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterListAccess().getGroup()); }
(rule__ParameterList__Group__0)
{ after(grammarAccess.getParameterListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersionStmt
entryRuleVersionStmt 
:
{ before(grammarAccess.getVersionStmtRule()); }
	 ruleVersionStmt
{ after(grammarAccess.getVersionStmtRule()); } 
	 EOF 
;

// Rule VersionStmt
ruleVersionStmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVersionStmtAccess().getGroup()); }
(rule__VersionStmt__Group__0)
{ after(grammarAccess.getVersionStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression 
:
{ before(grammarAccess.getLogicalExpressionRule()); }
	 ruleLogicalExpression
{ after(grammarAccess.getLogicalExpressionRule()); } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalExpressionAccess().getGroup()); }
(rule__LogicalExpression__Group__0)
{ after(grammarAccess.getLogicalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalExpressionPart
entryRuleLogicalExpressionPart 
:
{ before(grammarAccess.getLogicalExpressionPartRule()); }
	 ruleLogicalExpressionPart
{ after(grammarAccess.getLogicalExpressionPartRule()); } 
	 EOF 
;

// Rule LogicalExpressionPart
ruleLogicalExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getGroup()); }
(rule__LogicalExpressionPart__Group__0)
{ after(grammarAccess.getLogicalExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator 
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
(rule__LogicalOperator__Alternatives)
{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpressionPart
entryRuleEqualityExpressionPart 
:
{ before(grammarAccess.getEqualityExpressionPartRule()); }
	 ruleEqualityExpressionPart
{ after(grammarAccess.getEqualityExpressionPartRule()); } 
	 EOF 
;

// Rule EqualityExpressionPart
ruleEqualityExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getGroup()); }
(rule__EqualityExpressionPart__Group__0)
{ after(grammarAccess.getEqualityExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator 
:
{ before(grammarAccess.getEqualityOperatorRule()); }
	 ruleEqualityOperator
{ after(grammarAccess.getEqualityOperatorRule()); } 
	 EOF 
;

// Rule EqualityOperator
ruleEqualityOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
(rule__EqualityOperator__Alternatives)
{ after(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpressionPart
entryRuleRelationalExpressionPart 
:
{ before(grammarAccess.getRelationalExpressionPartRule()); }
	 ruleRelationalExpressionPart
{ after(grammarAccess.getRelationalExpressionPartRule()); } 
	 EOF 
;

// Rule RelationalExpressionPart
ruleRelationalExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getGroup()); }
(rule__RelationalExpressionPart__Group__0)
{ after(grammarAccess.getRelationalExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator 
:
{ before(grammarAccess.getRelationalOperatorRule()); }
	 ruleRelationalOperator
{ after(grammarAccess.getRelationalOperatorRule()); } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpressionPart
entryRuleAdditiveExpressionPart 
:
{ before(grammarAccess.getAdditiveExpressionPartRule()); }
	 ruleAdditiveExpressionPart
{ after(grammarAccess.getAdditiveExpressionPartRule()); } 
	 EOF 
;

// Rule AdditiveExpressionPart
ruleAdditiveExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getGroup()); }
(rule__AdditiveExpressionPart__Group__0)
{ after(grammarAccess.getAdditiveExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator 
:
{ before(grammarAccess.getAdditiveOperatorRule()); }
	 ruleAdditiveOperator
{ after(grammarAccess.getAdditiveOperatorRule()); } 
	 EOF 
;

// Rule AdditiveOperator
ruleAdditiveOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
(rule__AdditiveOperator__Alternatives)
{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpressionPart
entryRuleMultiplicativeExpressionPart 
:
{ before(grammarAccess.getMultiplicativeExpressionPartRule()); }
	 ruleMultiplicativeExpressionPart
{ after(grammarAccess.getMultiplicativeExpressionPartRule()); } 
	 EOF 
;

// Rule MultiplicativeExpressionPart
ruleMultiplicativeExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getGroup()); }
(rule__MultiplicativeExpressionPart__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator 
:
{ before(grammarAccess.getMultiplicativeOperatorRule()); }
	 ruleMultiplicativeOperator
{ after(grammarAccess.getMultiplicativeOperatorRule()); } 
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
(rule__MultiplicativeOperator__Alternatives)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator 
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixExpression
entryRulePostfixExpression 
:
{ before(grammarAccess.getPostfixExpressionRule()); }
	 rulePostfixExpression
{ after(grammarAccess.getPostfixExpressionRule()); } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostfixExpressionAccess().getLeftAssignment()); }
(rule__PostfixExpression__LeftAssignment)
{ after(grammarAccess.getPostfixExpressionAccess().getLeftAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionOrQualifiedExecution
entryRuleExpressionOrQualifiedExecution 
:
{ before(grammarAccess.getExpressionOrQualifiedExecutionRule()); }
	 ruleExpressionOrQualifiedExecution
{ after(grammarAccess.getExpressionOrQualifiedExecutionRule()); } 
	 EOF 
;

// Rule ExpressionOrQualifiedExecution
ruleExpressionOrQualifiedExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup()); }
(rule__ExpressionOrQualifiedExecution__Group__0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnqualifiedExecution
entryRuleUnqualifiedExecution 
:
{ before(grammarAccess.getUnqualifiedExecutionRule()); }
	 ruleUnqualifiedExecution
{ after(grammarAccess.getUnqualifiedExecutionRule()); } 
	 EOF 
;

// Rule UnqualifiedExecution
ruleUnqualifiedExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getGroup()); }
(rule__UnqualifiedExecution__Group__0)
{ after(grammarAccess.getUnqualifiedExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSuperExecution
entryRuleSuperExecution 
:
{ before(grammarAccess.getSuperExecutionRule()); }
	 ruleSuperExecution
{ after(grammarAccess.getSuperExecutionRule()); } 
	 EOF 
;

// Rule SuperExecution
ruleSuperExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSuperExecutionAccess().getGroup()); }
(rule__SuperExecution__Group__0)
{ after(grammarAccess.getSuperExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstructorExecution
entryRuleConstructorExecution 
:
{ before(grammarAccess.getConstructorExecutionRule()); }
	 ruleConstructorExecution
{ after(grammarAccess.getConstructorExecutionRule()); } 
	 EOF 
;

// Rule ConstructorExecution
ruleConstructorExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructorExecutionAccess().getGroup()); }
(rule__ConstructorExecution__Group__0)
{ after(grammarAccess.getConstructorExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubCall
entryRuleSubCall 
:
{ before(grammarAccess.getSubCallRule()); }
	 ruleSubCall
{ after(grammarAccess.getSubCallRule()); } 
	 EOF 
;

// Rule SubCall
ruleSubCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubCallAccess().getAlternatives()); }
(rule__SubCall__Alternatives)
{ after(grammarAccess.getSubCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarator
entryRuleDeclarator 
:
{ before(grammarAccess.getDeclaratorRule()); }
	 ruleDeclarator
{ after(grammarAccess.getDeclaratorRule()); } 
	 EOF 
;

// Rule Declarator
ruleDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaratorAccess().getGroup()); }
(rule__Declarator__Group__0)
{ after(grammarAccess.getDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationUnit
entryRuleDeclarationUnit 
:
{ before(grammarAccess.getDeclarationUnitRule()); }
	 ruleDeclarationUnit
{ after(grammarAccess.getDeclarationUnitRule()); } 
	 EOF 
;

// Rule DeclarationUnit
ruleDeclarationUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationUnitAccess().getGroup()); }
(rule__DeclarationUnit__Group__0)
{ after(grammarAccess.getDeclarationUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotationDeclarations
entryRuleAnnotationDeclarations 
:
{ before(grammarAccess.getAnnotationDeclarationsRule()); }
	 ruleAnnotationDeclarations
{ after(grammarAccess.getAnnotationDeclarationsRule()); } 
	 EOF 
;

// Rule AnnotationDeclarations
ruleAnnotationDeclarations
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getGroup()); }
(rule__AnnotationDeclarations__Group__0)
{ after(grammarAccess.getAnnotationDeclarationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCall
entryRuleCall 
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallAccess().getGroup()); }
(rule__Call__Group__0)
{ after(grammarAccess.getCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgumentList
entryRuleArgumentList 
:
{ before(grammarAccess.getArgumentListRule()); }
	 ruleArgumentList
{ after(grammarAccess.getArgumentListRule()); } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentListAccess().getGroup()); }
(rule__ArgumentList__Group__0)
{ after(grammarAccess.getArgumentListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedArgument
entryRuleNamedArgument 
:
{ before(grammarAccess.getNamedArgumentRule()); }
	 ruleNamedArgument
{ after(grammarAccess.getNamedArgumentRule()); } 
	 EOF 
;

// Rule NamedArgument
ruleNamedArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedArgumentAccess().getGroup()); }
(rule__NamedArgument__Group__0)
{ after(grammarAccess.getNamedArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedPrefix
entryRuleQualifiedPrefix 
:
{ before(grammarAccess.getQualifiedPrefixRule()); }
	 ruleQualifiedPrefix
{ after(grammarAccess.getQualifiedPrefixRule()); } 
	 EOF 
;

// Rule QualifiedPrefix
ruleQualifiedPrefix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getGroup()); }
(rule__QualifiedPrefix__Group__0)
{ after(grammarAccess.getQualifiedPrefixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getAlternatives()); }
(rule__Constant__Alternatives)
{ after(grammarAccess.getConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumValue
entryRuleNumValue 
:
{ before(grammarAccess.getNumValueRule()); }
	 ruleNumValue
{ after(grammarAccess.getNumValueRule()); } 
	 EOF 
;

// Rule NumValue
ruleNumValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumValueAccess().getValAssignment()); }
(rule__NumValue__ValAssignment)
{ after(grammarAccess.getNumValueAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifier
entryRuleIdentifier 
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifierAccess().getAlternatives()); }
(rule__Identifier__Alternatives)
{ after(grammarAccess.getIdentifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeParameters
entryRuleTypeParameters 
:
{ before(grammarAccess.getTypeParametersRule()); }
	 ruleTypeParameters
{ after(grammarAccess.getTypeParametersRule()); } 
	 EOF 
;

// Rule TypeParameters
ruleTypeParameters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParametersAccess().getGroup()); }
(rule__TypeParameters__Group__0)
{ after(grammarAccess.getTypeParametersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContainerInitializer
entryRuleContainerInitializer 
:
{ before(grammarAccess.getContainerInitializerRule()); }
	 ruleContainerInitializer
{ after(grammarAccess.getContainerInitializerRule()); } 
	 EOF 
;

// Rule ContainerInitializer
ruleContainerInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContainerInitializerAccess().getGroup()); }
(rule__ContainerInitializer__Group__0)
{ after(grammarAccess.getContainerInitializerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContainerInitializerExpression
entryRuleContainerInitializerExpression 
:
{ before(grammarAccess.getContainerInitializerExpressionRule()); }
	 ruleContainerInitializerExpression
{ after(grammarAccess.getContainerInitializerExpressionRule()); } 
	 EOF 
;

// Rule ContainerInitializerExpression
ruleContainerInitializerExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getAlternatives()); }
(rule__ContainerInitializerExpression__Alternatives)
{ after(grammarAccess.getContainerInitializerExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ScriptContents__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptContentsAccess().getElementsAssignment_1_0()); }
(rule__ScriptContents__ElementsAssignment_1_0)
{ after(grammarAccess.getScriptContentsAccess().getElementsAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getScriptContentsAccess().getElementsAssignment_1_1()); }
(rule__ScriptContents__ElementsAssignment_1_1)
{ after(grammarAccess.getScriptContentsAccess().getElementsAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getScriptContentsAccess().getElementsAssignment_1_2()); }
(rule__ScriptContents__ElementsAssignment_1_2)
{ after(grammarAccess.getScriptContentsAccess().getElementsAssignment_1_2()); }
)

    |(
{ before(grammarAccess.getScriptContentsAccess().getElementsAssignment_1_3()); }
(rule__ScriptContents__ElementsAssignment_1_3)
{ after(grammarAccess.getScriptContentsAccess().getElementsAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementAccess().getVarDeclAssignment_0()); }
(rule__RuleElement__VarDeclAssignment_0)
{ after(grammarAccess.getRuleElementAccess().getVarDeclAssignment_0()); }
)

    |(
{ before(grammarAccess.getRuleElementAccess().getExprStmtAssignment_1()); }
(rule__RuleElement__ExprStmtAssignment_1)
{ after(grammarAccess.getRuleElementAccess().getExprStmtAssignment_1()); }
)

    |(
{ before(grammarAccess.getRuleElementAccess().getGroup_2()); }
(rule__RuleElement__Group_2__0)
{ after(grammarAccess.getRuleElementAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getRuleElementAccess().getGroup_3()); }
(rule__RuleElement__Group_3__0)
{ after(grammarAccess.getRuleElementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_0()); }
(rule__ExpressionStatement__Group_0__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_1()); }
(rule__ExpressionStatement__Group_1__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOtherExAssignment_0()); }
(rule__PrimaryExpression__OtherExAssignment_0)
{ after(grammarAccess.getPrimaryExpressionAccess().getOtherExAssignment_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnqExAssignment_1()); }
(rule__PrimaryExpression__UnqExAssignment_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getUnqExAssignment_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getSuperExAssignment_2()); }
(rule__PrimaryExpression__SuperExAssignment_2)
{ after(grammarAccess.getPrimaryExpressionAccess().getSuperExAssignment_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getSysExAssignment_3()); }
(rule__PrimaryExpression__SysExAssignment_3)
{ after(grammarAccess.getPrimaryExpressionAccess().getSysExAssignment_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getMapAssignment_4()); }
(rule__PrimaryExpression__MapAssignment_4)
{ after(grammarAccess.getPrimaryExpressionAccess().getMapAssignment_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getJoinAssignment_5()); }
(rule__PrimaryExpression__JoinAssignment_5)
{ after(grammarAccess.getPrimaryExpressionAccess().getJoinAssignment_5()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getInstantiateAssignment_6()); }
(rule__PrimaryExpression__InstantiateAssignment_6)
{ after(grammarAccess.getPrimaryExpressionAccess().getInstantiateAssignment_6()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNewExAssignment_7()); }
(rule__PrimaryExpression__NewExAssignment_7)
{ after(grammarAccess.getPrimaryExpressionAccess().getNewExAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getProjectAssignment_1_0()); }
(rule__Instantiate__ProjectAssignment_1_0)
{ after(grammarAccess.getInstantiateAccess().getProjectAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getInstantiateAccess().getRuleNameAssignment_1_1()); }
(rule__Instantiate__RuleNameAssignment_1_1)
{ after(grammarAccess.getInstantiateAccess().getRuleNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Map__SeparatorAlternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getSeparatorEqualsSignKeyword_4_0_0()); }

	'=' 

{ after(grammarAccess.getMapAccess().getSeparatorEqualsSignKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getMapAccess().getSeparatorColonKeyword_4_0_1()); }

	':' 

{ after(grammarAccess.getMapAccess().getSeparatorColonKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__SeparatorAlternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getSeparatorEqualsSignKeyword_4_0_0()); }

	'=' 

{ after(grammarAccess.getForAccess().getSeparatorEqualsSignKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getForAccess().getSeparatorColonKeyword_4_0_1()); }

	':' 

{ after(grammarAccess.getForAccess().getSeparatorColonKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatementOrBlock__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementOrBlockAccess().getExStmtAssignment_0()); }
(rule__StatementOrBlock__ExStmtAssignment_0)
{ after(grammarAccess.getStatementOrBlockAccess().getExStmtAssignment_0()); }
)

    |(
{ before(grammarAccess.getStatementOrBlockAccess().getBlockAssignment_1()); }
(rule__StatementOrBlock__BlockAssignment_1)
{ after(grammarAccess.getStatementOrBlockAccess().getBlockAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getImportAccess().getInsertAssignment_0_1()); }
(rule__Import__InsertAssignment_0_1)
{ after(grammarAccess.getImportAccess().getInsertAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprAssignment_0()); }
(rule__Expression__ExprAssignment_0)
{ after(grammarAccess.getExpressionAccess().getExprAssignment_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getInitAssignment_1()); }
(rule__Expression__InitAssignment_1)
{ after(grammarAccess.getExpressionAccess().getInitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); }

	'and' 

{ after(grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); }

	'or' 

{ after(grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getXorKeyword_2()); }

	'xor' 

{ after(grammarAccess.getLogicalOperatorAccess().getXorKeyword_2()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getImpliesKeyword_3()); }

	'implies' 

{ after(grammarAccess.getLogicalOperatorAccess().getImpliesKeyword_3()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getIffKeyword_4()); }

	'iff' 

{ after(grammarAccess.getLogicalOperatorAccess().getIffKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getEqualityOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }

	'<>' 

{ after(grammarAccess.getEqualityOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2()); }

	'!=' 

{ after(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); }

	'>' 

{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }

	'>=' 

{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }

	'<=' 

{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getNotKeyword_0()); }

	'not' 

{ after(grammarAccess.getUnaryOperatorAccess().getNotKeyword_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_1()); }

	'!' 

{ after(grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_2()); }

	'-' 

{ after(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValAssignment_0_0()); }
(rule__ExpressionOrQualifiedExecution__ValAssignment_0_0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup_0_1()); }
(rule__ExpressionOrQualifiedExecution__Group_0_1__0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getGroup_0()); }
(rule__SubCall__Group_0__0)
{ after(grammarAccess.getSubCallAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSubCallAccess().getGroup_1()); }
(rule__SubCall__Group_1__0)
{ after(grammarAccess.getSubCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__TypeAlternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getTypeFullStopKeyword_0_0_0_0()); }

	'.' 

{ after(grammarAccess.getSubCallAccess().getTypeFullStopKeyword_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getSubCallAccess().getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1()); }

	'->' 

{ after(grammarAccess.getSubCallAccess().getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNValueAssignment_0()); }
(rule__Constant__NValueAssignment_0)
{ after(grammarAccess.getConstantAccess().getNValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getSValueAssignment_1()); }
(rule__Constant__SValueAssignment_1)
{ after(grammarAccess.getConstantAccess().getSValueAssignment_1()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getQValueAssignment_2()); }
(rule__Constant__QValueAssignment_2)
{ after(grammarAccess.getConstantAccess().getQValueAssignment_2()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getBValueAssignment_3()); }
(rule__Constant__BValueAssignment_3)
{ after(grammarAccess.getConstantAccess().getBValueAssignment_3()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getNullAssignment_4()); }
(rule__Constant__NullAssignment_4)
{ after(grammarAccess.getConstantAccess().getNullAssignment_4()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getVersionAssignment_5()); }
(rule__Constant__VersionAssignment_5)
{ after(grammarAccess.getConstantAccess().getVersionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__BValueAlternatives_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getBValueTrueKeyword_3_0_0()); }

	'true' 

{ after(grammarAccess.getConstantAccess().getBValueTrueKeyword_3_0_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getBValueFalseKeyword_3_0_1()); }

	'false' 

{ after(grammarAccess.getConstantAccess().getBValueFalseKeyword_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getVERSIONTerminalRuleCall_1()); }
	RULE_VERSION
{ after(grammarAccess.getIdentifierAccess().getVERSIONTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getEXPONENTTerminalRuleCall_2()); }
	RULE_EXPONENT
{ after(grammarAccess.getIdentifierAccess().getEXPONENTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getVersionKeyword_3()); }

	'version' 

{ after(grammarAccess.getIdentifierAccess().getVersionKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameAssignment_0()); }
(rule__Type__NameAssignment_0)
{ after(grammarAccess.getTypeAccess().getNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_1()); }
(rule__Type__Group_1__0)
{ after(grammarAccess.getTypeAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_2()); }
(rule__Type__Group_2__0)
{ after(grammarAccess.getTypeAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_3()); }
(rule__Type__Group_3__0)
{ after(grammarAccess.getTypeAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_4()); }
(rule__Type__Group_4__0)
{ after(grammarAccess.getTypeAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializerExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getLogicalAssignment_0()); }
(rule__ContainerInitializerExpression__LogicalAssignment_0)
{ after(grammarAccess.getContainerInitializerExpressionAccess().getLogicalAssignment_0()); }
)

    |(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getContainerAssignment_1()); }
(rule__ContainerInitializerExpression__ContainerAssignment_1)
{ after(grammarAccess.getContainerInitializerExpressionAccess().getContainerAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ImplementationUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplementationUnit__Group__0__Impl
	rule__ImplementationUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplementationUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplementationUnitAccess().getImplementationUnitAction_0()); }
(

)
{ after(grammarAccess.getImplementationUnitAccess().getImplementationUnitAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImplementationUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplementationUnit__Group__1__Impl
	rule__ImplementationUnit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplementationUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplementationUnitAccess().getImportsAssignment_1()); }
(rule__ImplementationUnit__ImportsAssignment_1)*
{ after(grammarAccess.getImplementationUnitAccess().getImportsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImplementationUnit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplementationUnit__Group__2__Impl
	rule__ImplementationUnit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplementationUnit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplementationUnitAccess().getRequiresAssignment_2()); }
(rule__ImplementationUnit__RequiresAssignment_2)*
{ after(grammarAccess.getImplementationUnitAccess().getRequiresAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImplementationUnit__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplementationUnit__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplementationUnit__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplementationUnitAccess().getScriptsAssignment_3()); }
(rule__ImplementationUnit__ScriptsAssignment_3)*
{ after(grammarAccess.getImplementationUnitAccess().getScriptsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Require__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Require__Group__0__Impl
	rule__Require__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequireAccess().getRequireVTLKeyword_0()); }

	'requireVTL' 

{ after(grammarAccess.getRequireAccess().getRequireVTLKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Require__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Require__Group__1__Impl
	rule__Require__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequireAccess().getNameAssignment_1()); }
(rule__Require__NameAssignment_1)
{ after(grammarAccess.getRequireAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Require__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Require__Group__2__Impl
	rule__Require__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequireAccess().getVersionSpecAssignment_2()); }
(rule__Require__VersionSpecAssignment_2)
{ after(grammarAccess.getRequireAccess().getVersionSpecAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Require__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Require__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Require__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequireAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getRequireAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LanguageUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__0__Impl
	rule__LanguageUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getAdvicesAssignment_0()); }
(rule__LanguageUnit__AdvicesAssignment_0)*
{ after(grammarAccess.getLanguageUnitAccess().getAdvicesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__1__Impl
	rule__LanguageUnit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getVilScriptKeyword_1()); }

	'vilScript' 

{ after(grammarAccess.getLanguageUnitAccess().getVilScriptKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__2__Impl
	rule__LanguageUnit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getNameAssignment_2()); }
(rule__LanguageUnit__NameAssignment_2)
{ after(grammarAccess.getLanguageUnitAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__3__Impl
	rule__LanguageUnit__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getLanguageUnitAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__4__Impl
	rule__LanguageUnit__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getParamAssignment_4()); }
(rule__LanguageUnit__ParamAssignment_4)?
{ after(grammarAccess.getLanguageUnitAccess().getParamAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__5__Impl
	rule__LanguageUnit__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getLanguageUnitAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__6__Impl
	rule__LanguageUnit__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getParentAssignment_6()); }
(rule__LanguageUnit__ParentAssignment_6)?
{ after(grammarAccess.getLanguageUnitAccess().getParentAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__7__Impl
	rule__LanguageUnit__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getLeftCurlyBracketKeyword_7()); }

	'{' 

{ after(grammarAccess.getLanguageUnitAccess().getLeftCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__8__Impl
	rule__LanguageUnit__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getVersionAssignment_8()); }
(rule__LanguageUnit__VersionAssignment_8)?
{ after(grammarAccess.getLanguageUnitAccess().getVersionAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__9__Impl
	rule__LanguageUnit__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getLoadPropertiesAssignment_9()); }
(rule__LanguageUnit__LoadPropertiesAssignment_9)*
{ after(grammarAccess.getLanguageUnitAccess().getLoadPropertiesAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__10__Impl
	rule__LanguageUnit__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getContentsAssignment_10()); }
(rule__LanguageUnit__ContentsAssignment_10)
{ after(grammarAccess.getLanguageUnitAccess().getContentsAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__11__Impl
	rule__LanguageUnit__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getRightCurlyBracketKeyword_11()); }

	'}' 

{ after(grammarAccess.getLanguageUnitAccess().getRightCurlyBracketKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getSemicolonKeyword_12()); }
(
	';' 
)?
{ after(grammarAccess.getLanguageUnitAccess().getSemicolonKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}




























rule__ScriptParentDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScriptParentDecl__Group__0__Impl
	rule__ScriptParentDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptParentDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptParentDeclAccess().getExtendsKeyword_0()); }

	'extends' 

{ after(grammarAccess.getScriptParentDeclAccess().getExtendsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScriptParentDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScriptParentDecl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptParentDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptParentDeclAccess().getNameAssignment_1()); }
(rule__ScriptParentDecl__NameAssignment_1)
{ after(grammarAccess.getScriptParentDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LoadProperties__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoadProperties__Group__0__Impl
	rule__LoadProperties__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadProperties__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadPropertiesAccess().getLoadKeyword_0()); }

	'load' 

{ after(grammarAccess.getLoadPropertiesAccess().getLoadKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoadProperties__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoadProperties__Group__1__Impl
	rule__LoadProperties__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadProperties__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadPropertiesAccess().getPropertiesKeyword_1()); }

	'properties' 

{ after(grammarAccess.getLoadPropertiesAccess().getPropertiesKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoadProperties__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoadProperties__Group__2__Impl
	rule__LoadProperties__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadProperties__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadPropertiesAccess().getPathAssignment_2()); }
(rule__LoadProperties__PathAssignment_2)
{ after(grammarAccess.getLoadPropertiesAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoadProperties__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoadProperties__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadProperties__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadPropertiesAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getLoadPropertiesAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ScriptContents__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScriptContents__Group__0__Impl
	rule__ScriptContents__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptContents__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptContentsAccess().getScriptContentsAction_0()); }
(

)
{ after(grammarAccess.getScriptContentsAccess().getScriptContentsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScriptContents__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScriptContents__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptContents__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptContentsAccess().getAlternatives_1()); }
(rule__ScriptContents__Alternatives_1)*
{ after(grammarAccess.getScriptContentsAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__0__Impl
	rule__RuleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getRuleDeclarationAction_0()); }
(

)
{ after(grammarAccess.getRuleDeclarationAccess().getRuleDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__1__Impl
	rule__RuleDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroup_1()); }
(rule__RuleDeclaration__Group_1__0)?
{ after(grammarAccess.getRuleDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__2__Impl
	rule__RuleDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getConditionsAssignment_2()); }
(rule__RuleDeclaration__ConditionsAssignment_2)?
{ after(grammarAccess.getRuleDeclarationAccess().getConditionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__3__Impl
	rule__RuleDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getBlockAssignment_3()); }
(rule__RuleDeclaration__BlockAssignment_3)
{ after(grammarAccess.getRuleDeclarationAccess().getBlockAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getSemicolonKeyword_4()); }
(
	';' 
)?
{ after(grammarAccess.getRuleDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RuleDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_1__0__Impl
	rule__RuleDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getAnnotationsAssignment_1_0()); }
(rule__RuleDeclaration__AnnotationsAssignment_1_0)?
{ after(grammarAccess.getRuleDeclarationAccess().getAnnotationsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_1__1__Impl
	rule__RuleDeclaration__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getModifierAssignment_1_1()); }
(rule__RuleDeclaration__ModifierAssignment_1_1)?
{ after(grammarAccess.getRuleDeclarationAccess().getModifierAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_1__2__Impl
	rule__RuleDeclaration__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getTypeAssignment_1_2()); }
(rule__RuleDeclaration__TypeAssignment_1_2)?
{ after(grammarAccess.getRuleDeclarationAccess().getTypeAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_1__3__Impl
	rule__RuleDeclaration__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getNameAssignment_1_3()); }
(rule__RuleDeclaration__NameAssignment_1_3)
{ after(grammarAccess.getRuleDeclarationAccess().getNameAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_1__4__Impl
	rule__RuleDeclaration__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getLeftParenthesisKeyword_1_4()); }

	'(' 

{ after(grammarAccess.getRuleDeclarationAccess().getLeftParenthesisKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_1__5__Impl
	rule__RuleDeclaration__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getParamListAssignment_1_5()); }
(rule__RuleDeclaration__ParamListAssignment_1_5)?
{ after(grammarAccess.getRuleDeclarationAccess().getParamListAssignment_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_1__6__Impl
	rule__RuleDeclaration__Group_1__7
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getRightParenthesisKeyword_1_6()); }

	')' 

{ after(grammarAccess.getRuleDeclarationAccess().getRightParenthesisKeyword_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_1__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_1__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_1__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getEqualsSignKeyword_1_7()); }

	'=' 

{ after(grammarAccess.getRuleDeclarationAccess().getEqualsSignKeyword_1_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__RuleConditions__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleConditions__Group__0__Impl
	rule__RuleConditions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getRuleConditionsAction_0()); }
(

)
{ after(grammarAccess.getRuleConditionsAccess().getRuleConditionsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleConditions__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleConditions__Group__1__Impl
	rule__RuleConditions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getPostconditionAssignment_1()); }
(rule__RuleConditions__PostconditionAssignment_1)?
{ after(grammarAccess.getRuleConditionsAccess().getPostconditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleConditions__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleConditions__Group__2__Impl
	rule__RuleConditions__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getRuleConditionsAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleConditions__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleConditions__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getGroup_3()); }
(rule__RuleConditions__Group_3__0)?
{ after(grammarAccess.getRuleConditionsAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RuleConditions__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleConditions__Group_3__0__Impl
	rule__RuleConditions__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getPreconditionsAssignment_3_0()); }
(rule__RuleConditions__PreconditionsAssignment_3_0)
{ after(grammarAccess.getRuleConditionsAccess().getPreconditionsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleConditions__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleConditions__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getGroup_3_1()); }
(rule__RuleConditions__Group_3_1__0)*
{ after(grammarAccess.getRuleConditionsAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleConditions__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleConditions__Group_3_1__0__Impl
	rule__RuleConditions__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getRuleConditionsAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleConditions__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleConditions__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getPreconditionsAssignment_3_1_1()); }
(rule__RuleConditions__PreconditionsAssignment_3_1_1)
{ after(grammarAccess.getRuleConditionsAccess().getPreconditionsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleElementBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleElementBlock__Group__0__Impl
	rule__RuleElementBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElementBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementBlockAccess().getRuleElementBlockAction_0()); }
(

)
{ after(grammarAccess.getRuleElementBlockAccess().getRuleElementBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleElementBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleElementBlock__Group__1__Impl
	rule__RuleElementBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElementBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getRuleElementBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleElementBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleElementBlock__Group__2__Impl
	rule__RuleElementBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElementBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementBlockAccess().getElementsAssignment_2()); }
(rule__RuleElementBlock__ElementsAssignment_2)*
{ after(grammarAccess.getRuleElementBlockAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleElementBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleElementBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElementBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getRuleElementBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RuleElement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleElement__Group_2__0__Impl
	rule__RuleElement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementAccess().getWhileAssignment_2_0()); }
(rule__RuleElement__WhileAssignment_2_0)
{ after(grammarAccess.getRuleElementAccess().getWhileAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleElement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleElement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementAccess().getSemicolonKeyword_2_1()); }
(
	';' 
)?
{ after(grammarAccess.getRuleElementAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleElement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleElement__Group_3__0__Impl
	rule__RuleElement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementAccess().getForAssignment_3_0()); }
(rule__RuleElement__ForAssignment_3_0)
{ after(grammarAccess.getRuleElementAccess().getForAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleElement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleElement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementAccess().getSemicolonKeyword_3_1()); }
(
	';' 
)?
{ after(grammarAccess.getRuleElementAccess().getSemicolonKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__0__Impl
	rule__ExpressionStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_0_0()); }
(rule__ExpressionStatement__Group_0_0__0)?
{ after(grammarAccess.getExpressionStatementAccess().getGroup_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__1__Impl
	rule__ExpressionStatement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExprAssignment_0_1()); }
(rule__ExpressionStatement__ExprAssignment_0_1)
{ after(grammarAccess.getExpressionStatementAccess().getExprAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_0_2()); }

	';' 

{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionStatement__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0_0__0__Impl
	rule__ExpressionStatement__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getVarAssignment_0_0_0()); }
(rule__ExpressionStatement__VarAssignment_0_0_0)
{ after(grammarAccess.getExpressionStatementAccess().getVarAssignment_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0_0__1__Impl
	rule__ExpressionStatement__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_0_0_1()); }
(rule__ExpressionStatement__Group_0_0_1__0)?
{ after(grammarAccess.getExpressionStatementAccess().getGroup_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getEqualsSignKeyword_0_0_2()); }

	'=' 

{ after(grammarAccess.getExpressionStatementAccess().getEqualsSignKeyword_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionStatement__Group_0_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0_0_1__0__Impl
	rule__ExpressionStatement__Group_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getFullStopKeyword_0_0_1_0()); }

	'.' 

{ after(grammarAccess.getExpressionStatementAccess().getFullStopKeyword_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getFieldAssignment_0_0_1_1()); }
(rule__ExpressionStatement__FieldAssignment_0_0_1_1)
{ after(grammarAccess.getExpressionStatementAccess().getFieldAssignment_0_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_1__0__Impl
	rule__ExpressionStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getAltAssignment_1_0()); }
(rule__ExpressionStatement__AltAssignment_1_0)
{ after(grammarAccess.getExpressionStatementAccess().getAltAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1_1()); }
(
	';' 
)?
{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Instantiate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instantiate__Group__0__Impl
	rule__Instantiate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getInstantiateKeyword_0()); }

	'instantiate' 

{ after(grammarAccess.getInstantiateAccess().getInstantiateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instantiate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instantiate__Group__1__Impl
	rule__Instantiate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getAlternatives_1()); }
(rule__Instantiate__Alternatives_1)
{ after(grammarAccess.getInstantiateAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instantiate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instantiate__Group__2__Impl
	rule__Instantiate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getInstantiateAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instantiate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instantiate__Group__3__Impl
	rule__Instantiate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getParamAssignment_3()); }
(rule__Instantiate__ParamAssignment_3)?
{ after(grammarAccess.getInstantiateAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instantiate__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instantiate__Group__4__Impl
	rule__Instantiate__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getInstantiateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instantiate__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instantiate__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getVersionSpecAssignment_5()); }
(rule__Instantiate__VersionSpecAssignment_5)?
{ after(grammarAccess.getInstantiateAccess().getVersionSpecAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__LoopVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopVariable__Group__0__Impl
	rule__LoopVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopVariableAccess().getTypeAssignment_0()); }
(rule__LoopVariable__TypeAssignment_0)?
{ after(grammarAccess.getLoopVariableAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopVariableAccess().getVarAssignment_1()); }
(rule__LoopVariable__VarAssignment_1)
{ after(grammarAccess.getLoopVariableAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Map__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__0__Impl
	rule__Map__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getMapKeyword_0()); }

	'map' 

{ after(grammarAccess.getMapAccess().getMapKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__1__Impl
	rule__Map__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMapAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__2__Impl
	rule__Map__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getVarAssignment_2()); }
(rule__Map__VarAssignment_2)
{ after(grammarAccess.getMapAccess().getVarAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__3__Impl
	rule__Map__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getGroup_3()); }
(rule__Map__Group_3__0)*
{ after(grammarAccess.getMapAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__4__Impl
	rule__Map__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getSeparatorAssignment_4()); }
(rule__Map__SeparatorAssignment_4)
{ after(grammarAccess.getMapAccess().getSeparatorAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__5__Impl
	rule__Map__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getExprAssignment_5()); }
(rule__Map__ExprAssignment_5)
{ after(grammarAccess.getMapAccess().getExprAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__6__Impl
	rule__Map__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getMapAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getBlockAssignment_7()); }
(rule__Map__BlockAssignment_7)
{ after(grammarAccess.getMapAccess().getBlockAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Map__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group_3__0__Impl
	rule__Map__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getMapAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Map__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getVarAssignment_3_1()); }
(rule__Map__VarAssignment_3_1)
{ after(grammarAccess.getMapAccess().getVarAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__For__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getVarAssignment_2()); }
(rule__For__VarAssignment_2)
{ after(grammarAccess.getForAccess().getVarAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getGroup_3()); }
(rule__For__Group_3__0)*
{ after(grammarAccess.getForAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__4__Impl
	rule__For__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getSeparatorAssignment_4()); }
(rule__For__SeparatorAssignment_4)
{ after(grammarAccess.getForAccess().getSeparatorAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__5__Impl
	rule__For__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getExprAssignment_5()); }
(rule__For__ExprAssignment_5)
{ after(grammarAccess.getForAccess().getExprAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__6__Impl
	rule__For__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getForAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getBlockAssignment_7()); }
(rule__For__BlockAssignment_7)
{ after(grammarAccess.getForAccess().getBlockAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__For__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group_3__0__Impl
	rule__For__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getForAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getVarAssignment_3_1()); }
(rule__For__VarAssignment_3_1)
{ after(grammarAccess.getForAccess().getVarAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__While__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExprAssignment_2()); }
(rule__While__ExprAssignment_2)
{ after(grammarAccess.getWhileAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getBlockAssignment_4()); }
(rule__While__BlockAssignment_4)
{ after(grammarAccess.getWhileAccess().getBlockAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Alternative__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__0__Impl
	rule__Alternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getAlternativeAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__1__Impl
	rule__Alternative__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAlternativeAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__2__Impl
	rule__Alternative__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getExprAssignment_2()); }
(rule__Alternative__ExprAssignment_2)
{ after(grammarAccess.getAlternativeAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__3__Impl
	rule__Alternative__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAlternativeAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__4__Impl
	rule__Alternative__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getIfAssignment_4()); }
(rule__Alternative__IfAssignment_4)
{ after(grammarAccess.getAlternativeAccess().getIfAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getGroup_5()); }
(rule__Alternative__Group_5__0)?
{ after(grammarAccess.getAlternativeAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Alternative__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group_5__0__Impl
	rule__Alternative__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getElseKeyword_5_0()); }
(
	'else' 
)
{ after(grammarAccess.getAlternativeAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getElseAssignment_5_1()); }
(rule__Alternative__ElseAssignment_5_1)
{ after(grammarAccess.getAlternativeAccess().getElseAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Join__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__0__Impl
	rule__Join__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getJoinKeyword_0()); }

	'join' 

{ after(grammarAccess.getJoinAccess().getJoinKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__1__Impl
	rule__Join__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__2__Impl
	rule__Join__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getVar1Assignment_2()); }
(rule__Join__Var1Assignment_2)
{ after(grammarAccess.getJoinAccess().getVar1Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__3__Impl
	rule__Join__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getJoinAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__4__Impl
	rule__Join__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getVar2Assignment_4()); }
(rule__Join__Var2Assignment_4)
{ after(grammarAccess.getJoinAccess().getVar2Assignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__5__Impl
	rule__Join__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getJoinAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getGroup_6()); }
(rule__Join__Group_6__0)?
{ after(grammarAccess.getJoinAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Join__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group_6__0__Impl
	rule__Join__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getWithKeyword_6_0()); }

	'with' 

{ after(grammarAccess.getJoinAccess().getWithKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group_6__1__Impl
	rule__Join__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_6_1()); }

	'(' 

{ after(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group_6__2__Impl
	rule__Join__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getConditionAssignment_6_2()); }
(rule__Join__ConditionAssignment_6_2)
{ after(grammarAccess.getJoinAccess().getConditionAssignment_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Join__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getRightParenthesisKeyword_6_3()); }

	')' 

{ after(grammarAccess.getJoinAccess().getRightParenthesisKeyword_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__JoinVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinVariable__Group__0__Impl
	rule__JoinVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinVariableAccess().getExclAssignment_0()); }
(rule__JoinVariable__ExclAssignment_0)?
{ after(grammarAccess.getJoinVariableAccess().getExclAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinVariable__Group__1__Impl
	rule__JoinVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinVariableAccess().getVarAssignment_1()); }
(rule__JoinVariable__VarAssignment_1)
{ after(grammarAccess.getJoinVariableAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinVariable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinVariable__Group__2__Impl
	rule__JoinVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinVariable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinVariableAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getJoinVariableAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinVariable__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinVariable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinVariable__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinVariableAccess().getExprAssignment_3()); }
(rule__JoinVariable__ExprAssignment_3)
{ after(grammarAccess.getJoinVariableAccess().getExprAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SystemExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SystemExecution__Group__0__Impl
	rule__SystemExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemExecutionAccess().getExecuteKeyword_0()); }

	'execute' 

{ after(grammarAccess.getSystemExecutionAccess().getExecuteKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SystemExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SystemExecution__Group__1__Impl
	rule__SystemExecution__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemExecutionAccess().getCallAssignment_1()); }
(rule__SystemExecution__CallAssignment_1)
{ after(grammarAccess.getSystemExecutionAccess().getCallAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SystemExecution__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SystemExecution__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemExecution__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemExecutionAccess().getCallsAssignment_2()); }
(rule__SystemExecution__CallsAssignment_2)*
{ after(grammarAccess.getSystemExecutionAccess().getCallsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstAssignment_0()); }
(rule__VariableDeclaration__ConstAssignment_0)?
{ after(grammarAccess.getVariableDeclarationAccess().getConstAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
(rule__VariableDeclaration__TypeAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
(rule__VariableDeclaration__NameAssignment_2)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
	rule__VariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
(rule__VariableDeclaration__Group_3__0)?
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__0__Impl
	rule__VariableDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }

	'=' 

{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
(rule__VariableDeclaration__ExpressionAssignment_3_1)
{ after(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Compound__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__0__Impl
	rule__Compound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getAbstractAssignment_0()); }
(rule__Compound__AbstractAssignment_0)?
{ after(grammarAccess.getCompoundAccess().getAbstractAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__1__Impl
	rule__Compound__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getCompoundKeyword_1()); }

	'compound' 

{ after(grammarAccess.getCompoundAccess().getCompoundKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__2__Impl
	rule__Compound__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getNameAssignment_2()); }
(rule__Compound__NameAssignment_2)
{ after(grammarAccess.getCompoundAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__3__Impl
	rule__Compound__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getGroup_3()); }
(rule__Compound__Group_3__0)?
{ after(grammarAccess.getCompoundAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__4__Impl
	rule__Compound__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getCompoundAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__5__Impl
	rule__Compound__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getVarsAssignment_5()); }
(rule__Compound__VarsAssignment_5)*
{ after(grammarAccess.getCompoundAccess().getVarsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__6__Impl
	rule__Compound__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getCompoundAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getSemicolonKeyword_7()); }
(
	';' 
)?
{ after(grammarAccess.getCompoundAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Compound__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group_3__0__Impl
	rule__Compound__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getRefinesKeyword_3_0()); }

	'refines' 

{ after(grammarAccess.getCompoundAccess().getRefinesKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getSuperAssignment_3_1()); }
(rule__Compound__SuperAssignment_3_1)
{ after(grammarAccess.getCompoundAccess().getSuperAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__0__Impl
	rule__TypeDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getTypedefKeyword_0()); }

	'typedef' 

{ after(grammarAccess.getTypeDefAccess().getTypedefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__1__Impl
	rule__TypeDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getNameAssignment_1()); }
(rule__TypeDef__NameAssignment_1)
{ after(grammarAccess.getTypeDefAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__2__Impl
	rule__TypeDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getTypeAssignment_2()); }
(rule__TypeDef__TypeAssignment_2)
{ after(grammarAccess.getTypeDefAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getTypeDefAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Advice__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__0__Impl
	rule__Advice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getAdviceKeyword_0()); }

	'@advice' 

{ after(grammarAccess.getAdviceAccess().getAdviceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__1__Impl
	rule__Advice__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAdviceAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__2__Impl
	rule__Advice__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getNameAssignment_2()); }
(rule__Advice__NameAssignment_2)
{ after(grammarAccess.getAdviceAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__3__Impl
	rule__Advice__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAdviceAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getVersionSpecAssignment_4()); }
(rule__Advice__VersionSpecAssignment_4)?
{ after(grammarAccess.getAdviceAccess().getVersionSpecAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VersionSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionSpec__Group__0__Impl
	rule__VersionSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionSpecAccess().getWithKeyword_0()); }

	'with' 

{ after(grammarAccess.getVersionSpecAccess().getWithKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionSpecAccess().getRestrictionAssignment_1()); }
(rule__VersionSpec__RestrictionAssignment_1)
{ after(grammarAccess.getVersionSpecAccess().getRestrictionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamAssignment_0()); }
(rule__ParameterList__ParamAssignment_0)
{ after(grammarAccess.getParameterListAccess().getParamAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getGroup_1()); }
(rule__ParameterList__Group_1__0)*
{ after(grammarAccess.getParameterListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_1__0__Impl
	rule__ParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamAssignment_1_1()); }
(rule__ParameterList__ParamAssignment_1_1)
{ after(grammarAccess.getParameterListAccess().getParamAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_0()); }
(rule__Parameter__TypeAssignment_0)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
(rule__Parameter__NameAssignment_1)
{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_2()); }
(rule__Parameter__Group_2__0)?
{ after(grammarAccess.getParameterAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameter__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_2__0__Impl
	rule__Parameter__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getParameterAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDfltAssignment_2_1()); }
(rule__Parameter__DfltAssignment_2_1)
{ after(grammarAccess.getParameterAccess().getDfltAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VersionStmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionStmt__Group__0__Impl
	rule__VersionStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getVersionKeyword_0()); }

	'version' 

{ after(grammarAccess.getVersionStmtAccess().getVersionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionStmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionStmt__Group__1__Impl
	rule__VersionStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getVersionAssignment_1()); }
(rule__VersionStmt__VersionAssignment_1)
{ after(grammarAccess.getVersionStmtAccess().getVersionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionStmt__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionStmt__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getVersionStmtAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getAlternatives_0()); }
(rule__Import__Alternatives_0)
{ after(grammarAccess.getImportAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameAssignment_1()); }
(rule__Import__NameAssignment_1)
{ after(grammarAccess.getImportAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getWildcardAssignment_2()); }
(rule__Import__WildcardAssignment_2)?
{ after(grammarAccess.getImportAccess().getWildcardAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__3__Impl
	rule__Import__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getVersionSpecAssignment_3()); }
(rule__Import__VersionSpecAssignment_3)?
{ after(grammarAccess.getImportAccess().getVersionSpecAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getImportAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LogicalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpression__Group__0__Impl
	rule__LogicalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getLeftAssignment_0()); }
(rule__LogicalExpression__LeftAssignment_0)
{ after(grammarAccess.getLogicalExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1()); }
(rule__LogicalExpression__RightAssignment_1)*
{ after(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpressionPart__Group__0__Impl
	rule__LogicalExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getOpAssignment_0()); }
(rule__LogicalExpressionPart__OpAssignment_0)
{ after(grammarAccess.getLogicalExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getExAssignment_1()); }
(rule__LogicalExpressionPart__ExAssignment_1)
{ after(grammarAccess.getLogicalExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getLeftAssignment_0()); }
(rule__EqualityExpression__LeftAssignment_0)
{ after(grammarAccess.getEqualityExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1()); }
(rule__EqualityExpression__RightAssignment_1)?
{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpressionPart__Group__0__Impl
	rule__EqualityExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getOpAssignment_0()); }
(rule__EqualityExpressionPart__OpAssignment_0)
{ after(grammarAccess.getEqualityExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getExAssignment_1()); }
(rule__EqualityExpressionPart__ExAssignment_1)
{ after(grammarAccess.getEqualityExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLeftAssignment_0()); }
(rule__RelationalExpression__LeftAssignment_0)
{ after(grammarAccess.getRelationalExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)?
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_0()); }
(rule__RelationalExpression__RightAssignment_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRight2Assignment_1_1()); }
(rule__RelationalExpression__Right2Assignment_1_1)?
{ after(grammarAccess.getRelationalExpressionAccess().getRight2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpressionPart__Group__0__Impl
	rule__RelationalExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getOpAssignment_0()); }
(rule__RelationalExpressionPart__OpAssignment_0)
{ after(grammarAccess.getRelationalExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getExAssignment_1()); }
(rule__RelationalExpressionPart__ExAssignment_1)
{ after(grammarAccess.getRelationalExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getLeftAssignment_0()); }
(rule__AdditiveExpression__LeftAssignment_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1()); }
(rule__AdditiveExpression__RightAssignment_1)*
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpressionPart__Group__0__Impl
	rule__AdditiveExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getOpAssignment_0()); }
(rule__AdditiveExpressionPart__OpAssignment_0)
{ after(grammarAccess.getAdditiveExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getExAssignment_1()); }
(rule__AdditiveExpressionPart__ExAssignment_1)
{ after(grammarAccess.getAdditiveExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getLeftAssignment_0()); }
(rule__MultiplicativeExpression__LeftAssignment_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1()); }
(rule__MultiplicativeExpression__RightAssignment_1)?
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpressionPart__Group__0__Impl
	rule__MultiplicativeExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getOpAssignment_0()); }
(rule__MultiplicativeExpressionPart__OpAssignment_0)
{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getExprAssignment_1()); }
(rule__MultiplicativeExpressionPart__ExprAssignment_1)
{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
(rule__UnaryExpression__OpAssignment_0)?
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1()); }
(rule__UnaryExpression__ExprAssignment_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionOrQualifiedExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group__0__Impl
	rule__ExpressionOrQualifiedExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getAlternatives_0()); }
(rule__ExpressionOrQualifiedExecution__Alternatives_0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrQualifiedExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsAssignment_1()); }
(rule__ExpressionOrQualifiedExecution__CallsAssignment_1)*
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionOrQualifiedExecution__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group_0_1__0__Impl
	rule__ExpressionOrQualifiedExecution__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getLeftParenthesisKeyword_0_1_0()); }

	'(' 

{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getLeftParenthesisKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrQualifiedExecution__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group_0_1__1__Impl
	rule__ExpressionOrQualifiedExecution__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisAssignment_0_1_1()); }
(rule__ExpressionOrQualifiedExecution__ParenthesisAssignment_0_1_1)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrQualifiedExecution__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getRightParenthesisKeyword_0_1_2()); }

	')' 

{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getRightParenthesisKeyword_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnqualifiedExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnqualifiedExecution__Group__0__Impl
	rule__UnqualifiedExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallAssignment_0()); }
(rule__UnqualifiedExecution__CallAssignment_0)
{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnqualifiedExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnqualifiedExecution__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallsAssignment_1()); }
(rule__UnqualifiedExecution__CallsAssignment_1)*
{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SuperExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__0__Impl
	rule__SuperExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getSuperKeyword_0()); }

	'super' 

{ after(grammarAccess.getSuperExecutionAccess().getSuperKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__1__Impl
	rule__SuperExecution__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getSuperExecutionAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExecution__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__2__Impl
	rule__SuperExecution__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallAssignment_2()); }
(rule__SuperExecution__CallAssignment_2)
{ after(grammarAccess.getSuperExecutionAccess().getCallAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExecution__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallsAssignment_3()); }
(rule__SuperExecution__CallsAssignment_3)*
{ after(grammarAccess.getSuperExecutionAccess().getCallsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConstructorExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__0__Impl
	rule__ConstructorExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getConstructorExecutionAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__1__Impl
	rule__ConstructorExecution__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getTypeAssignment_1()); }
(rule__ConstructorExecution__TypeAssignment_1)
{ after(grammarAccess.getConstructorExecutionAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__2__Impl
	rule__ConstructorExecution__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getConstructorExecutionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__3__Impl
	rule__ConstructorExecution__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getParamAssignment_3()); }
(rule__ConstructorExecution__ParamAssignment_3)?
{ after(grammarAccess.getConstructorExecutionAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__4__Impl
	rule__ConstructorExecution__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getConstructorExecutionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getCallsAssignment_5()); }
(rule__ConstructorExecution__CallsAssignment_5)*
{ after(grammarAccess.getConstructorExecutionAccess().getCallsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SubCall__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_0__0__Impl
	rule__SubCall__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getTypeAssignment_0_0()); }
(rule__SubCall__TypeAssignment_0_0)
{ after(grammarAccess.getSubCallAccess().getTypeAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubCall__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getCallAssignment_0_1()); }
(rule__SubCall__CallAssignment_0_1)
{ after(grammarAccess.getSubCallAccess().getCallAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_1__0__Impl
	rule__SubCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getSubCallAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_1__1__Impl
	rule__SubCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getArrayExAssignment_1_1()); }
(rule__SubCall__ArrayExAssignment_1_1)
{ after(grammarAccess.getSubCallAccess().getArrayExAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getSubCallAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__0__Impl
	rule__Declarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclAssignment_0()); }
(rule__Declarator__DeclAssignment_0)
{ after(grammarAccess.getDeclaratorAccess().getDeclAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__1__Impl
	rule__Declarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getGroup_1()); }
(rule__Declarator__Group_1__0)*
{ after(grammarAccess.getDeclaratorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declarator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group_1__0__Impl
	rule__Declarator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getSemicolonKeyword_1_0()); }

	';' 

{ after(grammarAccess.getDeclaratorAccess().getSemicolonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclAssignment_1_1()); }
(rule__Declarator__DeclAssignment_1_1)
{ after(grammarAccess.getDeclaratorAccess().getDeclAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
(rule__Declaration__TypeAssignment_0)?
{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsAssignment_1()); }
(rule__Declaration__UnitsAssignment_1)
{ after(grammarAccess.getDeclarationAccess().getUnitsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getGroup_2()); }
(rule__Declaration__Group_2__0)*
{ after(grammarAccess.getDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_2__0__Impl
	rule__Declaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getDeclarationAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsAssignment_2_1()); }
(rule__Declaration__UnitsAssignment_2_1)
{ after(grammarAccess.getDeclarationAccess().getUnitsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclarationUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group__0__Impl
	rule__DeclarationUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getIdAssignment_0()); }
(rule__DeclarationUnit__IdAssignment_0)
{ after(grammarAccess.getDeclarationUnitAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getGroup_1()); }
(rule__DeclarationUnit__Group_1__0)?
{ after(grammarAccess.getDeclarationUnitAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclarationUnit__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group_1__0__Impl
	rule__DeclarationUnit__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getDeclarationUnitAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationUnit__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getDefltAssignment_1_1()); }
(rule__DeclarationUnit__DefltAssignment_1_1)
{ after(grammarAccess.getDeclarationUnitAccess().getDefltAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnnotationDeclarations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclarations__Group__0__Impl
	rule__AnnotationDeclarations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getAnnotationDeclarationsAction_0()); }
(

)
{ after(grammarAccess.getAnnotationDeclarationsAccess().getAnnotationDeclarationsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationDeclarations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclarations__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getGroup_1()); }
(rule__AnnotationDeclarations__Group_1__0)*
{ after(grammarAccess.getAnnotationDeclarationsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnnotationDeclarations__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclarations__Group_1__0__Impl
	rule__AnnotationDeclarations__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getCommercialAtKeyword_1_0()); }

	'@' 

{ after(grammarAccess.getAnnotationDeclarationsAccess().getCommercialAtKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationDeclarations__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclarations__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getIdAssignment_1_1()); }
(rule__AnnotationDeclarations__IdAssignment_1_1)
{ after(grammarAccess.getAnnotationDeclarationsAccess().getIdAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getNameAssignment_0()); }
(rule__Call__NameAssignment_0)
{ after(grammarAccess.getCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getDeclAssignment_2()); }
(rule__Call__DeclAssignment_2)?
{ after(grammarAccess.getCallAccess().getDeclAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__3__Impl
	rule__Call__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParamAssignment_3()); }
(rule__Call__ParamAssignment_3)?
{ after(grammarAccess.getCallAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArgumentList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group__0__Impl
	rule__ArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamAssignment_0()); }
(rule__ArgumentList__ParamAssignment_0)
{ after(grammarAccess.getArgumentListAccess().getParamAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getGroup_1()); }
(rule__ArgumentList__Group_1__0)*
{ after(grammarAccess.getArgumentListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group_1__0__Impl
	rule__ArgumentList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getArgumentListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamAssignment_1_1()); }
(rule__ArgumentList__ParamAssignment_1_1)
{ after(grammarAccess.getArgumentListAccess().getParamAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedArgument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group__0__Impl
	rule__NamedArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getGroup_0()); }
(rule__NamedArgument__Group_0__0)?
{ after(grammarAccess.getNamedArgumentAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getExAssignment_1()); }
(rule__NamedArgument__ExAssignment_1)
{ after(grammarAccess.getNamedArgumentAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedArgument__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group_0__0__Impl
	rule__NamedArgument__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getNameAssignment_0_0()); }
(rule__NamedArgument__NameAssignment_0_0)
{ after(grammarAccess.getNamedArgumentAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgument__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_0_1()); }

	'=' 

{ after(grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedPrefix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group__0__Impl
	rule__QualifiedPrefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_0()); }
(rule__QualifiedPrefix__QnameAssignment_0)
{ after(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedPrefix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getGroup_1()); }
(rule__QualifiedPrefix__Group_1__0)*
{ after(grammarAccess.getQualifiedPrefixAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedPrefix__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group_1__0__Impl
	rule__QualifiedPrefix__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_0()); }
(rule__QualifiedPrefix__QnameAssignment_1_0)
{ after(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedPrefix__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_1()); }
(rule__QualifiedPrefix__QnameAssignment_1_1)
{ after(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getPrefixAssignment_0()); }
(rule__QualifiedName__PrefixAssignment_0)
{ after(grammarAccess.getQualifiedNameAccess().getPrefixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_0()); }
(rule__QualifiedName__QnameAssignment_1_0)
{ after(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_1()); }
(rule__QualifiedName__QnameAssignment_1_1)
{ after(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__0__Impl
	rule__Type__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSetAssignment_1_0()); }
(rule__Type__SetAssignment_1_0)
{ after(grammarAccess.getTypeAccess().getSetAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_1_1()); }
(rule__Type__ParamAssignment_1_1)
{ after(grammarAccess.getTypeAccess().getParamAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_2__0__Impl
	rule__Type__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSeqAssignment_2_0()); }
(rule__Type__SeqAssignment_2_0)
{ after(grammarAccess.getTypeAccess().getSeqAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_2_1()); }
(rule__Type__ParamAssignment_2_1)
{ after(grammarAccess.getTypeAccess().getParamAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_3__0__Impl
	rule__Type__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getMapAssignment_3_0()); }
(rule__Type__MapAssignment_3_0)
{ after(grammarAccess.getTypeAccess().getMapAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_3_1()); }
(rule__Type__ParamAssignment_3_1)
{ after(grammarAccess.getTypeAccess().getParamAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_4__0__Impl
	rule__Type__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCallAssignment_4_0()); }
(rule__Type__CallAssignment_4_0)
{ after(grammarAccess.getTypeAccess().getCallAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_4__1__Impl
	rule__Type__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getReturnAssignment_4_1()); }
(rule__Type__ReturnAssignment_4_1)?
{ after(grammarAccess.getTypeAccess().getReturnAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_4_2()); }
(rule__Type__ParamAssignment_4_2)
{ after(grammarAccess.getTypeAccess().getParamAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypeParameters__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__0__Impl
	rule__TypeParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getTypeParametersAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__1__Impl
	rule__TypeParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamAssignment_1()); }
(rule__TypeParameters__ParamAssignment_1)
{ after(grammarAccess.getTypeParametersAccess().getParamAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__2__Impl
	rule__TypeParameters__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getGroup_2()); }
(rule__TypeParameters__Group_2__0)*
{ after(grammarAccess.getTypeParametersAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getTypeParametersAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeParameters__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group_2__0__Impl
	rule__TypeParameters__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamAssignment_2_1()); }
(rule__TypeParameters__ParamAssignment_2_1)
{ after(grammarAccess.getTypeParametersAccess().getParamAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainerInitializer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__0__Impl
	rule__ContainerInitializer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getContainerInitializerAction_0()); }
(

)
{ after(grammarAccess.getContainerInitializerAccess().getContainerInitializerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__1__Impl
	rule__ContainerInitializer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getContainerInitializerAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__2__Impl
	rule__ContainerInitializer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getGroup_2()); }
(rule__ContainerInitializer__Group_2__0)?
{ after(grammarAccess.getContainerInitializerAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getContainerInitializerAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ContainerInitializer__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2__0__Impl
	rule__ContainerInitializer__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_0()); }
(rule__ContainerInitializer__ExprsAssignment_2_0)
{ after(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getGroup_2_1()); }
(rule__ContainerInitializer__Group_2_1__0)*
{ after(grammarAccess.getContainerInitializerAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainerInitializer__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2_1__0__Impl
	rule__ContainerInitializer__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getContainerInitializerAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_1_1()); }
(rule__ContainerInitializer__ExprsAssignment_2_1_1)
{ after(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ImplementationUnit__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplementationUnitAccess().getImportsImportParserRuleCall_1_0()); }
	ruleImport{ after(grammarAccess.getImplementationUnitAccess().getImportsImportParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImplementationUnit__RequiresAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplementationUnitAccess().getRequiresRequireParserRuleCall_2_0()); }
	ruleRequire{ after(grammarAccess.getImplementationUnitAccess().getRequiresRequireParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImplementationUnit__ScriptsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplementationUnitAccess().getScriptsLanguageUnitParserRuleCall_3_0()); }
	ruleLanguageUnit{ after(grammarAccess.getImplementationUnitAccess().getScriptsLanguageUnitParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Require__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequireAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getRequireAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Require__VersionSpecAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequireAccess().getVersionSpecVersionSpecParserRuleCall_2_0()); }
	ruleVersionSpec{ after(grammarAccess.getRequireAccess().getVersionSpecVersionSpecParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__AdvicesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getAdvicesAdviceParserRuleCall_0_0()); }
	ruleAdvice{ after(grammarAccess.getLanguageUnitAccess().getAdvicesAdviceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getNameIdentifierParserRuleCall_2_0()); }
	ruleIdentifier{ after(grammarAccess.getLanguageUnitAccess().getNameIdentifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ParamAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getParamParameterListParserRuleCall_4_0()); }
	ruleParameterList{ after(grammarAccess.getLanguageUnitAccess().getParamParameterListParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ParentAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getParentScriptParentDeclParserRuleCall_6_0()); }
	ruleScriptParentDecl{ after(grammarAccess.getLanguageUnitAccess().getParentScriptParentDeclParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__VersionAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getVersionVersionStmtParserRuleCall_8_0()); }
	ruleVersionStmt{ after(grammarAccess.getLanguageUnitAccess().getVersionVersionStmtParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__LoadPropertiesAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getLoadPropertiesLoadPropertiesParserRuleCall_9_0()); }
	ruleLoadProperties{ after(grammarAccess.getLanguageUnitAccess().getLoadPropertiesLoadPropertiesParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ContentsAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getContentsScriptContentsParserRuleCall_10_0()); }
	ruleScriptContents{ after(grammarAccess.getLanguageUnitAccess().getContentsScriptContentsParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptParentDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptParentDeclAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getScriptParentDeclAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoadProperties__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoadPropertiesAccess().getPathSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getLoadPropertiesAccess().getPathSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptContents__ElementsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptContentsAccess().getElementsVariableDeclarationParserRuleCall_1_0_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getScriptContentsAccess().getElementsVariableDeclarationParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptContents__ElementsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptContentsAccess().getElementsCompoundParserRuleCall_1_1_0()); }
	ruleCompound{ after(grammarAccess.getScriptContentsAccess().getElementsCompoundParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptContents__ElementsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptContentsAccess().getElementsTypeDefParserRuleCall_1_2_0()); }
	ruleTypeDef{ after(grammarAccess.getScriptContentsAccess().getElementsTypeDefParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScriptContents__ElementsAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptContentsAccess().getElementsRuleDeclarationParserRuleCall_1_3_0()); }
	ruleRuleDeclaration{ after(grammarAccess.getScriptContentsAccess().getElementsRuleDeclarationParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__AnnotationsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getAnnotationsAnnotationDeclarationsParserRuleCall_1_0_0()); }
	ruleAnnotationDeclarations{ after(grammarAccess.getRuleDeclarationAccess().getAnnotationsAnnotationDeclarationsParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__ModifierAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getModifierRuleModifierParserRuleCall_1_1_0()); }
	ruleRuleModifier{ after(grammarAccess.getRuleDeclarationAccess().getModifierRuleModifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__TypeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getTypeTypeParserRuleCall_1_2_0()); }
	ruleType{ after(grammarAccess.getRuleDeclarationAccess().getTypeTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__NameAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getNameIdentifierParserRuleCall_1_3_0()); }
	ruleIdentifier{ after(grammarAccess.getRuleDeclarationAccess().getNameIdentifierParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__ParamListAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getParamListParameterListParserRuleCall_1_5_0()); }
	ruleParameterList{ after(grammarAccess.getRuleDeclarationAccess().getParamListParameterListParserRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__ConditionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getConditionsRuleConditionsParserRuleCall_2_0()); }
	ruleRuleConditions{ after(grammarAccess.getRuleDeclarationAccess().getConditionsRuleConditionsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__BlockAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getBlockRuleElementBlockParserRuleCall_3_0()); }
	ruleRuleElementBlock{ after(grammarAccess.getRuleDeclarationAccess().getBlockRuleElementBlockParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__PostconditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getPostconditionLogicalExpressionParserRuleCall_1_0()); }
	ruleLogicalExpression{ after(grammarAccess.getRuleConditionsAccess().getPostconditionLogicalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__PreconditionsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getPreconditionsLogicalExpressionParserRuleCall_3_0_0()); }
	ruleLogicalExpression{ after(grammarAccess.getRuleConditionsAccess().getPreconditionsLogicalExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleConditions__PreconditionsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleConditionsAccess().getPreconditionsLogicalExpressionParserRuleCall_3_1_1_0()); }
	ruleLogicalExpression{ after(grammarAccess.getRuleConditionsAccess().getPreconditionsLogicalExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElementBlock__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementBlockAccess().getElementsRuleElementParserRuleCall_2_0()); }
	ruleRuleElement{ after(grammarAccess.getRuleElementBlockAccess().getElementsRuleElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__VarDeclAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementAccess().getVarDeclVariableDeclarationParserRuleCall_0_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getRuleElementAccess().getVarDeclVariableDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__ExprStmtAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementAccess().getExprStmtExpressionStatementParserRuleCall_1_0()); }
	ruleExpressionStatement{ after(grammarAccess.getRuleElementAccess().getExprStmtExpressionStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__WhileAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementAccess().getWhileWhileParserRuleCall_2_0_0()); }
	ruleWhile{ after(grammarAccess.getRuleElementAccess().getWhileWhileParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleElement__ForAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleElementAccess().getForForParserRuleCall_3_0_0()); }
	ruleFor{ after(grammarAccess.getRuleElementAccess().getForForParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleModifier__ProtectedAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleModifierAccess().getProtectedProtectedKeyword_0()); }
(
{ before(grammarAccess.getRuleModifierAccess().getProtectedProtectedKeyword_0()); }

	'protected' 

{ after(grammarAccess.getRuleModifierAccess().getProtectedProtectedKeyword_0()); }
)

{ after(grammarAccess.getRuleModifierAccess().getProtectedProtectedKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__VarAssignment_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getVarIdentifierParserRuleCall_0_0_0_0()); }
	ruleIdentifier{ after(grammarAccess.getExpressionStatementAccess().getVarIdentifierParserRuleCall_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__FieldAssignment_0_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getFieldIdentifierParserRuleCall_0_0_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getExpressionStatementAccess().getFieldIdentifierParserRuleCall_0_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__ExprAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_0_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__AltAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getAltAlternativeParserRuleCall_1_0_0()); }
	ruleAlternative{ after(grammarAccess.getExpressionStatementAccess().getAltAlternativeParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OtherExAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0()); }
	ruleExpressionOrQualifiedExecution{ after(grammarAccess.getPrimaryExpressionAccess().getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__UnqExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnqExUnqualifiedExecutionParserRuleCall_1_0()); }
	ruleUnqualifiedExecution{ after(grammarAccess.getPrimaryExpressionAccess().getUnqExUnqualifiedExecutionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__SuperExAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getSuperExSuperExecutionParserRuleCall_2_0()); }
	ruleSuperExecution{ after(grammarAccess.getPrimaryExpressionAccess().getSuperExSuperExecutionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__SysExAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getSysExSystemExecutionParserRuleCall_3_0()); }
	ruleSystemExecution{ after(grammarAccess.getPrimaryExpressionAccess().getSysExSystemExecutionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__MapAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getMapMapParserRuleCall_4_0()); }
	ruleMap{ after(grammarAccess.getPrimaryExpressionAccess().getMapMapParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__JoinAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getJoinJoinParserRuleCall_5_0()); }
	ruleJoin{ after(grammarAccess.getPrimaryExpressionAccess().getJoinJoinParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__InstantiateAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getInstantiateInstantiateParserRuleCall_6_0()); }
	ruleInstantiate{ after(grammarAccess.getPrimaryExpressionAccess().getInstantiateInstantiateParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__NewExAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNewExConstructorExecutionParserRuleCall_7_0()); }
	ruleConstructorExecution{ after(grammarAccess.getPrimaryExpressionAccess().getNewExConstructorExecutionParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__ProjectAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getProjectIdentifierParserRuleCall_1_0_0()); }
	ruleIdentifier{ after(grammarAccess.getInstantiateAccess().getProjectIdentifierParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__RuleNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getRuleNameSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getInstantiateAccess().getRuleNameSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getParamArgumentListParserRuleCall_3_0()); }
	ruleArgumentList{ after(grammarAccess.getInstantiateAccess().getParamArgumentListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instantiate__VersionSpecAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiateAccess().getVersionSpecVersionSpecParserRuleCall_5_0()); }
	ruleVersionSpec{ after(grammarAccess.getInstantiateAccess().getVersionSpecVersionSpecParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopVariable__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopVariableAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getLoopVariableAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopVariable__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopVariableAccess().getVarIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getLoopVariableAccess().getVarIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Map__VarAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getVarLoopVariableParserRuleCall_2_0()); }
	ruleLoopVariable{ after(grammarAccess.getMapAccess().getVarLoopVariableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Map__VarAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getVarLoopVariableParserRuleCall_3_1_0()); }
	ruleLoopVariable{ after(grammarAccess.getMapAccess().getVarLoopVariableParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Map__SeparatorAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getSeparatorAlternatives_4_0()); }
(rule__Map__SeparatorAlternatives_4_0)
{ after(grammarAccess.getMapAccess().getSeparatorAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Map__ExprAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getExprExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getMapAccess().getExprExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Map__BlockAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapAccess().getBlockRuleElementBlockParserRuleCall_7_0()); }
	ruleRuleElementBlock{ after(grammarAccess.getMapAccess().getBlockRuleElementBlockParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__VarAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getVarLoopVariableParserRuleCall_2_0()); }
	ruleLoopVariable{ after(grammarAccess.getForAccess().getVarLoopVariableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__VarAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getVarLoopVariableParserRuleCall_3_1_0()); }
	ruleLoopVariable{ after(grammarAccess.getForAccess().getVarLoopVariableParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__SeparatorAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getSeparatorAlternatives_4_0()); }
(rule__For__SeparatorAlternatives_4_0)
{ after(grammarAccess.getForAccess().getSeparatorAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__ExprAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getExprExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getForAccess().getExprExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__BlockAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getBlockRuleElementBlockParserRuleCall_7_0()); }
	ruleRuleElementBlock{ after(grammarAccess.getForAccess().getBlockRuleElementBlockParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getWhileAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__BlockAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getBlockRuleElementBlockParserRuleCall_4_0()); }
	ruleRuleElementBlock{ after(grammarAccess.getWhileAccess().getBlockRuleElementBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAlternativeAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__IfAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getIfStatementOrBlockParserRuleCall_4_0()); }
	ruleStatementOrBlock{ after(grammarAccess.getAlternativeAccess().getIfStatementOrBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__ElseAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getElseStatementOrBlockParserRuleCall_5_1_0()); }
	ruleStatementOrBlock{ after(grammarAccess.getAlternativeAccess().getElseStatementOrBlockParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatementOrBlock__ExStmtAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementOrBlockAccess().getExStmtExpressionStatementParserRuleCall_0_0()); }
	ruleExpressionStatement{ after(grammarAccess.getStatementOrBlockAccess().getExStmtExpressionStatementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatementOrBlock__BlockAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementOrBlockAccess().getBlockRuleElementBlockParserRuleCall_1_0()); }
	ruleRuleElementBlock{ after(grammarAccess.getStatementOrBlockAccess().getBlockRuleElementBlockParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Var1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getVar1JoinVariableParserRuleCall_2_0()); }
	ruleJoinVariable{ after(grammarAccess.getJoinAccess().getVar1JoinVariableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Var2Assignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getVar2JoinVariableParserRuleCall_4_0()); }
	ruleJoinVariable{ after(grammarAccess.getJoinAccess().getVar2JoinVariableParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Join__ConditionAssignment_6_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinAccess().getConditionExpressionParserRuleCall_6_2_0()); }
	ruleExpression{ after(grammarAccess.getJoinAccess().getConditionExpressionParserRuleCall_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JoinVariable__ExclAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinVariableAccess().getExclExcludeKeyword_0_0()); }
(
{ before(grammarAccess.getJoinVariableAccess().getExclExcludeKeyword_0_0()); }

	'exclude' 

{ after(grammarAccess.getJoinVariableAccess().getExclExcludeKeyword_0_0()); }
)

{ after(grammarAccess.getJoinVariableAccess().getExclExcludeKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JoinVariable__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinVariableAccess().getVarIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getJoinVariableAccess().getVarIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JoinVariable__ExprAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinVariableAccess().getExprExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getJoinVariableAccess().getExprExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SystemExecution__CallAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemExecutionAccess().getCallCallParserRuleCall_1_0()); }
	ruleCall{ after(grammarAccess.getSystemExecutionAccess().getCallCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SystemExecution__CallsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemExecutionAccess().getCallsSubCallParserRuleCall_2_0()); }
	ruleSubCall{ after(grammarAccess.getSystemExecutionAccess().getCallsSubCallParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ConstAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }

	'const' 

{ after(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }
)

{ after(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIdentifierParserRuleCall_2_0()); }
	ruleIdentifier{ after(grammarAccess.getVariableDeclarationAccess().getNameIdentifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ExpressionAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__AbstractAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getAbstractAbstractKeyword_0_0()); }
(
{ before(grammarAccess.getCompoundAccess().getAbstractAbstractKeyword_0_0()); }

	'abstract' 

{ after(grammarAccess.getCompoundAccess().getAbstractAbstractKeyword_0_0()); }
)

{ after(grammarAccess.getCompoundAccess().getAbstractAbstractKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getNameIdentifierParserRuleCall_2_0()); }
	ruleIdentifier{ after(grammarAccess.getCompoundAccess().getNameIdentifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__SuperAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getSuperIdentifierParserRuleCall_3_1_0()); }
	ruleIdentifier{ after(grammarAccess.getCompoundAccess().getSuperIdentifierParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__VarsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getVarsVariableDeclarationParserRuleCall_5_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getCompoundAccess().getVarsVariableDeclarationParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getTypeDefAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAdviceAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__VersionSpecAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getVersionSpecVersionSpecParserRuleCall_4_0()); }
	ruleVersionSpec{ after(grammarAccess.getAdviceAccess().getVersionSpecVersionSpecParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VersionSpec__RestrictionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionSpecAccess().getRestrictionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getVersionSpecAccess().getRestrictionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParamAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_0_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParamAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_1_1_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__DfltAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDfltExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getParameterAccess().getDfltExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__VersionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getVersionVERSIONTerminalRuleCall_1_0()); }
	RULE_VERSION{ after(grammarAccess.getVersionStmtAccess().getVersionVERSIONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__InsertAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }
(
{ before(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }

	'insert' 

{ after(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }
)

{ after(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getImportAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__WildcardAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }
(
{ before(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }

	'*' 

{ after(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }
)

{ after(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__VersionSpecAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getVersionSpecVersionSpecParserRuleCall_3_0()); }
	ruleVersionSpec{ after(grammarAccess.getImportAccess().getVersionSpecVersionSpecParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprLogicalExpressionParserRuleCall_0_0()); }
	ruleLogicalExpression{ after(grammarAccess.getExpressionAccess().getExprLogicalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__InitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getInitContainerInitializerParserRuleCall_1_0()); }
	ruleContainerInitializer{ after(grammarAccess.getExpressionAccess().getInitContainerInitializerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getLeftEqualityExpressionParserRuleCall_0_0()); }
	ruleEqualityExpression{ after(grammarAccess.getLogicalExpressionAccess().getLeftEqualityExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionPartParserRuleCall_1_0()); }
	ruleLogicalExpressionPart{ after(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getOpLogicalOperatorParserRuleCall_0_0()); }
	ruleLogicalOperator{ after(grammarAccess.getLogicalExpressionPartAccess().getOpLogicalOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getExEqualityExpressionParserRuleCall_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getLogicalExpressionPartAccess().getExEqualityExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionPartParserRuleCall_1_0()); }
	ruleEqualityExpressionPart{ after(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getOpEqualityOperatorParserRuleCall_0_0()); }
	ruleEqualityOperator{ after(grammarAccess.getEqualityExpressionPartAccess().getOpEqualityOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getExRelationalExpressionParserRuleCall_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionPartAccess().getExRelationalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLeftAdditiveExpressionParserRuleCall_0_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getLeftAdditiveExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionPartParserRuleCall_1_0_0()); }
	ruleRelationalExpressionPart{ after(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionPartParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Right2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRight2RelationalExpressionPartParserRuleCall_1_1_0()); }
	ruleRelationalExpressionPart{ after(grammarAccess.getRelationalExpressionAccess().getRight2RelationalExpressionPartParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getOpRelationalOperatorParserRuleCall_0_0()); }
	ruleRelationalOperator{ after(grammarAccess.getRelationalExpressionPartAccess().getOpRelationalOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getExAdditiveExpressionParserRuleCall_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionPartAccess().getExAdditiveExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getLeftMultiplicativeExpressionParserRuleCall_0_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getLeftMultiplicativeExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionPartParserRuleCall_1_0()); }
	ruleAdditiveExpressionPart{ after(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getOpAdditiveOperatorParserRuleCall_0_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getAdditiveExpressionPartAccess().getOpAdditiveOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getExMultiplicativeExpressionParserRuleCall_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionPartAccess().getExMultiplicativeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionPartParserRuleCall_1_0()); }
	ruleMultiplicativeExpressionPart{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getOpMultiplicativeOperatorParserRuleCall_0_0()); }
	ruleMultiplicativeOperator{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getOpMultiplicativeOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getExprUnaryExpressionParserRuleCall_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getExprUnaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0()); }
	rulePostfixExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__LeftAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getLeftPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression{ after(grammarAccess.getPostfixExpressionAccess().getLeftPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__ValAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValConstantParserRuleCall_0_0_0()); }
	ruleConstant{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValConstantParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__ParenthesisAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisExpressionParserRuleCall_0_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisExpressionParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__CallsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
	ruleSubCall{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__CallAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallCallParserRuleCall_0_0()); }
	ruleCall{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallCallParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__CallsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
	ruleSubCall{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__CallAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallCallParserRuleCall_2_0()); }
	ruleCall{ after(grammarAccess.getSuperExecutionAccess().getCallCallParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__CallsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallsSubCallParserRuleCall_3_0()); }
	ruleSubCall{ after(grammarAccess.getSuperExecutionAccess().getCallsSubCallParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getConstructorExecutionAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getParamArgumentListParserRuleCall_3_0()); }
	ruleArgumentList{ after(grammarAccess.getConstructorExecutionAccess().getParamArgumentListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__CallsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getCallsSubCallParserRuleCall_5_0()); }
	ruleSubCall{ after(grammarAccess.getConstructorExecutionAccess().getCallsSubCallParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__TypeAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getTypeAlternatives_0_0_0()); }
(rule__SubCall__TypeAlternatives_0_0_0)
{ after(grammarAccess.getSubCallAccess().getTypeAlternatives_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__CallAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getCallCallParserRuleCall_0_1_0()); }
	ruleCall{ after(grammarAccess.getSubCallAccess().getCallCallParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__ArrayExAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getArrayExExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getSubCallAccess().getArrayExExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DeclAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_0_0()); }
	ruleDeclaration{ after(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DeclAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_1_1_0()); }
	ruleDeclaration{ after(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__UnitsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_1_0()); }
	ruleDeclarationUnit{ after(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__UnitsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_2_1_0()); }
	ruleDeclarationUnit{ after(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getIdIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getDeclarationUnitAccess().getIdIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__DefltAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getDefltExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getDeclarationUnitAccess().getDefltExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__IdAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getIdIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getAnnotationDeclarationsAccess().getIdIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
	ruleQualifiedPrefix{ after(grammarAccess.getCallAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__DeclAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getDeclDeclaratorParserRuleCall_2_0()); }
	ruleDeclarator{ after(grammarAccess.getCallAccess().getDeclDeclaratorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParamArgumentListParserRuleCall_3_0()); }
	ruleArgumentList{ after(grammarAccess.getCallAccess().getParamArgumentListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ParamAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_0_0()); }
	ruleNamedArgument{ after(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ParamAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_1_1_0()); }
	ruleNamedArgument{ after(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getNameIdentifierParserRuleCall_0_0_0()); }
	ruleIdentifier{ after(grammarAccess.getNamedArgumentAccess().getNameIdentifierParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getExExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getNamedArgumentAccess().getExExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__QnameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__QnameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }

	'::' 

{ after(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }
)

{ after(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__QnameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__PrefixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getPrefixQualifiedPrefixParserRuleCall_0_0()); }
	ruleQualifiedPrefix{ after(grammarAccess.getQualifiedNameAccess().getPrefixQualifiedPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__QnameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
)

{ after(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__QnameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNValueNumValueParserRuleCall_0_0()); }
	ruleNumValue{ after(grammarAccess.getConstantAccess().getNValueNumValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__SValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getSValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getConstantAccess().getSValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__QValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getQValueQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getConstantAccess().getQValueQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__BValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getBValueAlternatives_3_0()); }
(rule__Constant__BValueAlternatives_3_0)
{ after(grammarAccess.getConstantAccess().getBValueAlternatives_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NullAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }
(
{ before(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }

	'null' 

{ after(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }
)

{ after(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__VersionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getVersionVERSIONTerminalRuleCall_5_0()); }
	RULE_VERSION{ after(grammarAccess.getConstantAccess().getVersionVERSIONTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumValue__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumValueAccess().getValNUMBERTerminalRuleCall_0()); }
	RULE_NUMBER{ after(grammarAccess.getNumValueAccess().getValNUMBERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
	ruleQualifiedPrefix{ after(grammarAccess.getTypeAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__SetAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }

	'setOf' 

{ after(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_1_1_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__SeqAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }

	'sequenceOf' 

{ after(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_2_1_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__MapAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }

	'mapOf' 

{ after(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_3_1_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__CallAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }

	'callOf' 

{ after(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ReturnAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getReturnTypeParserRuleCall_4_1_0()); }
	ruleType{ after(grammarAccess.getTypeAccess().getReturnTypeParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_4_2_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__ParamAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__ParamAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_2_1_0()); }
	ruleType{ after(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__ExprsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_0_0()); }
	ruleContainerInitializerExpression{ after(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__ExprsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_1_1_0()); }
	ruleContainerInitializerExpression{ after(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializerExpression__LogicalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getLogicalLogicalExpressionParserRuleCall_0_0()); }
	ruleLogicalExpression{ after(grammarAccess.getContainerInitializerExpressionAccess().getLogicalLogicalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializerExpression__ContainerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getContainerContainerInitializerParserRuleCall_1_0()); }
	ruleContainerInitializer{ after(grammarAccess.getContainerInitializerExpressionAccess().getContainerContainerInitializerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_VERSION : 'v' ('0'..'9')+ ('.' ('0'..'9')+)*;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NUMBER : '-'? (('0'..'9')+ ('.' ('0'..'9')* RULE_EXPONENT?)?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT);

RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


