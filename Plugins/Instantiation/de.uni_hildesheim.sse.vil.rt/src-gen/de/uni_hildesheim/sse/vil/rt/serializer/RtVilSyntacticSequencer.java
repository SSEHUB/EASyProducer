/*
 * generated by Xtext 2.35.0
 */
package de.uni_hildesheim.sse.vil.rt.serializer;

import com.google.inject.Inject;
import de.uni_hildesheim.sse.vil.rt.services.RtVilGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class RtVilSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RtVilGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Compound_SemicolonKeyword_7_q;
	protected AbstractElementAlias match_ExpressionStatement_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_LanguageUnit_SemicolonKeyword_11_q;
	protected AbstractElementAlias match_RuleDeclaration_SemicolonKeyword_4_q;
	protected AbstractElementAlias match_RuleElement_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_RuleElement_SemicolonKeyword_3_1_q;
	protected AbstractElementAlias match_StrategyDeclaration_SemicolonKeyword_14_q;
	protected AbstractElementAlias match_TacticDeclaration_SemicolonKeyword_9_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RtVilGrammarAccess) access;
		match_Compound_SemicolonKeyword_7_q = new TokenAlias(false, true, grammarAccess.getCompoundAccess().getSemicolonKeyword_7());
		match_ExpressionStatement_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1_1());
		match_LanguageUnit_SemicolonKeyword_11_q = new TokenAlias(false, true, grammarAccess.getLanguageUnitAccess().getSemicolonKeyword_11());
		match_RuleDeclaration_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getRuleDeclarationAccess().getSemicolonKeyword_4());
		match_RuleElement_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getRuleElementAccess().getSemicolonKeyword_2_1());
		match_RuleElement_SemicolonKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getRuleElementAccess().getSemicolonKeyword_3_1());
		match_StrategyDeclaration_SemicolonKeyword_14_q = new TokenAlias(false, true, grammarAccess.getStrategyDeclarationAccess().getSemicolonKeyword_14());
		match_TacticDeclaration_SemicolonKeyword_9_q = new TokenAlias(false, true, grammarAccess.getTacticDeclarationAccess().getSemicolonKeyword_9());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Compound_SemicolonKeyword_7_q.equals(syntax))
				emit_Compound_SemicolonKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionStatement_SemicolonKeyword_1_1_q.equals(syntax))
				emit_ExpressionStatement_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LanguageUnit_SemicolonKeyword_11_q.equals(syntax))
				emit_LanguageUnit_SemicolonKeyword_11_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RuleDeclaration_SemicolonKeyword_4_q.equals(syntax))
				emit_RuleDeclaration_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RuleElement_SemicolonKeyword_2_1_q.equals(syntax))
				emit_RuleElement_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RuleElement_SemicolonKeyword_3_1_q.equals(syntax))
				emit_RuleElement_SemicolonKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StrategyDeclaration_SemicolonKeyword_14_q.equals(syntax))
				emit_StrategyDeclaration_SemicolonKeyword_14_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TacticDeclaration_SemicolonKeyword_9_q.equals(syntax))
				emit_TacticDeclaration_SemicolonKeyword_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Identifier '{' '}' (ambiguity) (rule end)
	 *     super=Identifier '{' '}' (ambiguity) (rule end)
	 *     vars+=VariableDeclaration '}' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Compound_SemicolonKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     alt=Alternative (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ExpressionStatement_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     rtContents=rtContents '}' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_LanguageUnit_SemicolonKeyword_11_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     block=RuleElementBlock (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_RuleDeclaration_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     while=While (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_RuleElement_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     for=For (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_RuleElement_SemicolonKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     breakdown+=BreakdownElement '}' '}' (ambiguity) (rule end)
	 *     post+=RuleElement '}' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_StrategyDeclaration_SemicolonKeyword_14_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     block=RuleElementBlock (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_TacticDeclaration_SemicolonKeyword_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
