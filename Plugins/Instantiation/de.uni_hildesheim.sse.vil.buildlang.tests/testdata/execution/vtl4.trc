-> main(Project, Project, Configuration) with (<project>, <project>, <config>)
-> doSomething()
    val <- true
    cfg <- <config>
-> asName(String) with (a)
    s <- a
-> asName(String) with (test)
    s2 <- test
    -> create VtlTestType() with ({}) = {}
    tt <- {{count, 0}, {test, false}}
    tt.count <- 1
    -> workOn(VtlTestType) with ({{count, 1}, {test, false}})
        -> +(Integer, Integer) with (1, 1) = 2
        type.count <- 2
    tests <- {}
    -> add(Set, VtlTestType) with ({}, {{count, 2}, {test, false}}) = {{count, 2}, {test, false}}
-> addTestType(setOf(VtlTestType), String, Integer, Boolean) with ({{{count, 2}, {test, false}}}, myValue, 0, false)
    -> create VtlTestType() with ({}) = {}
    tt <- {{count, 0}, {test, false}}
    tt.value <- myValue
    tt.count <- 0
    tt.test <- false
    -> add(Set, VtlTestType) with ({{{count, 2}, {test, false}}}, {{count, 0}, {test, false}, {value, myValue}}) = {{count, 0}, {test, false}, {value, myValue}}
-> addTestType(setOf(VtlTestType), String, Integer, Boolean) with ({{{count, 0}, {test, false}, {value, myValue}}, {{count, 2}, {test, false}}}, next, 27, true)
    -> create VtlTestType() with ({}) = {}
    tt <- {{count, 0}, {test, false}}
    tt.value <- next
    tt.count <- 27
    tt.test <- true
    -> add(Set, VtlTestType) with ({{{count, 0}, {test, false}, {value, myValue}}, {{count, 2}, {test, false}}}, {{count, 27}, {test, true}, {value, next}}) = {{count, 27}, {test, true}, {value, next}}
    -> workOnSet(String, setOf(VtlTestType)) with (, {{{count, 0}, {test, false}, {value, myValue}}, {{count, 27}, {test, true}, {value, next}}, {{count, 2}, {test, false}}})
        for {
            for: t <- {{count, 0}, {test, false}, {value, myValue}}
            -> workOn(VtlTestType) with ({{count, 0}, {test, false}, {value, myValue}})
                -> +(Integer, Integer) with (0, 1) = 1
                type.count <- 1
            for: t <- {{count, 2}, {test, false}}
            -> workOn(VtlTestType) with ({{count, 2}, {test, false}})
                -> +(Integer, Integer) with (2, 1) = 3
                type.count <- 3
            for: t <- {{count, 27}, {test, true}, {value, next}}
            -> workOn(VtlTestType) with ({{count, 27}, {test, true}, {value, next}})
                -> +(Integer, Integer) with (27, 1) = 28
                type.count <- 28
        }