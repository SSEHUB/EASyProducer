/*
* generated by Xtext
*/
package de.uni_hildesheim.sse.vil.rt.ui.outline;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.viewers.StyledString;

import de.uni_hildesheim.sse.vil.rt.rtVil.LanguageUnit;
import de.uni_hildesheim.sse.vil.rt.rtVil.StrategyDeclaration;
import de.uni_hildesheim.sse.vil.rt.rtVil.TacticDeclaration;
import de.uni_hildesheim.sse.vil.rt.ui.resources.Images;
import de.uni_hildesheim.sse.vil.buildlang.ui.outline.VilBuildLanguageOutlineTreeProvider;
import de.uni_hildesheim.sse.vil.buildlang.ui.outline.VirtualOutlineNode;
import de.uni_hildesheim.sse.vil.buildlang.vilBuildLanguage.VilBuildLanguagePackage;

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
public class RtVilOutlineTreeProvider extends VilBuildLanguageOutlineTreeProvider {

    @Override
    protected void createScriptContentNodes(de.uni_hildesheim.sse.vil.buildlang.vilBuildLanguage.LanguageUnit script, 
        VirtualOutlineNode parentNode) {
        LanguageUnit rtScript = (LanguageUnit) script;
        createScriptContentNodes(rtScript.getRtContents().getElements(), parentNode);
    }

    @Override
    protected boolean hasContents(de.uni_hildesheim.sse.vil.buildlang.vilBuildLanguage.LanguageUnit script) {
        LanguageUnit rtScript = (LanguageUnit) script;
        return rtScript.getRtContents() != null && !isEmpty(rtScript.getRtContents().getElements());
    }
    
    @Override
    protected void createScriptContentNode(EObject element, VirtualOutlineNode parentNode) {
        if (element instanceof StrategyDeclaration) {
            StrategyDeclaration decl = (StrategyDeclaration) element;
            if (checkStrategyDeclaration(decl)) {
                StyledString displayString = new StyledString();
                displayString.append("" + decl.getName());
                displayString.append(toString(decl.getParamList()) + " : Strategy", StyledString.QUALIFIER_STYLER);
                createEStructuralFeatureNode(parentNode, decl,
                    VilBuildLanguagePackage.Literals.RULE_DECLARATION__NAME,
                    getImageHelper().getImage(Images.NAME_STRATEGY_INSTANCE), displayString, true);
            }
        } else if (element instanceof TacticDeclaration) {
            TacticDeclaration decl = (TacticDeclaration) element;
            if (checkTacticDeclaration(decl)) {
                StyledString displayString = new StyledString();
                displayString.append("" + decl.getName());
                displayString.append(toString(decl.getParamList()) + " : Tactic", StyledString.QUALIFIER_STYLER);
                createEStructuralFeatureNode(parentNode, decl,
                    VilBuildLanguagePackage.Literals.RULE_DECLARATION__NAME,
                    getImageHelper().getImage(Images.NAME_TACTIC_INSTANCE), displayString, true);
            }
        }
    }
    
    /**
     * Checks whether a given strategy declaration is not <b>null</b> and has a name.
     * 
     * @param decl the declaration to be checked.
     * @return <b>True</b> if the declaration is not <b>null</b> and has a name. <b>False</b> otherwise.
     */
    protected boolean checkStrategyDeclaration(StrategyDeclaration decl) {
        return decl != null && decl.getName() != null && !decl.getName().isEmpty();
    }

    /**
     * Checks whether a given tactic declaration is not <b>null</b> and has a name.
     * 
     * @param decl the declaration to be checked.
     * @return <b>True</b> if the declaration is not <b>null</b> and has a name. <b>False</b> otherwise.
     */
    protected boolean checkTacticDeclaration(TacticDeclaration decl) {
        return decl != null && decl.getName() != null && !decl.getName().isEmpty();
    }

}
