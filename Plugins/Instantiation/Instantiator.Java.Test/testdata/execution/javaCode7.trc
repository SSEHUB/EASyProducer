-> main(Project, Configuration, Project) with (<project>, <config>, <project>)
-> main(Configuration, JavaCodeArtifact) with (<config>, JCATest7.java)
    -> addClass(JavaCodeArtifact, String, String) with (JCATest7.java, DataImpl<CO, CI>, Data class.
            Generated by: EASy-Producer.) = JavaCodeClass: DataImpl
    mainCls <- JavaCodeClass: DataImpl
    -> addExtends(JavaCodeClass, String) with (JavaCodeClass: DataImpl, de.test.TestConnector<CO, CI>) = JavaCodeClass: DataImpl
    props <- {}
    -> add(Sequence, String) with ({}, spring.cloud.function.definition=createModbusPhoenixEEM_myModbusConn;createModbusSiemensSentron_myModbusSentronConn) = spring.cloud.function.definition=createModbusPhoenixEEM_myModbusConn;createModbusSiemensSentron_myModbusSentronConn
    -> add(Sequence, String) with ({spring.cloud.function.definition=createModbusPhoenixEEM_myModbusConn;createModbusSiemensSentron_myModbusSentronConn}, iip.service.ModbusReceiver=true) = iip.service.ModbusReceiver=true
    -> addAnnotation(JavaCodeClass, String) with (JavaCodeClass: DataImpl, TestPropertySource) = JavaCodeAnnotation JavaCodeTypeSpecification TestPropertySource
    -> addArrayArgument(JavaCodeAnnotation, String, Boolean) with (JavaCodeAnnotation JavaCodeTypeSpecification TestPropertySource, properties, true) = JavaCodeArrayInitializerExpression
    -> stringValues(JavaCodeArrayInitializerExpression, Sequence) with (JavaCodeArrayInitializerExpression, {iip.service.ModbusReceiver=true, spring.cloud.function.definition=createModbusPhoenixEEM_myModbusConn;createModbusSiemensSentron_myModbusSentronConn}) = JavaCodeArrayInitializerExpression
    -> addConstructor(JavaCodeClass, String) with (JavaCodeClass: DataImpl, Connector constructor.) = JavaCodeMethod: DataImpl
    m <- JavaCodeMethod: DataImpl
    -> addParameter(JavaCodeMethod, String, String, String) with (JavaCodeMethod: DataImpl, de.test.ProtocolAdapter<CO, CI>..., adapter, the protocol adapter) = JavaCodeParameterSpecification ProtocolAdapter adapter
    -> addSuperCall(JavaCodeMethod) with (JavaCodeMethod: DataImpl) = JavaCodeMethodCall
    -> addArgument(JavaCodeMethodCall, String) with (JavaCodeMethodCall, adapter) = JavaCodeMethodCall
    -> addMethod(JavaCodeClass, String, String) with (JavaCodeClass: DataImpl, Class<?>, getInputClass) = JavaCodeMethod: getInputClass
    m <- JavaCodeMethod: getInputClass
    -> addOverrideAnnotation(JavaCodeMethod) with (JavaCodeMethod: getInputClass) = JavaCodeAnnotation JavaCodeTypeSpecification Override
    -> addReturn(JavaCodeMethod, JavaCodeExpression) with (JavaCodeMethod: getInputClass, JavaCodeTextExpression) = JavaCodeMethod: getInputClass
    -> addMethod(JavaCodeClass, String, String) with (JavaCodeClass: DataImpl, Class<?>, getValueClass) = JavaCodeMethod: getValueClass
    m <- JavaCodeMethod: getValueClass
    -> addOverrideAnnotation(JavaCodeMethod) with (JavaCodeMethod: getValueClass) = JavaCodeAnnotation JavaCodeTypeSpecification Override
    -> addReturn(JavaCodeMethod, JavaCodeExpression) with (JavaCodeMethod: getValueClass, JavaCodeTextExpression) = JavaCodeMethod: getValueClass
    -> addMethod(JavaCodeClass, String) with (JavaCodeClass: DataImpl, test) = JavaCodeMethod: test
    m <- JavaCodeMethod: test
    -> addIf(JavaCodeMethod, String) with (JavaCodeMethod: test, false) = JavaCodeAlternative
    a <- JavaCodeAlternative
    -> addSystemOutPrintlnCall(JavaCodeBlock) with (JavaCodeAlternative) = JavaCodeMethodCall
    -> addStringArgument(JavaCodeMethodCall, String) with (JavaCodeMethodCall, IF) = JavaCodeMethodCall
    -> addElseIf(JavaCodeAlternative, String) with (JavaCodeAlternative, false) = JavaCodeAlternative
    a <- JavaCodeAlternative
    -> addSystemOutPrintlnCall(JavaCodeBlock) with (JavaCodeAlternative) = JavaCodeMethodCall
    -> addStringArgument(JavaCodeMethodCall, String) with (JavaCodeMethodCall, ELSE-IF) = JavaCodeMethodCall
    -> addElse(JavaCodeAlternative) with (JavaCodeAlternative) = JavaCodeBlock
    -> addSystemOutPrintlnCall(JavaCodeBlock) with (JavaCodeBlock) = JavaCodeMethodCall
    -> addStringArgument(JavaCodeMethodCall, String) with (JavaCodeMethodCall, ELSE-IF) = JavaCodeMethodCall
    -> vilTemplateProcessor(String, Configuration, Artifact) with (JavaCode7Tpl, <config>, JCATest7.java, {}) = {JCATest7.java}