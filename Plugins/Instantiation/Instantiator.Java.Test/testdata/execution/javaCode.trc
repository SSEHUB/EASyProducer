-> main(Project, Configuration, Project) with (<project>, <config>, <project>)
    f <- JCATest.java
    -> comment(JavaCodeArtifact, String) with (JCATest.java, My University\nGenerated by EASy) = JCATest.java
    -> setPackage(JavaCodeArtifact, String) with (JCATest.java, de.myPackage) = JCATest.java
    -> addClass(JavaCodeArtifact, String) with (JCATest.java, JCATest) = JavaClass: JCATest
    cls <- JavaClass: JCATest
    -> addAttribute(JavaCodeClass, String, String) with (JavaClass: JCATest, int, myInt) = JavaAttribute: myInt
    a1 <- JavaAttribute: myInt
    -> addGetter(JavaCodeAttribute) with (JavaAttribute: myInt) = JavaMethod: getMyInt
    -> addSetter(JavaCodeAttribute) with (JavaAttribute: myInt) = JavaMethod: setMyInt
    -> addAttribute(JavaCodeClass, String, String) with (JavaClass: JCATest, double, myDouble) = JavaAttribute: myDouble
    -> addMethod(JavaCodeClass, String, String, String) with (JavaClass: JCATest, java.util.List<Integer>, getIntegerList, Returns an integer list.@return the integer list) = JavaMethod: getIntegerList
    -> setProtected(JavaCodeMethod) with (JavaMethod: getIntegerList) = JavaMethod: getIntegerList
    m <- JavaMethod: getIntegerList
    -> addAnnotation(JavaCodeMethod, String) with (JavaMethod: getIntegerList, java.lang.Override) = JavaAnnotation JavaType Override
    -> addParameter(JavaCodeMethod, String, String, String) with (JavaMethod: getIntegerList, int, length, the length) = JavaParameter int length
    -> addVariable(JavaCodeMethod, String, String, String) with (JavaMethod: getIntegerList, boolean, cont, false) = MethodCall
    -> addIf(JavaCodeMethod, String) with (JavaMethod: getIntegerList, cont) = JavaCodeIfThenElse
    alt <- JavaCodeIfThenElse
    -> addCall(JavaCodeBlock, String) with (JavaCodeIfThenElse, System.out.println) = MethodCall
    -> addElse(JavaCodeAlternative) with (JavaCodeIfThenElse) = JavaBlock
    -> addCall(JavaCodeBlock, String) with (JavaBlock, System.out.println) = MethodCall
    -> addArgument(JavaCodeMethodCall, String) with (MethodCall, length) = MethodCall
    -> addVariable(JavaCodeMethod, String, String, String) with (JavaMethod: getIntegerList, int, data, 0) = MethodCall
    -> addSwitch(JavaCodeMethod, String) with (JavaMethod: getIntegerList, data) = JavaCodeSwitch
    sw <- JavaCodeSwitch
    -> addCase(JavaCodeSwitch, String, Boolean, Boolean) with (JavaCodeSwitch, 5, false, true) = JavaCodeCase
    -> addCall(JavaCodeBlock, String) with (JavaCodeCase, doOther) = MethodCall
    -> addDefault(JavaCodeSwitch, Boolean, Boolean) with (JavaCodeSwitch, false, false) = JavaCodeDefault
    -> addCall(JavaCodeBlock, String) with (JavaCodeDefault, doOther) = MethodCall
    -> addSLComment(JavaCodeMethod, String) with (JavaMethod: getIntegerList, -- loops --) = JavaMethod: getIntegerList
    -> addDoLoop(JavaCodeMethod, String) with (JavaMethod: getIntegerList, cont) = JavaCodeDoLoop
    -> addAssignment(JavaCodeBlock, String, String) with (JavaCodeDoLoop, cont, false) = JavaCodeAssignment
    -> addEmptyLine(JavaCodeMethod) with (JavaMethod: getIntegerList) = JavaMethod: getIntegerList
    -> addWhileLoop(JavaCodeMethod, String) with (JavaMethod: getIntegerList, !cont) = JavaWhileLoop
    -> addAssignment(JavaCodeBlock, String, String) with (JavaWhileLoop, cont, true) = JavaCodeAssignment
    -> addForLoop(JavaCodeMethod, String, String, String) with (JavaMethod: getIntegerList, String, s, args) = JavaCodeForLoop
    -> addCall(JavaCodeBlock, String) with (JavaCodeForLoop, System.out.println) = MethodCall
    -> addForLoop(JavaCodeMethod, String, String, String, String, String) with (JavaMethod: getIntegerList, int, c, 0, c < 10, c++) = JavaCodeForLoop
    -> addCall(JavaCodeBlock, String) with (JavaCodeForLoop, System.out.println) = MethodCall
    -> addSynchronized(JavaCodeMethod) with (JavaMethod: getIntegerList) = JavaSynchronizedBlock
    -> add(JavaCodeBlock, String) with (JavaSynchronizedBlock, length++;)
    -> addTry(JavaCodeMethod) with (JavaMethod: getIntegerList) = JavaTryBlock
    try <- JavaTryBlock
    -> addSLComment(JavaCodeBlock, String) with (JavaTryBlock, try) = JavaTryBlock
    -> addCatch(JavaCodeTryBlock, String, String) with (JavaTryBlock, java.io.IOException, e) = JavaCodeCatchBlock
    -> addCall(JavaCodeBlock, String) with (JavaCodeCatchBlock, e.printStackTrace) = MethodCall
    -> addFinally(JavaCodeTryBlock) with (JavaTryBlock) = JavaBlock
    -> addSLComment(JavaCodeBlock, String) with (JavaBlock, finally) = JavaBlock
    -> addClass(JavaCodeArtifact, String) with (JCATest.java, MyInterface) = JavaClass: MyInterface
    cls <- JavaClass: MyInterface
    -> asInterface(JavaCodeClass) with (JavaClass: MyInterface) = JavaClass: MyInterface