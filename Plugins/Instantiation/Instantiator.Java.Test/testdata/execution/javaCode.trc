-> main(Project, Configuration, Project) with (<project>, <config>, <project>)
    f <- JCATest.java
    -> comment(JavaCodeArtifact, String) with (JCATest.java, My University\nGenerated by EASy) = JCATest.java
    -> setPackage(JavaCodeArtifact, String) with (JCATest.java, de.myPackage) = JCATest.java
    -> addClass(JavaCodeArtifact, String) with (JCATest.java, JCATest) = JavaCodeClass: JCATest
    cls <- JavaCodeClass: JCATest
    -> addAttribute(JavaCodeClass, String, String) with (JavaCodeClass: JCATest, int, myInt) = JavaCodeAttribute: myInt
    a1 <- JavaCodeAttribute: myInt
    -> addGetter(JavaCodeAttribute) with (JavaCodeAttribute: myInt) = JavaCodeMethod: getMyInt
    -> addSetter(JavaCodeAttribute) with (JavaCodeAttribute: myInt) = JavaCodeMethod: setMyInt
    -> addAttribute(JavaCodeClass, String, String) with (JavaCodeClass: JCATest, double, myDouble) = JavaCodeAttribute: myDouble
    -> addMethod(JavaCodeClass, String, String, String) with (JavaCodeClass: JCATest, java.util.List<Integer>, getIntegerList, Returns an integer list.@return the integer list) = JavaCodeMethod: getIntegerList
    -> setProtected(JavaCodeMethod) with (JavaCodeMethod: getIntegerList) = JavaCodeMethod: getIntegerList
    m <- JavaCodeMethod: getIntegerList
    -> addAnnotation(JavaCodeMethod, String) with (JavaCodeMethod: getIntegerList, java.lang.Override) = JavaCodeAnnotation JavaCodeTypeSpecification Override
    -> forceJavadoc(JavaCodeMethod) with (JavaCodeMethod: getIntegerList) = JavaCodeMethod: getIntegerList
    -> addParameter(JavaCodeMethod, String, String, String) with (JavaCodeMethod: getIntegerList, int, length, the length) = JavaCodeParameterSpecification int length
    -> addVariable(JavaCodeMethod, String, String, String) with (JavaCodeMethod: getIntegerList, boolean, cont, false) = JavaCodeVariableDeclaration
    -> addIf(JavaCodeMethod, String) with (JavaCodeMethod: getIntegerList, cont) = JavaCodeAlternative
    alt <- JavaCodeAlternative
    -> addCall(JavaCodeBlock, String) with (JavaCodeAlternative, System.out.println) = JavaCodeMethodCall
    -> addElse(JavaCodeAlternative) with (JavaCodeAlternative) = JavaCodeBlock
    -> addCall(JavaCodeBlock, String) with (JavaCodeBlock, System.out.println) = JavaCodeMethodCall
    -> addArgument(JavaCodeMethodCall, String) with (JavaCodeMethodCall, length) = JavaCodeMethodCall
    -> addVariable(JavaCodeMethod, String, String, String) with (JavaCodeMethod: getIntegerList, int, data, 0) = JavaCodeVariableDeclaration
    -> addSwitch(JavaCodeMethod, String) with (JavaCodeMethod: getIntegerList, data) = JavaCodeSwitch
    sw <- JavaCodeSwitch
    -> addCase(JavaCodeSwitch, String, Boolean, Boolean) with (JavaCodeSwitch, 5, false, true) = JavaCodeCase
    -> addCall(JavaCodeBlock, String) with (JavaCodeCase, doOther) = JavaCodeMethodCall
    -> addDefault(JavaCodeSwitch, Boolean, Boolean) with (JavaCodeSwitch, false, false) = JavaCodeDefault
    -> addCall(JavaCodeBlock, String) with (JavaCodeDefault, doOther) = JavaCodeMethodCall
    -> addSLComment(JavaCodeMethod, String) with (JavaCodeMethod: getIntegerList, -- loops --) = JavaCodeMethod: getIntegerList
    -> addDoLoop(JavaCodeMethod, String) with (JavaCodeMethod: getIntegerList, cont) = JavaCodeDoLoop
    -> addAssignment(JavaCodeBlock, String, JavaCodeExpression) with (JavaCodeDoLoop, cont, JavaCodeTextExpression) = JavaCodeAssignment
    -> addEmptyLine(JavaCodeMethod) with (JavaCodeMethod: getIntegerList) = JavaCodeMethod: getIntegerList
    -> addWhileLoop(JavaCodeMethod, String) with (JavaCodeMethod: getIntegerList, !cont) = JavaCodeWhileLoop
    -> addAssignment(JavaCodeBlock, String, JavaCodeExpression) with (JavaCodeWhileLoop, cont, JavaCodeTextExpression) = JavaCodeAssignment
    -> addForLoop(JavaCodeMethod, String, String, String) with (JavaCodeMethod: getIntegerList, String, s, args) = JavaCodeForLoop
    -> addCall(JavaCodeBlock, String) with (JavaCodeForLoop, System.out.println) = JavaCodeMethodCall
    -> addForLoop(JavaCodeMethod, String, String, String, String, String) with (JavaCodeMethod: getIntegerList, int, c, 0, c < 10, c++) = JavaCodeForLoop
    -> addCall(JavaCodeBlock, String) with (JavaCodeForLoop, System.out.println) = JavaCodeMethodCall
    -> addSynchronized(JavaCodeMethod) with (JavaCodeMethod: getIntegerList) = JavaCodeSynchronizedBlock
    -> add(JavaCodeBlock, String) with (JavaCodeSynchronizedBlock, length++;) = JavaCodeSynchronizedBlock
    -> addTry(JavaCodeMethod) with (JavaCodeMethod: getIntegerList) = JavaCodeTryBlock
    try <- JavaCodeTryBlock
    -> addSLComment(JavaCodeBlock, String) with (JavaCodeTryBlock, try) = JavaCodeTryBlock
    -> addCatch(JavaCodeTryBlock, String, String) with (JavaCodeTryBlock, java.io.IOException, e) = JavaCodeCatchBlock
    -> addCall(JavaCodeBlock, String) with (JavaCodeCatchBlock, e.printStackTrace) = JavaCodeMethodCall
    -> addFinally(JavaCodeTryBlock) with (JavaCodeTryBlock) = JavaCodeBlock
    -> addSLComment(JavaCodeBlock, String) with (JavaCodeBlock, finally) = JavaCodeBlock
    -> addClass(JavaCodeArtifact, String) with (JCATest.java, MyInterface) = JavaCodeClass: MyInterface
    cls <- JavaCodeClass: MyInterface
    -> asInterface(JavaCodeClass) with (JavaCodeClass: MyInterface) = JavaCodeClass: MyInterface