import javaLib;

@indent(indentation = 4, additional = 0)
@format(profile="java", profileArg_javadocIndent="* ", lineLength = 120)
template JavaCode2Tpl(Configuration config, FileArtifact target) {

    def addSerializerRegistrationStatement(JavaCodeMethod method, String clsName, sequenceOf(JavaCodeStatement) calls) {
        JavaCodeMethodCall call = method.addCall("de.iip_ecosphere.platform.transport.serialization.SerializerRegistry.registerSerializer", JavaCodeImportScope.CLASS);
        call.addArgument("iip.serializers.${clsName}.class");
        calls.add(call);
    }

    def addSerializerRegistration(JavaCodeMethod method, String clsName, sequenceOf(JavaCodeStatement) calls) {
        if (true) { // config.sharedInterfaces
            String implClsName = clsName + "Impl";
            addSerializerRegistrationStatement(method, implClsName, calls);
        }
        addSerializerRegistrationStatement(method, clsName, calls);
    }    
    
    def JavaCodeAttribute addCallback(JavaCodeClass cls, String clsName, String varName) {
        JavaCodeAttribute attr = cls.addAttribute("de.iip_ecosphere.platform.transport.connectors.ReceptionCallback<${clsName}>", varName)
            .setStatic()
            .setPrivate();
        JavaCodeAnonymousClass init = attr.addAnonymous("ReceptionCallback<${clsName}>");
        JavaCodeMethod meth = init.addMethod("void", "received");
        meth.addAnnotation("Override");
        meth.addParameter(clsName, "data");
        meth.addCall("System.out.println")
            .addArgument('"Connector received: " + data');
        init.addMethod("Class<${clsName}>", "getType")
          .addReturn("${clsName}.class")
          .addAnnotation("Override");
        attr;
    }

    def main(Configuration config, FileArtifact target) {
        String clsName = "MyModbusConnExample";
        String platfInClsName = "ModbusPhoenixEEM";
        String platfOutClsName = "ModbusPhoenixRwEEM";
        String connFqn = "de.iip_ecosphere.platform.connectors.modbustcpipv1.ModbusTcpIpConnector";
        JavaPath connFqnPath = connFqn;
        String connName = connFqnPath.name();
        String cName = "myModbusConn example";

        JavaCodeArtifact art = new JavaCodeArtifact();
        art.setPackage("iip.connectivity");
        art.addImport("java.io.IOException");
        art.addImport("de.iip_ecosphere.platform.connectors.ConnectorParameter");
        art.addImport("de.iip_ecosphere.platform.support.TimeUtils");
        art.addImport("de.iip_ecosphere.platform.transport.connectors.ReceptionCallback");
        art.addImport(connFqn);
        art.addImport("iip.nodes.${clsName}");
        art.addImport("iip.datatypes.${platfOutClsName}");
        art.addImport("iip.datatypes.${platfInClsName}");

        JavaCodeClass mainCls = art.addClass("Tmp");
        JavaCodeAttribute cb = addCallback(mainCls, platfOutClsName, "callback");
        JavaCodeMethod mainClsMain = mainCls.addMainMethod();
        sequenceOf(JavaCodeStatement) calls = {};
        addSerializerRegistration(mainClsMain, "ModbusPhoenixEEM", calls);
        addSerializerRegistration(mainClsMain, "ModbusPhoenixRwEEM", calls);

        '${art.toHeader()}

        /**
         * Technical connection test for connector "${cName}".
         * Generated by: EASy-Producer.
         */
        public class ${clsName}Test {

            ${emitJava(cb)}
        
            /**
             * Main program.
             * 
             * @param args ignored
             * @throws IOException if intended connectivity fails
             */
            public static void main(String[] args) throws IOException {
                ${emitJava(calls)}
                
                ConnectorParameter params = ${clsName}
                    .createConnectorParameter(); // as configured, or create own and customize

                ${connName}<${platfOutClsName}, ${platfInClsName}> conn = new ${connName}<>(
                    ${clsName}.createConnectorAdapter());
                Runtime.getRuntime().addShutdownHook(new Thread(() -> conn.disconnectSafe()));
                conn.connect(params);
                conn.setReceptionCallback(callback);
                System.out.println("Connector ${cName} created...");
        
                // wait for data
                while (true) {
                    TimeUtils.sleep(300);
                }
            }
        
        }'
    }
    
}
