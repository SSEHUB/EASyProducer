-> main(Project, Configuration, Project) with (<project>, <config>, <project>)
-> main(Configuration, JavaCodeArtifact) with (<config>, JCATest6.java)
    -> addClass(JavaCodeArtifact, String, String) with (JCATest6.java, Data, Data class.
            Generated by: EASy-Producer.) = JavaCodeClass: Data
    mainCls <- JavaCodeClass: Data
    -> addMainMethod(JavaCodeClass) with (JavaCodeClass: Data) = JavaCodeMethod: main
    m <- JavaCodeMethod: main
    -> addVariable(JavaCodeMethod, String, String, String) with (JavaCodeMethod: main, java.util.List<String>, data, ) = JavaCodeVariableDeclaration
    -> addNew(JavaCodeVariableDeclaration, String) with (JavaCodeVariableDeclaration, java.util.ArrayList<>) = JavaCodeConstructorCall
    -> addImport(JavaCodeElement, String) with (JavaCodeMethod: main, java.lang.Math) = JavaCodeImport: java.lang
    -> addCall(JavaCodeMethod, String) with (JavaCodeMethod: main, data.stream) = JavaCodeMethodCall
    c <- JavaCodeMethodCall
    -> addCall(JavaCodeMethodCall, String) with (JavaCodeMethodCall, filter) = JavaCodeMethodCall
    c <- JavaCodeMethodCall
    -> addLambdaArgument(JavaCodeMethodCall) with (JavaCodeMethodCall) = JavaCodeLambdaExpression
    -> addVariable(JavaCodeLambdaExpression, String) with (JavaCodeLambdaExpression, d) = JavaCodeLambdaExpression
    -> addExpression(JavaCodeLambdaExpression, String) with (JavaCodeLambdaExpression, d.length() > 0) = JavaCodeLambdaExpression
    -> addCall(JavaCodeMethodCall, String) with (JavaCodeMethodCall, collect) = JavaCodeMethodCall
    -> addArgument(JavaCodeMethodCall, String, JavaCodeImportScope) with (JavaCodeMethodCall, java.util.Collectors.toList(), CLASS) = JavaCodeMethodCall
    -> addEmptyLine(JavaCodeMethod) with (JavaCodeMethod: main) = JavaCodeMethod: main
    -> addCall(JavaCodeMethod, String) with (JavaCodeMethod: main, data.stream) = JavaCodeMethodCall
    c <- JavaCodeMethodCall
    -> addCall(JavaCodeMethodCall, String) with (JavaCodeMethodCall, filter) = JavaCodeMethodCall
    c <- JavaCodeMethodCall
    -> addLambdaArgument(JavaCodeMethodCall) with (JavaCodeMethodCall) = JavaCodeLambdaExpression
    -> addVariable(JavaCodeLambdaExpression, String) with (JavaCodeLambdaExpression, d) = JavaCodeLambdaExpression
    -> addCall(JavaCodeLambdaExpression, String) with (JavaCodeLambdaExpression, isOk) = JavaCodeMethodCall
    -> addArgument(JavaCodeMethodCall, String) with (JavaCodeMethodCall, d) = JavaCodeMethodCall
    -> addCall(JavaCodeMethodCall, String) with (JavaCodeMethodCall, collect) = JavaCodeMethodCall
    -> addArgument(JavaCodeMethodCall, String, JavaCodeImportScope) with (JavaCodeMethodCall, java.util.Collectors.toList(), CLASS) = JavaCodeMethodCall
    -> addEmptyLine(JavaCodeMethod) with (JavaCodeMethod: main) = JavaCodeMethod: main
    -> addCall(JavaCodeMethod, String) with (JavaCodeMethod: main, data.stream) = JavaCodeMethodCall
    c <- JavaCodeMethodCall
    -> addCall(JavaCodeMethodCall, String) with (JavaCodeMethodCall, filter) = JavaCodeMethodCall
    c <- JavaCodeMethodCall
    -> addLambdaArgument(JavaCodeMethodCall) with (JavaCodeMethodCall) = JavaCodeLambdaExpression
    -> addVariable(JavaCodeLambdaExpression, String) with (JavaCodeLambdaExpression, d) = JavaCodeLambdaExpression
    -> addBlock(JavaCodeLambdaExpression) with (JavaCodeLambdaExpression) = JavaCodeBlock
    -> addReturn(JavaCodeBlock, JavaCodeExpression) with (JavaCodeBlock, JavaCodeTextExpression) = JavaCodeBlock
    -> addCall(JavaCodeMethodCall, String) with (JavaCodeMethodCall, collect) = JavaCodeMethodCall
    -> addArgument(JavaCodeMethodCall, String, JavaCodeImportScope) with (JavaCodeMethodCall, java.util.Collectors.toList(), CLASS) = JavaCodeMethodCall
    -> addMethod(JavaCodeClass, String, String, String) with (JavaCodeClass: Data, boolean, isOk, Checks whether a String is ok.) = JavaCodeMethod: isOk
    -> setStatic(JavaCodeMethod) with (JavaCodeMethod: isOk) = JavaCodeMethod: isOk
    -> addReturn(JavaCodeMethod, JavaCodeExpression) with (JavaCodeMethod: isOk, JavaCodeTextExpression) = JavaCodeMethod: isOk
    -> addParameter(JavaCodeMethod, String, String, String) with (JavaCodeMethod: isOk, String, text, the text) = JavaCodeParameterSpecification String text
    -> vilTemplateProcessor(String, Configuration, Artifact) with (JavaCode6Tpl, <config>, JCATest6.java, {}) = {JCATest6.java}