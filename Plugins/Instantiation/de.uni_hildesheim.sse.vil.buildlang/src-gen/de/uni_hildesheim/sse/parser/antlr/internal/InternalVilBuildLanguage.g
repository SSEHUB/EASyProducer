/*
 * generated by Xtext
 */
grammar InternalVilBuildLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.uni_hildesheim.sse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_hildesheim.sse.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_hildesheim.sse.services.VilBuildLanguageGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private VilBuildLanguageGrammarAccess grammarAccess;
 	
    public InternalVilBuildLanguageParser(TokenStream input, VilBuildLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ImplementationUnit";	
   	}
   	
   	@Override
   	protected VilBuildLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleImplementationUnit
entryRuleImplementationUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementationUnitRule()); }
	 iv_ruleImplementationUnit=ruleImplementationUnit 
	 { $current=$iv_ruleImplementationUnit.current; } 
	 EOF 
;

// Rule ImplementationUnit
ruleImplementationUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getImplementationUnitAccess().getImplementationUnitAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementationUnitAccess().getImportsImportParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementationUnitRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementationUnitAccess().getRequiresRequireParserRuleCall_2_0()); 
	    }
		lv_requires_2_0=ruleRequire		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementationUnitRule());
	        }
       		add(
       			$current, 
       			"requires",
        		lv_requires_2_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.Require");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementationUnitAccess().getScriptsLanguageUnitParserRuleCall_3_0()); 
	    }
		lv_scripts_3_0=ruleLanguageUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementationUnitRule());
	        }
       		add(
       			$current, 
       			"scripts",
        		lv_scripts_3_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.LanguageUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleRequire
entryRuleRequire returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequireRule()); }
	 iv_ruleRequire=ruleRequire 
	 { $current=$iv_ruleRequire.current; } 
	 EOF 
;

// Rule Require
ruleRequire returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='requireVTL' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequireAccess().getRequireVTLKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRequireAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequireRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRequireAccess().getVersionSpecVersionSpecParserRuleCall_2_0()); 
	    }
		lv_versionSpec_2_0=ruleVersionSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequireRule());
	        }
       		set(
       			$current, 
       			"versionSpec",
        		lv_versionSpec_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VersionSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRequireAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleLanguageUnit
entryRuleLanguageUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLanguageUnitRule()); }
	 iv_ruleLanguageUnit=ruleLanguageUnit 
	 { $current=$iv_ruleLanguageUnit.current; } 
	 EOF 
;

// Rule LanguageUnit
ruleLanguageUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getAdvicesAdviceParserRuleCall_0_0()); 
	    }
		lv_advices_0_0=ruleAdvice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		add(
       			$current, 
       			"advices",
        		lv_advices_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Advice");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='vilScript' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLanguageUnitAccess().getVilScriptKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getNameIdentifierParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLanguageUnitAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getParamParameterListParserRuleCall_4_0()); 
	    }
		lv_param_4_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLanguageUnitAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getParentScriptParentDeclParserRuleCall_6_0()); 
	    }
		lv_parent_6_0=ruleScriptParentDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"parent",
        		lv_parent_6_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.ScriptParentDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLanguageUnitAccess().getLeftCurlyBracketKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getVersionVersionStmtParserRuleCall_8_0()); 
	    }
		lv_version_8_0=ruleVersionStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"version",
        		lv_version_8_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VersionStmt");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getLoadPropertiesLoadPropertiesParserRuleCall_9_0()); 
	    }
		lv_loadProperties_9_0=ruleLoadProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		add(
       			$current, 
       			"loadProperties",
        		lv_loadProperties_9_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.LoadProperties");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLanguageUnitAccess().getContentsScriptContentsParserRuleCall_10_0()); 
	    }
		lv_contents_10_0=ruleScriptContents		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLanguageUnitRule());
	        }
       		set(
       			$current, 
       			"contents",
        		lv_contents_10_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.ScriptContents");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getLanguageUnitAccess().getRightCurlyBracketKeyword_11());
    }
(	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getLanguageUnitAccess().getSemicolonKeyword_12());
    }
)?)
;





// Entry rule entryRuleScriptParentDecl
entryRuleScriptParentDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptParentDeclRule()); }
	 iv_ruleScriptParentDecl=ruleScriptParentDecl 
	 { $current=$iv_ruleScriptParentDecl.current; } 
	 EOF 
;

// Rule ScriptParentDecl
ruleScriptParentDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScriptParentDeclAccess().getExtendsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptParentDeclAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptParentDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLoadProperties
entryRuleLoadProperties returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoadPropertiesRule()); }
	 iv_ruleLoadProperties=ruleLoadProperties 
	 { $current=$iv_ruleLoadProperties.current; } 
	 EOF 
;

// Rule LoadProperties
ruleLoadProperties returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='load' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoadPropertiesAccess().getLoadKeyword_0());
    }
	otherlv_1='properties' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLoadPropertiesAccess().getPropertiesKeyword_1());
    }
(
(
		lv_path_2_0=RULE_STRING
		{
			newLeafNode(lv_path_2_0, grammarAccess.getLoadPropertiesAccess().getPathSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadPropertiesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLoadPropertiesAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleScriptContents
entryRuleScriptContents returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptContentsRule()); }
	 iv_ruleScriptContents=ruleScriptContents 
	 { $current=$iv_ruleScriptContents.current; } 
	 EOF 
;

// Rule ScriptContents
ruleScriptContents returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getScriptContentsAccess().getScriptContentsAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getScriptContentsAccess().getElementsVariableDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_elements_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptContentsRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptContentsAccess().getElementsCompoundParserRuleCall_1_1_0()); 
	    }
		lv_elements_2_0=ruleCompound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptContentsRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Compound");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptContentsAccess().getElementsTypeDefParserRuleCall_1_2_0()); 
	    }
		lv_elements_3_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptContentsRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptContentsAccess().getElementsRuleDeclarationParserRuleCall_1_3_0()); 
	    }
		lv_elements_4_0=ruleRuleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptContentsRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.RuleDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRuleDeclaration
entryRuleRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDeclarationRule()); }
	 iv_ruleRuleDeclaration=ruleRuleDeclaration 
	 { $current=$iv_ruleRuleDeclaration.current; } 
	 EOF 
;

// Rule RuleDeclaration
ruleRuleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleDeclarationAccess().getRuleDeclarationAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getModifierRuleModifierParserRuleCall_1_0_0()); 
	    }
		lv_modifier_1_0=ruleRuleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.RuleModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getTypeTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getNameIdentifierParserRuleCall_1_2_0()); 
	    }
		lv_name_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleDeclarationAccess().getLeftParenthesisKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getParamListParameterListParserRuleCall_1_4_0()); 
	    }
		lv_paramList_5_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"paramList",
        		lv_paramList_5_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRuleDeclarationAccess().getRightParenthesisKeyword_1_5());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuleDeclarationAccess().getEqualsSignKeyword_1_6());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getConditionsRuleConditionsParserRuleCall_2_0()); 
	    }
		lv_conditions_8_0=ruleRuleConditions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"conditions",
        		lv_conditions_8_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.RuleConditions");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getBlockRuleElementBlockParserRuleCall_3_0()); 
	    }
		lv_block_9_0=ruleRuleElementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_9_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.RuleElementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRuleDeclarationAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleRuleConditions
entryRuleRuleConditions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleConditionsRule()); }
	 iv_ruleRuleConditions=ruleRuleConditions 
	 { $current=$iv_ruleRuleConditions.current; } 
	 EOF 
;

// Rule RuleConditions
ruleRuleConditions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleConditionsAccess().getRuleConditionsAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleConditionsAccess().getPostconditionLogicalExpressionParserRuleCall_1_0()); 
	    }
		lv_postcondition_1_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleConditionsRule());
	        }
       		add(
       			$current, 
       			"postcondition",
        		lv_postcondition_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleConditionsAccess().getColonKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleConditionsAccess().getPreconditionsLogicalExpressionParserRuleCall_3_0_0()); 
	    }
		lv_preconditions_3_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleConditionsRule());
	        }
       		add(
       			$current, 
       			"preconditions",
        		lv_preconditions_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleConditionsAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleConditionsAccess().getPreconditionsLogicalExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_preconditions_5_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleConditionsRule());
	        }
       		add(
       			$current, 
       			"preconditions",
        		lv_preconditions_5_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleRuleElementBlock
entryRuleRuleElementBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleElementBlockRule()); }
	 iv_ruleRuleElementBlock=ruleRuleElementBlock 
	 { $current=$iv_ruleRuleElementBlock.current; } 
	 EOF 
;

// Rule RuleElementBlock
ruleRuleElementBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRuleElementBlockAccess().getRuleElementBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleElementBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleElementBlockAccess().getElementsRuleElementParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleRuleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleElementBlockRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.RuleElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleElementBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleRuleElement
entryRuleRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleElementRule()); }
	 iv_ruleRuleElement=ruleRuleElement 
	 { $current=$iv_ruleRuleElement.current; } 
	 EOF 
;

// Rule RuleElement
ruleRuleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleElementAccess().getVarDeclVariableDeclarationParserRuleCall_0_0()); 
	    }
		lv_varDecl_0_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleElementRule());
	        }
       		set(
       			$current, 
       			"varDecl",
        		lv_varDecl_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleElementAccess().getExprStmtExpressionStatementParserRuleCall_1_0()); 
	    }
		lv_exprStmt_1_0=ruleExpressionStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleElementRule());
	        }
       		set(
       			$current, 
       			"exprStmt",
        		lv_exprStmt_1_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.ExpressionStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleElementAccess().getWhileWhileParserRuleCall_2_0_0()); 
	    }
		lv_while_2_0=ruleWhile		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleElementRule());
	        }
       		set(
       			$current, 
       			"while",
        		lv_while_2_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.While");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleElementAccess().getSemicolonKeyword_2_1());
    }
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleElementAccess().getForForParserRuleCall_3_0_0()); 
	    }
		lv_for_4_0=ruleFor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleElementRule());
	        }
       		set(
       			$current, 
       			"for",
        		lv_for_4_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.For");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleElementAccess().getSemicolonKeyword_3_1());
    }
)?))
;





// Entry rule entryRuleRuleModifier
entryRuleRuleModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleModifierRule()); }
	 iv_ruleRuleModifier=ruleRuleModifier 
	 { $current=$iv_ruleRuleModifier.current; } 
	 EOF 
;

// Rule RuleModifier
ruleRuleModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_protected_0_0=	'protected' 
    {
        newLeafNode(lv_protected_0_0, grammarAccess.getRuleModifierAccess().getProtectedProtectedKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleModifierRule());
	        }
       		setWithLastConsumed($current, "protected", lv_protected_0_0, "protected");
	    }

)
)
;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getVarIdentifierParserRuleCall_0_0_0_0()); 
	    }
		lv_var_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionStatementAccess().getFullStopKeyword_0_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getFieldIdentifierParserRuleCall_0_0_1_1_0()); 
	    }
		lv_field_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionStatementAccess().getEqualsSignKeyword_0_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_0_2());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getAltAlternativeParserRuleCall_1_0_0()); 
	    }
		lv_alt_6_0=ruleAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"alt",
        		lv_alt_6_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.Alternative");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1_1());
    }
)?))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0()); 
	    }
		lv_otherEx_0_0=ruleExpressionOrQualifiedExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"otherEx",
        		lv_otherEx_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ExpressionOrQualifiedExecution");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getUnqExUnqualifiedExecutionParserRuleCall_1_0()); 
	    }
		lv_unqEx_1_0=ruleUnqualifiedExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"unqEx",
        		lv_unqEx_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.UnqualifiedExecution");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperExSuperExecutionParserRuleCall_2_0()); 
	    }
		lv_superEx_2_0=ruleSuperExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"superEx",
        		lv_superEx_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.SuperExecution");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSysExSystemExecutionParserRuleCall_3_0()); 
	    }
		lv_sysEx_3_0=ruleSystemExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"sysEx",
        		lv_sysEx_3_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.SystemExecution");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMapMapParserRuleCall_4_0()); 
	    }
		lv_map_4_0=ruleMap		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"map",
        		lv_map_4_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.Map");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJoinJoinParserRuleCall_5_0()); 
	    }
		lv_join_5_0=ruleJoin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"join",
        		lv_join_5_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.Join");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getInstantiateInstantiateParserRuleCall_6_0()); 
	    }
		lv_instantiate_6_0=ruleInstantiate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"instantiate",
        		lv_instantiate_6_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.Instantiate");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNewExConstructorExecutionParserRuleCall_7_0()); 
	    }
		lv_newEx_7_0=ruleConstructorExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"newEx",
        		lv_newEx_7_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ConstructorExecution");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInstantiate
entryRuleInstantiate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstantiateRule()); }
	 iv_ruleInstantiate=ruleInstantiate 
	 { $current=$iv_ruleInstantiate.current; } 
	 EOF 
;

// Rule Instantiate
ruleInstantiate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='instantiate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstantiateAccess().getInstantiateKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstantiateAccess().getProjectIdentifierParserRuleCall_1_0_0()); 
	    }
		lv_project_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstantiateRule());
	        }
       		set(
       			$current, 
       			"project",
        		lv_project_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_ruleName_2_0=RULE_STRING
		{
			newLeafNode(lv_ruleName_2_0, grammarAccess.getInstantiateAccess().getRuleNameSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstantiateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ruleName",
        		lv_ruleName_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.STRING");
	    }

)
))	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInstantiateAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstantiateAccess().getParamArgumentListParserRuleCall_3_0()); 
	    }
		lv_param_4_0=ruleArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstantiateRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInstantiateAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstantiateAccess().getVersionSpecVersionSpecParserRuleCall_5_0()); 
	    }
		lv_versionSpec_6_0=ruleVersionSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstantiateRule());
	        }
       		set(
       			$current, 
       			"versionSpec",
        		lv_versionSpec_6_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VersionSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleLoopVariable
entryRuleLoopVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopVariableRule()); }
	 iv_ruleLoopVariable=ruleLoopVariable 
	 { $current=$iv_ruleLoopVariable.current; } 
	 EOF 
;

// Rule LoopVariable
ruleLoopVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopVariableAccess().getVarIdentifierParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopVariableRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMap
entryRuleMap returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapRule()); }
	 iv_ruleMap=ruleMap 
	 { $current=$iv_ruleMap.current; } 
	 EOF 
;

// Rule Map
ruleMap returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='map' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMapAccess().getMapKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMapAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapAccess().getVarLoopVariableParserRuleCall_2_0()); 
	    }
		lv_var_2_0=ruleLoopVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapRule());
	        }
       		add(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.LoopVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMapAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapAccess().getVarLoopVariableParserRuleCall_3_1_0()); 
	    }
		lv_var_4_0=ruleLoopVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapRule());
	        }
       		add(
       			$current, 
       			"var",
        		lv_var_4_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.LoopVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
(
		lv_separator_5_1=	'=' 
    {
        newLeafNode(lv_separator_5_1, grammarAccess.getMapAccess().getSeparatorEqualsSignKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMapRule());
	        }
       		setWithLastConsumed($current, "separator", lv_separator_5_1, null);
	    }

    |		lv_separator_5_2=	':' 
    {
        newLeafNode(lv_separator_5_2, grammarAccess.getMapAccess().getSeparatorColonKeyword_4_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMapRule());
	        }
       		setWithLastConsumed($current, "separator", lv_separator_5_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMapAccess().getExprExpressionParserRuleCall_5_0()); 
	    }
		lv_expr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMapAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapAccess().getBlockRuleElementBlockParserRuleCall_7_0()); 
	    }
		lv_block_8_0=ruleRuleElementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_8_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.RuleElementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForRule()); }
	 iv_ruleFor=ruleFor 
	 { $current=$iv_ruleFor.current; } 
	 EOF 
;

// Rule For
ruleFor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getVarLoopVariableParserRuleCall_2_0()); 
	    }
		lv_var_2_0=ruleLoopVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		add(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.LoopVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getVarLoopVariableParserRuleCall_3_1_0()); 
	    }
		lv_var_4_0=ruleLoopVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		add(
       			$current, 
       			"var",
        		lv_var_4_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.LoopVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
(
		lv_separator_5_1=	'=' 
    {
        newLeafNode(lv_separator_5_1, grammarAccess.getForAccess().getSeparatorEqualsSignKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForRule());
	        }
       		setWithLastConsumed($current, "separator", lv_separator_5_1, null);
	    }

    |		lv_separator_5_2=	':' 
    {
        newLeafNode(lv_separator_5_2, grammarAccess.getForAccess().getSeparatorColonKeyword_4_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForRule());
	        }
       		setWithLastConsumed($current, "separator", lv_separator_5_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getExprExpressionParserRuleCall_5_0()); 
	    }
		lv_expr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getBlockRuleElementBlockParserRuleCall_7_0()); 
	    }
		lv_block_8_0=ruleRuleElementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_8_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.RuleElementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	 iv_ruleWhile=ruleWhile 
	 { $current=$iv_ruleWhile.current; } 
	 EOF 
;

// Rule While
ruleWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getBlockRuleElementBlockParserRuleCall_4_0()); 
	    }
		lv_block_4_0=ruleRuleElementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.RuleElementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAlternative
entryRuleAlternative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativeRule()); }
	 iv_ruleAlternative=ruleAlternative 
	 { $current=$iv_ruleAlternative.current; } 
	 EOF 
;

// Rule Alternative
ruleAlternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlternativeAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAlternativeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAlternativeAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getIfStatementOrBlockParserRuleCall_4_0()); 
	    }
		lv_if_4_0=ruleStatementOrBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_4_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.StatementOrBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAlternativeAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getElseStatementOrBlockParserRuleCall_5_1_0()); 
	    }
		lv_else_6_0=ruleStatementOrBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_6_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.StatementOrBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleStatementOrBlock
entryRuleStatementOrBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementOrBlockRule()); }
	 iv_ruleStatementOrBlock=ruleStatementOrBlock 
	 { $current=$iv_ruleStatementOrBlock.current; } 
	 EOF 
;

// Rule StatementOrBlock
ruleStatementOrBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementOrBlockAccess().getExStmtExpressionStatementParserRuleCall_0_0()); 
	    }
		lv_exStmt_0_0=ruleExpressionStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementOrBlockRule());
	        }
       		set(
       			$current, 
       			"exStmt",
        		lv_exStmt_0_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.ExpressionStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementOrBlockAccess().getBlockRuleElementBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleRuleElementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementOrBlockRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.RuleElementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJoin
entryRuleJoin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJoinRule()); }
	 iv_ruleJoin=ruleJoin 
	 { $current=$iv_ruleJoin.current; } 
	 EOF 
;

// Rule Join
ruleJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='join' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJoinAccess().getJoinKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJoinAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinAccess().getVar1JoinVariableParserRuleCall_2_0()); 
	    }
		lv_var1_2_0=ruleJoinVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinRule());
	        }
       		set(
       			$current, 
       			"var1",
        		lv_var1_2_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.JoinVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJoinAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinAccess().getVar2JoinVariableParserRuleCall_4_0()); 
	    }
		lv_var2_4_0=ruleJoinVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinRule());
	        }
       		set(
       			$current, 
       			"var2",
        		lv_var2_4_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.JoinVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJoinAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_6='with' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getJoinAccess().getWithKeyword_6_0());
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getJoinAccess().getLeftParenthesisKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinAccess().getConditionExpressionParserRuleCall_6_2_0()); 
	    }
		lv_condition_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_8_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getJoinAccess().getRightParenthesisKeyword_6_3());
    }
)?)
;





// Entry rule entryRuleJoinVariable
entryRuleJoinVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJoinVariableRule()); }
	 iv_ruleJoinVariable=ruleJoinVariable 
	 { $current=$iv_ruleJoinVariable.current; } 
	 EOF 
;

// Rule JoinVariable
ruleJoinVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_excl_0_0=	'exclude' 
    {
        newLeafNode(lv_excl_0_0, grammarAccess.getJoinVariableAccess().getExclExcludeKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJoinVariableRule());
	        }
       		setWithLastConsumed($current, "excl", lv_excl_0_0, "exclude");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinVariableAccess().getVarIdentifierParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinVariableRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJoinVariableAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinVariableAccess().getExprExpressionParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinVariableRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSystemExecution
entryRuleSystemExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemExecutionRule()); }
	 iv_ruleSystemExecution=ruleSystemExecution 
	 { $current=$iv_ruleSystemExecution.current; } 
	 EOF 
;

// Rule SystemExecution
ruleSystemExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='execute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemExecutionAccess().getExecuteKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemExecutionAccess().getCallCallParserRuleCall_1_0()); 
	    }
		lv_call_1_0=ruleCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemExecutionRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Call");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemExecutionAccess().getCallsSubCallParserRuleCall_2_0()); 
	    }
		lv_calls_2_0=ruleSubCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemExecutionRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.SubCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_const_0_0=	'const' 
    {
        newLeafNode(lv_const_0_0, grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "const", lv_const_0_0, "const");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameIdentifierParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleCompound
entryRuleCompound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundRule()); }
	 iv_ruleCompound=ruleCompound 
	 { $current=$iv_ruleCompound.current; } 
	 EOF 
;

// Rule Compound
ruleCompound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_abstract_0_0=	'abstract' 
    {
        newLeafNode(lv_abstract_0_0, grammarAccess.getCompoundAccess().getAbstractAbstractKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCompoundRule());
	        }
       		setWithLastConsumed($current, "abstract", lv_abstract_0_0, "abstract");
	    }

)
)?	otherlv_1='compound' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCompoundAccess().getCompoundKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompoundAccess().getNameIdentifierParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompoundRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='refines' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCompoundAccess().getRefinesKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompoundAccess().getSuperIdentifierParserRuleCall_3_1_0()); 
	    }
		lv_super_4_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompoundRule());
	        }
       		set(
       			$current, 
       			"super",
        		lv_super_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCompoundAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompoundAccess().getVarsVariableDeclarationParserRuleCall_5_0()); 
	    }
		lv_vars_6_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompoundRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_6_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCompoundAccess().getRightCurlyBracketKeyword_6());
    }
(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCompoundAccess().getSemicolonKeyword_7());
    }
)?)
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='typedef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDefAccess().getTypedefKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDefAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAdvice
entryRuleAdvice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdviceRule()); }
	 iv_ruleAdvice=ruleAdvice 
	 { $current=$iv_ruleAdvice.current; } 
	 EOF 
;

// Rule Advice
ruleAdvice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@advice' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAdviceAccess().getAdviceKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdviceAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdviceAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdviceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAdviceAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdviceAccess().getVersionSpecVersionSpecParserRuleCall_4_0()); 
	    }
		lv_versionSpec_4_0=ruleVersionSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdviceRule());
	        }
       		set(
       			$current, 
       			"versionSpec",
        		lv_versionSpec_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VersionSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleVersionSpec
entryRuleVersionSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVersionSpecRule()); }
	 iv_ruleVersionSpec=ruleVersionSpec 
	 { $current=$iv_ruleVersionSpec.current; } 
	 EOF 
;

// Rule VersionSpec
ruleVersionSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='with' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVersionSpecAccess().getWithKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVersionSpecAccess().getRestrictionExpressionParserRuleCall_1_0()); 
	    }
		lv_restriction_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVersionSpecRule());
	        }
       		set(
       			$current, 
       			"restriction",
        		lv_restriction_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_0_0()); 
	    }
		lv_param_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_1_1_0()); 
	    }
		lv_param_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getDfltExpressionParserRuleCall_2_1_0()); 
	    }
		lv_dflt_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"dflt",
        		lv_dflt_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVersionStmt
entryRuleVersionStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVersionStmtRule()); }
	 iv_ruleVersionStmt=ruleVersionStmt 
	 { $current=$iv_ruleVersionStmt.current; } 
	 EOF 
;

// Rule VersionStmt
ruleVersionStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='version' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVersionStmtAccess().getVersionKeyword_0());
    }
(
(
		lv_version_1_0=RULE_VERSION
		{
			newLeafNode(lv_version_1_0, grammarAccess.getVersionStmtAccess().getVersionVERSIONTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVersionStmtRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"version",
        		lv_version_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VERSION");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVersionStmtAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0_0());
    }

    |(
(
		lv_insert_1_0=	'insert' 
    {
        newLeafNode(lv_insert_1_0, grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed($current, "insert", lv_insert_1_0, "insert");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_wildcard_3_0=	'*' 
    {
        newLeafNode(lv_wildcard_3_0, grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed($current, "wildcard", lv_wildcard_3_0, "*");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getVersionSpecVersionSpecParserRuleCall_3_0()); 
	    }
		lv_versionSpec_4_0=ruleVersionSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"versionSpec",
        		lv_versionSpec_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VersionSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getImportAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprLogicalExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getInitContainerInitializerParserRuleCall_1_0()); 
	    }
		lv_init_1_0=ruleContainerInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ContainerInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	 iv_ruleLogicalExpression=ruleLogicalExpression 
	 { $current=$iv_ruleLogicalExpression.current; } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLeftEqualityExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionPartParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleLogicalExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.LogicalExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleLogicalExpressionPart
entryRuleLogicalExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpressionPartRule()); }
	 iv_ruleLogicalExpressionPart=ruleLogicalExpressionPart 
	 { $current=$iv_ruleLogicalExpressionPart.current; } 
	 EOF 
;

// Rule LogicalExpressionPart
ruleLogicalExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionPartAccess().getOpLogicalOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleLogicalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.LogicalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionPartAccess().getExEqualityExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionPartRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOperatorRule()); } 
	 iv_ruleLogicalOperator=ruleLogicalOperator 
	 { $current=$iv_ruleLogicalOperator.current.getText(); }  
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); 
    }

    |
	kw='xor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getXorKeyword_2()); 
    }

    |
	kw='implies' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getImpliesKeyword_3()); 
    }

    |
	kw='iff' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getIffKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionPartParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleEqualityExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.EqualityExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEqualityExpressionPart
entryRuleEqualityExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionPartRule()); }
	 iv_ruleEqualityExpressionPart=ruleEqualityExpressionPart 
	 { $current=$iv_ruleEqualityExpressionPart.current; } 
	 EOF 
;

// Rule EqualityExpressionPart
ruleEqualityExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionPartAccess().getOpEqualityOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.EqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionPartAccess().getExRelationalExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionPartRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityOperatorRule()); } 
	 iv_ruleEqualityOperator=ruleEqualityOperator 
	 { $current=$iv_ruleEqualityOperator.current.getText(); }  
	 EOF 
;

// Rule EqualityOperator
ruleEqualityOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getLeftAdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionPartParserRuleCall_1_0_0()); 
	    }
		lv_right_1_0=ruleRelationalExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.RelationalExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRight2RelationalExpressionPartParserRuleCall_1_1_0()); 
	    }
		lv_right2_2_0=ruleRelationalExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right2",
        		lv_right2_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.RelationalExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)?)?)
;





// Entry rule entryRuleRelationalExpressionPart
entryRuleRelationalExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionPartRule()); }
	 iv_ruleRelationalExpressionPart=ruleRelationalExpressionPart 
	 { $current=$iv_ruleRelationalExpressionPart.current; } 
	 EOF 
;

// Rule RelationalExpressionPart
ruleRelationalExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionPartAccess().getOpRelationalOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionPartAccess().getExAdditiveExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionPartRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOperatorRule()); } 
	 iv_ruleRelationalOperator=ruleRelationalOperator 
	 { $current=$iv_ruleRelationalOperator.current.getText(); }  
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getLeftMultiplicativeExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionPartParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleAdditiveExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.AdditiveExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAdditiveExpressionPart
entryRuleAdditiveExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionPartRule()); }
	 iv_ruleAdditiveExpressionPart=ruleAdditiveExpressionPart 
	 { $current=$iv_ruleAdditiveExpressionPart.current; } 
	 EOF 
;

// Rule AdditiveExpressionPart
ruleAdditiveExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionPartAccess().getOpAdditiveOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionPartAccess().getExMultiplicativeExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionPartRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveOperatorRule()); } 
	 iv_ruleAdditiveOperator=ruleAdditiveOperator 
	 { $current=$iv_ruleAdditiveOperator.current.getText(); }  
	 EOF 
;

// Rule AdditiveOperator
ruleAdditiveOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionPartParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleMultiplicativeExpressionPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.MultiplicativeExpressionPart");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleMultiplicativeExpressionPart
entryRuleMultiplicativeExpressionPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionPartRule()); }
	 iv_ruleMultiplicativeExpressionPart=ruleMultiplicativeExpressionPart 
	 { $current=$iv_ruleMultiplicativeExpressionPart.current; } 
	 EOF 
;

// Rule MultiplicativeExpressionPart
ruleMultiplicativeExpressionPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionPartAccess().getOpMultiplicativeOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionPartRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.MultiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionPartAccess().getExprUnaryExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionPartRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeOperatorRule()); } 
	 iv_ruleMultiplicativeOperator=ruleMultiplicativeOperator 
	 { $current=$iv_ruleMultiplicativeOperator.current.getText(); }  
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=rulePostfixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.PostfixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); } 
	 iv_ruleUnaryOperator=ruleUnaryOperator 
	 { $current=$iv_ruleUnaryOperator.current.getText(); }  
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getNotKeyword_0()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_1()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_2()); 
    }
)
    ;





// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	 iv_rulePostfixExpression=rulePostfixExpression 
	 { $current=$iv_rulePostfixExpression.current; } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftPrimaryExpressionParserRuleCall_0()); 
	    }
		lv_left_0_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"de.uni_hildesheim.sse.VilBuildLanguage.PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExpressionOrQualifiedExecution
entryRuleExpressionOrQualifiedExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionOrQualifiedExecutionRule()); }
	 iv_ruleExpressionOrQualifiedExecution=ruleExpressionOrQualifiedExecution 
	 { $current=$iv_ruleExpressionOrQualifiedExecution.current; } 
	 EOF 
;

// Rule ExpressionOrQualifiedExecution
ruleExpressionOrQualifiedExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValConstantParserRuleCall_0_0_0()); 
	    }
		lv_val_0_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionOrQualifiedExecutionRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionOrQualifiedExecutionAccess().getLeftParenthesisKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisExpressionParserRuleCall_0_1_1_0()); 
	    }
		lv_parenthesis_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionOrQualifiedExecutionRule());
	        }
       		set(
       			$current, 
       			"parenthesis",
        		lv_parenthesis_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionOrQualifiedExecutionAccess().getRightParenthesisKeyword_0_1_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); 
	    }
		lv_calls_4_0=ruleSubCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionOrQualifiedExecutionRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.SubCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleUnqualifiedExecution
entryRuleUnqualifiedExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnqualifiedExecutionRule()); }
	 iv_ruleUnqualifiedExecution=ruleUnqualifiedExecution 
	 { $current=$iv_ruleUnqualifiedExecution.current; } 
	 EOF 
;

// Rule UnqualifiedExecution
ruleUnqualifiedExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnqualifiedExecutionAccess().getCallCallParserRuleCall_0_0()); 
	    }
		lv_call_0_0=ruleCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnqualifiedExecutionRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Call");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnqualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); 
	    }
		lv_calls_1_0=ruleSubCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnqualifiedExecutionRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.SubCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSuperExecution
entryRuleSuperExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuperExecutionRule()); }
	 iv_ruleSuperExecution=ruleSuperExecution 
	 { $current=$iv_ruleSuperExecution.current; } 
	 EOF 
;

// Rule SuperExecution
ruleSuperExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='super' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSuperExecutionAccess().getSuperKeyword_0());
    }
	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSuperExecutionAccess().getFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuperExecutionAccess().getCallCallParserRuleCall_2_0()); 
	    }
		lv_call_2_0=ruleCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuperExecutionRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Call");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSuperExecutionAccess().getCallsSubCallParserRuleCall_3_0()); 
	    }
		lv_calls_3_0=ruleSubCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuperExecutionRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.SubCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleConstructorExecution
entryRuleConstructorExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorExecutionRule()); }
	 iv_ruleConstructorExecution=ruleConstructorExecution 
	 { $current=$iv_ruleConstructorExecution.current; } 
	 EOF 
;

// Rule ConstructorExecution
ruleConstructorExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstructorExecutionAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorExecutionAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorExecutionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstructorExecutionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorExecutionAccess().getParamArgumentListParserRuleCall_3_0()); 
	    }
		lv_param_3_0=ruleArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorExecutionRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstructorExecutionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorExecutionAccess().getCallsSubCallParserRuleCall_5_0()); 
	    }
		lv_calls_5_0=ruleSubCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorExecutionRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_5_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.SubCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSubCall
entryRuleSubCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubCallRule()); }
	 iv_ruleSubCall=ruleSubCall 
	 { $current=$iv_ruleSubCall.current; } 
	 EOF 
;

// Rule SubCall
ruleSubCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
		lv_type_0_1=	'.' 
    {
        newLeafNode(lv_type_0_1, grammarAccess.getSubCallAccess().getTypeFullStopKeyword_0_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubCallRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_1, null);
	    }

    |		lv_type_0_2=	'->' 
    {
        newLeafNode(lv_type_0_2, grammarAccess.getSubCallAccess().getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubCallRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubCallAccess().getCallCallParserRuleCall_0_1_0()); 
	    }
		lv_call_1_0=ruleCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubCallRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Call");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubCallAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubCallAccess().getArrayExExpressionParserRuleCall_1_1_0()); 
	    }
		lv_arrayEx_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubCallRule());
	        }
       		set(
       			$current, 
       			"arrayEx",
        		lv_arrayEx_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubCallAccess().getRightSquareBracketKeyword_1_2());
    }
))
;





// Entry rule entryRuleDeclarator
entryRuleDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaratorRule()); }
	 iv_ruleDeclarator=ruleDeclarator 
	 { $current=$iv_ruleDeclarator.current; } 
	 EOF 
;

// Rule Declarator
ruleDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_0_0()); 
	    }
		lv_decl_0_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaratorRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclaratorAccess().getSemicolonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_1_1_0()); 
	    }
		lv_decl_2_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaratorRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_2());
    }
)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_1_0()); 
	    }
		lv_units_1_0=ruleDeclarationUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"units",
        		lv_units_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.DeclarationUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_2_1_0()); 
	    }
		lv_units_3_0=ruleDeclarationUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"units",
        		lv_units_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.DeclarationUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDeclarationUnit
entryRuleDeclarationUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationUnitRule()); }
	 iv_ruleDeclarationUnit=ruleDeclarationUnit 
	 { $current=$iv_ruleDeclarationUnit.current; } 
	 EOF 
;

// Rule DeclarationUnit
ruleDeclarationUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationUnitAccess().getIdIdentifierParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationUnitRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclarationUnitAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationUnitAccess().getDefltExpressionParserRuleCall_1_1_0()); 
	    }
		lv_deflt_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationUnitRule());
	        }
       		set(
       			$current, 
       			"deflt",
        		lv_deflt_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getNameQualifiedPrefixParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleQualifiedPrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.QualifiedPrefix");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getDeclDeclaratorParserRuleCall_2_0()); 
	    }
		lv_decl_2_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"decl",
        		lv_decl_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Declarator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getParamArgumentListParserRuleCall_3_0()); 
	    }
		lv_param_3_0=ruleArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleArgumentList
entryRuleArgumentList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); }
	 iv_ruleArgumentList=ruleArgumentList 
	 { $current=$iv_ruleArgumentList.current; } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_0_0()); 
	    }
		lv_param_0_0=ruleNamedArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentListRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.NamedArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_1_1_0()); 
	    }
		lv_param_2_0=ruleNamedArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentListRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.NamedArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNamedArgument
entryRuleNamedArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedArgumentRule()); }
	 iv_ruleNamedArgument=ruleNamedArgument 
	 { $current=$iv_ruleNamedArgument.current; } 
	 EOF 
;

// Rule NamedArgument
ruleNamedArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getNamedArgumentAccess().getNameIdentifierParserRuleCall_0_0_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedArgumentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedArgumentAccess().getExExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedArgumentRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedPrefix
entryRuleQualifiedPrefix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedPrefixRule()); }
	 iv_ruleQualifiedPrefix=ruleQualifiedPrefix 
	 { $current=$iv_ruleQualifiedPrefix.current; } 
	 EOF 
;

// Rule QualifiedPrefix
ruleQualifiedPrefix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_0_0()); 
	    }
		lv_qname_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedPrefixRule());
	        }
       		add(
       			$current, 
       			"qname",
        		lv_qname_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_qname_1_0=	'::' 
    {
        newLeafNode(lv_qname_1_0, grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedPrefixRule());
	        }
       		addWithLastConsumed($current, "qname", lv_qname_1_0, "::");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_1_1_0()); 
	    }
		lv_qname_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedPrefixRule());
	        }
       		add(
       			$current, 
       			"qname",
        		lv_qname_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current; } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameAccess().getPrefixQualifiedPrefixParserRuleCall_0_0()); 
	    }
		lv_prefix_0_0=ruleQualifiedPrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameRule());
	        }
       		set(
       			$current, 
       			"prefix",
        		lv_prefix_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.QualifiedPrefix");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_qname_1_0=	'.' 
    {
        newLeafNode(lv_qname_1_0, grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameRule());
	        }
       		addWithLastConsumed($current, "qname", lv_qname_1_0, ".");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); 
	    }
		lv_qname_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameRule());
	        }
       		add(
       			$current, 
       			"qname",
        		lv_qname_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getNValueNumValueParserRuleCall_0_0()); 
	    }
		lv_nValue_0_0=ruleNumValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"nValue",
        		lv_nValue_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.NumValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_sValue_1_0=RULE_STRING
		{
			newLeafNode(lv_sValue_1_0, grammarAccess.getConstantAccess().getSValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sValue",
        		lv_sValue_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.STRING");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getQValueQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_qValue_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"qValue",
        		lv_qValue_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
(
		lv_bValue_3_1=	'true' 
    {
        newLeafNode(lv_bValue_3_1, grammarAccess.getConstantAccess().getBValueTrueKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed($current, "bValue", lv_bValue_3_1, null);
	    }

    |		lv_bValue_3_2=	'false' 
    {
        newLeafNode(lv_bValue_3_2, grammarAccess.getConstantAccess().getBValueFalseKeyword_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed($current, "bValue", lv_bValue_3_2, null);
	    }

)

)
)
    |(
(
		lv_null_4_0=	'null' 
    {
        newLeafNode(lv_null_4_0, grammarAccess.getConstantAccess().getNullNullKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed($current, "null", lv_null_4_0, "null");
	    }

)
)
    |((
(
RULE_VERSION

)
)=>
(
		lv_version_5_0=RULE_VERSION
		{
			newLeafNode(lv_version_5_0, grammarAccess.getConstantAccess().getVersionVERSIONTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"version",
        		lv_version_5_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.VERSION");
	    }

)
))
;





// Entry rule entryRuleNumValue
entryRuleNumValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumValueRule()); }
	 iv_ruleNumValue=ruleNumValue 
	 { $current=$iv_ruleNumValue.current; } 
	 EOF 
;

// Rule NumValue
ruleNumValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_NUMBER
		{
			newLeafNode(lv_val_0_0, grammarAccess.getNumValueAccess().getValNUMBERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.NUMBER");
	    }

)
)
;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_VERSION_1=RULE_VERSION    {
		$current.merge(this_VERSION_1);
    }

    { 
    newLeafNode(this_VERSION_1, grammarAccess.getIdentifierAccess().getVERSIONTerminalRuleCall_1()); 
    }

    |    this_EXPONENT_2=RULE_EXPONENT    {
		$current.merge(this_EXPONENT_2);
    }

    { 
    newLeafNode(this_EXPONENT_2, grammarAccess.getIdentifierAccess().getEXPONENTTerminalRuleCall_2()); 
    }

    |
	kw='version' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifierAccess().getVersionKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getNameQualifiedPrefixParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleQualifiedPrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.QualifiedPrefix");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_set_1_0=	'setOf' 
    {
        newLeafNode(lv_set_1_0, grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "set", lv_set_1_0, "setOf");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_1_1_0()); 
	    }
		lv_param_2_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_seq_3_0=	'sequenceOf' 
    {
        newLeafNode(lv_seq_3_0, grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "seq", lv_seq_3_0, "sequenceOf");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_2_1_0()); 
	    }
		lv_param_4_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_map_5_0=	'mapOf' 
    {
        newLeafNode(lv_map_5_0, grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "map", lv_map_5_0, "mapOf");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_3_1_0()); 
	    }
		lv_param_6_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_6_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_call_7_0=	'callOf' 
    {
        newLeafNode(lv_call_7_0, grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "call", lv_call_7_0, "callOf");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getReturnTypeParserRuleCall_4_1_0()); 
	    }
		lv_return_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_8_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_4_2_0()); 
	    }
		lv_param_9_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_9_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTypeParameters
entryRuleTypeParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParametersRule()); }
	 iv_ruleTypeParameters=ruleTypeParameters 
	 { $current=$iv_ruleTypeParameters.current; } 
	 EOF 
;

// Rule TypeParameters
ruleTypeParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeParametersAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_1_0()); 
	    }
		lv_param_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParametersRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_2_1_0()); 
	    }
		lv_param_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParametersRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeParametersAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleContainerInitializer
entryRuleContainerInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainerInitializerRule()); }
	 iv_ruleContainerInitializer=ruleContainerInitializer 
	 { $current=$iv_ruleContainerInitializer.current; } 
	 EOF 
;

// Rule ContainerInitializer
ruleContainerInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getContainerInitializerAccess().getContainerInitializerAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContainerInitializerAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_0_0()); 
	    }
		lv_exprs_2_0=ruleContainerInitializerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerInitializerRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ContainerInitializerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getContainerInitializerAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_exprs_4_0=ruleContainerInitializerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerInitializerRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_4_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ContainerInitializerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getContainerInitializerAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleContainerInitializerExpression
entryRuleContainerInitializerExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainerInitializerExpressionRule()); }
	 iv_ruleContainerInitializerExpression=ruleContainerInitializerExpression 
	 { $current=$iv_ruleContainerInitializerExpression.current; } 
	 EOF 
;

// Rule ContainerInitializerExpression
ruleContainerInitializerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getContainerInitializerExpressionAccess().getLogicalLogicalExpressionParserRuleCall_0_0()); 
	    }
		lv_logical_0_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerInitializerExpressionRule());
	        }
       		set(
       			$current, 
       			"logical",
        		lv_logical_0_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerInitializerExpressionAccess().getContainerContainerInitializerParserRuleCall_1_0()); 
	    }
		lv_container_1_0=ruleContainerInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerInitializerExpressionRule());
	        }
       		set(
       			$current, 
       			"container",
        		lv_container_1_0, 
        		"de.uni_hildesheim.sse.vil.expressions.ExpressionDsl.ContainerInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_VERSION : 'v' ('0'..'9')+ ('.' ('0'..'9')+)*;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NUMBER : '-'? (('0'..'9')+ ('.' ('0'..'9')* RULE_EXPONENT?)?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT);

RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


