/*
 * generated by Xtext
 */
package de.uni_hildesheim.sse.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.uni_hildesheim.sse.vil.expressions.services.ExpressionDslGrammarAccess;

@Singleton
public class VilBuildLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ImplementationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.ImplementationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementationUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cRequiresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequiresRequireParserRuleCall_2_0 = (RuleCall)cRequiresAssignment_2.eContents().get(0);
		private final Assignment cScriptsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScriptsLanguageUnitParserRuleCall_3_0 = (RuleCall)cScriptsAssignment_3.eContents().get(0);
		
		//ImplementationUnit:
		//	{ImplementationUnit} imports+=Import*
		//	requires+=Require*
		//	scripts+=LanguageUnit*;
		@Override public ParserRule getRule() { return rule; }

		//{ImplementationUnit} imports+=Import*
		//requires+=Require*
		//scripts+=LanguageUnit*
		public Group getGroup() { return cGroup; }

		//{ImplementationUnit}
		public Action getImplementationUnitAction_0() { return cImplementationUnitAction_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//requires+=Require*
		public Assignment getRequiresAssignment_2() { return cRequiresAssignment_2; }

		//Require
		public RuleCall getRequiresRequireParserRuleCall_2_0() { return cRequiresRequireParserRuleCall_2_0; }

		//scripts+=LanguageUnit*
		public Assignment getScriptsAssignment_3() { return cScriptsAssignment_3; }

		//LanguageUnit
		public RuleCall getScriptsLanguageUnitParserRuleCall_3_0() { return cScriptsLanguageUnitParserRuleCall_3_0; }
	}

	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.Require");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireVTLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVersionSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionSpecVersionSpecParserRuleCall_2_0 = (RuleCall)cVersionSpecAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Require:
		//	// here fqn because this may reference a specific project (of an external project)
		//	'requireVTL' name=STRING versionSpec=VersionSpec
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//// here fqn because this may reference a specific project (of an external project)
		//'requireVTL' name=STRING versionSpec=VersionSpec
		//';'
		public Group getGroup() { return cGroup; }

		//// here fqn because this may reference a specific project (of an external project)
		//'requireVTL'
		public Keyword getRequireVTLKeyword_0() { return cRequireVTLKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//versionSpec=VersionSpec
		public Assignment getVersionSpecAssignment_2() { return cVersionSpecAssignment_2; }

		//VersionSpec
		public RuleCall getVersionSpecVersionSpecParserRuleCall_2_0() { return cVersionSpecVersionSpecParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class LanguageUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.LanguageUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdvicesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdvicesAdviceParserRuleCall_0_0 = (RuleCall)cAdvicesAssignment_0.eContents().get(0);
		private final Keyword cVilScriptKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamParameterListParserRuleCall_4_0 = (RuleCall)cParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParentScriptParentDeclParserRuleCall_6_0 = (RuleCall)cParentAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cVersionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cVersionVersionStmtParserRuleCall_8_0 = (RuleCall)cVersionAssignment_8.eContents().get(0);
		private final Assignment cLoadPropertiesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLoadPropertiesLoadPropertiesParserRuleCall_9_0 = (RuleCall)cLoadPropertiesAssignment_9.eContents().get(0);
		private final Assignment cContentsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cContentsScriptContentsParserRuleCall_10_0 = (RuleCall)cContentsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//@Override
		//LanguageUnit:
		//	advices+=Advice*
		//	'vilScript' name=Identifier
		//	'(' param=ParameterList? ')'
		//	parent=ScriptParentDecl?
		//	'{'
		//	version=VersionStmt?
		//	loadProperties+=LoadProperties*
		//	contents=ScriptContents
		//	'}' ';'?;
		@Override public ParserRule getRule() { return rule; }

		//// do not rename - required for reuse
		//    advices+=Advice*
		//'vilScript' name=Identifier
		//'(' param=ParameterList? ')'
		//parent=ScriptParentDecl?
		//'{'
		//version=VersionStmt?
		//loadProperties+=LoadProperties*
		//contents=ScriptContents
		//'}' ';'?
		public Group getGroup() { return cGroup; }

		//// do not rename - required for reuse
		//    advices+=Advice*
		public Assignment getAdvicesAssignment_0() { return cAdvicesAssignment_0; }

		//Advice
		public RuleCall getAdvicesAdviceParserRuleCall_0_0() { return cAdvicesAdviceParserRuleCall_0_0; }

		//'vilScript'
		public Keyword getVilScriptKeyword_1() { return cVilScriptKeyword_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//param=ParameterList?
		public Assignment getParamAssignment_4() { return cParamAssignment_4; }

		//ParameterList
		public RuleCall getParamParameterListParserRuleCall_4_0() { return cParamParameterListParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//parent=ScriptParentDecl?
		public Assignment getParentAssignment_6() { return cParentAssignment_6; }

		//ScriptParentDecl
		public RuleCall getParentScriptParentDeclParserRuleCall_6_0() { return cParentScriptParentDeclParserRuleCall_6_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//version=VersionStmt?
		public Assignment getVersionAssignment_8() { return cVersionAssignment_8; }

		//VersionStmt
		public RuleCall getVersionVersionStmtParserRuleCall_8_0() { return cVersionVersionStmtParserRuleCall_8_0; }

		//loadProperties+=LoadProperties*
		public Assignment getLoadPropertiesAssignment_9() { return cLoadPropertiesAssignment_9; }

		//LoadProperties
		public RuleCall getLoadPropertiesLoadPropertiesParserRuleCall_9_0() { return cLoadPropertiesLoadPropertiesParserRuleCall_9_0; }

		//contents=ScriptContents
		public Assignment getContentsAssignment_10() { return cContentsAssignment_10; }

		//ScriptContents
		public RuleCall getContentsScriptContentsParserRuleCall_10_0() { return cContentsScriptContentsParserRuleCall_10_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }

		//';'?
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }
	}

	public class ScriptParentDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.ScriptParentDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ScriptParentDecl:
		//	'extends' name=Identifier // here identifier because this references a complete project
		//;
		@Override public ParserRule getRule() { return rule; }

		//'extends' name=Identifier
		public Group getGroup() { return cGroup; }

		//'extends'
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
	}

	public class LoadPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.LoadProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPropertiesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LoadProperties:
		//	'load' 'properties' path=STRING // here string because this references a file
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//'load' 'properties' path=STRING // here string because this references a file
		//';'
		public Group getGroup() { return cGroup; }

		//'load'
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }

		//'properties'
		public Keyword getPropertiesKeyword_1() { return cPropertiesKeyword_1; }

		//path=STRING
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }

		//// here string because this references a file
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ScriptContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.ScriptContents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScriptContentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cElementsVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cElementsCompoundParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cElementsTypeDefParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		private final Assignment cElementsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cElementsRuleDeclarationParserRuleCall_1_3_0 = (RuleCall)cElementsAssignment_1_3.eContents().get(0);
		
		//ScriptContents:
		//	{ScriptContents} (elements+=VariableDeclaration
		//	| elements+=Compound
		//	| elements+=TypeDef
		//	| elements+=RuleDeclaration)*;
		@Override public ParserRule getRule() { return rule; }

		//{ScriptContents} (elements+=VariableDeclaration
		//| elements+=Compound
		//| elements+=TypeDef
		//| elements+=RuleDeclaration)*
		public Group getGroup() { return cGroup; }

		//{ScriptContents}
		public Action getScriptContentsAction_0() { return cScriptContentsAction_0; }

		//(elements+=VariableDeclaration
		//| elements+=Compound
		//| elements+=TypeDef
		//| elements+=RuleDeclaration)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//elements+=VariableDeclaration
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }

		//VariableDeclaration
		public RuleCall getElementsVariableDeclarationParserRuleCall_1_0_0() { return cElementsVariableDeclarationParserRuleCall_1_0_0; }

		//elements+=Compound
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//Compound
		public RuleCall getElementsCompoundParserRuleCall_1_1_0() { return cElementsCompoundParserRuleCall_1_1_0; }

		//elements+=TypeDef
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }

		//TypeDef
		public RuleCall getElementsTypeDefParserRuleCall_1_2_0() { return cElementsTypeDefParserRuleCall_1_2_0; }

		//elements+=RuleDeclaration
		public Assignment getElementsAssignment_1_3() { return cElementsAssignment_1_3; }

		//RuleDeclaration
		public RuleCall getElementsRuleDeclarationParserRuleCall_1_3_0() { return cElementsRuleDeclarationParserRuleCall_1_3_0; }
	}

	public class RuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.RuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cModifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cModifierRuleModifierParserRuleCall_1_0_0 = (RuleCall)cModifierAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cParamListAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cParamListParameterListParserRuleCall_1_4_0 = (RuleCall)cParamListAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cEqualsSignKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsRuleConditionsParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockRuleElementBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ---------------- rules
		//RuleDeclaration:
		//	{RuleDeclaration} (modifier=RuleModifier?
		//	type=Type?
		//	name=Identifier
		//	'(' paramList=ParameterList? ')'
		//	'=')?
		//	conditions=RuleConditions?
		//	block=RuleElementBlock
		//	';'?;
		@Override public ParserRule getRule() { return rule; }

		//{RuleDeclaration} (modifier=RuleModifier?
		//type=Type?
		//name=Identifier
		//'(' paramList=ParameterList? ')'
		//'=')?
		//conditions=RuleConditions?
		//block=RuleElementBlock
		//';'?
		public Group getGroup() { return cGroup; }

		//{RuleDeclaration}
		public Action getRuleDeclarationAction_0() { return cRuleDeclarationAction_0; }

		//(modifier=RuleModifier?
		//type=Type?
		//name=Identifier
		//'(' paramList=ParameterList? ')'
		//'=')?
		public Group getGroup_1() { return cGroup_1; }

		//modifier=RuleModifier?
		public Assignment getModifierAssignment_1_0() { return cModifierAssignment_1_0; }

		//RuleModifier
		public RuleCall getModifierRuleModifierParserRuleCall_1_0_0() { return cModifierRuleModifierParserRuleCall_1_0_0; }

		//type=Type?
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }

		//name=Identifier
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_2_0() { return cNameIdentifierParserRuleCall_1_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }

		//paramList=ParameterList?
		public Assignment getParamListAssignment_1_4() { return cParamListAssignment_1_4; }

		//ParameterList
		public RuleCall getParamListParameterListParserRuleCall_1_4_0() { return cParamListParameterListParserRuleCall_1_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//'='
		public Keyword getEqualsSignKeyword_1_6() { return cEqualsSignKeyword_1_6; }

		//conditions=RuleConditions?
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }

		//RuleConditions
		public RuleCall getConditionsRuleConditionsParserRuleCall_2_0() { return cConditionsRuleConditionsParserRuleCall_2_0; }

		//block=RuleElementBlock
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }

		//RuleElementBlock
		public RuleCall getBlockRuleElementBlockParserRuleCall_3_0() { return cBlockRuleElementBlockParserRuleCall_3_0; }

		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RuleConditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.RuleConditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleConditionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPostconditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPostconditionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cPostconditionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPreconditionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPreconditionsLogicalExpressionParserRuleCall_3_0_0 = (RuleCall)cPreconditionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPreconditionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPreconditionsLogicalExpressionParserRuleCall_3_1_1_0 = (RuleCall)cPreconditionsAssignment_3_1_1.eContents().get(0);
		
		//RuleConditions:
		//	{RuleConditions} postcondition+=LogicalExpression?
		//	':' (preconditions+=LogicalExpression (',' preconditions+=LogicalExpression)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{RuleConditions} postcondition+=LogicalExpression?
		//':' (preconditions+=LogicalExpression (',' preconditions+=LogicalExpression)*)?
		public Group getGroup() { return cGroup; }

		//{RuleConditions}
		public Action getRuleConditionsAction_0() { return cRuleConditionsAction_0; }

		//postcondition+=LogicalExpression?
		public Assignment getPostconditionAssignment_1() { return cPostconditionAssignment_1; }

		//LogicalExpression
		public RuleCall getPostconditionLogicalExpressionParserRuleCall_1_0() { return cPostconditionLogicalExpressionParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(preconditions+=LogicalExpression (',' preconditions+=LogicalExpression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//preconditions+=LogicalExpression
		public Assignment getPreconditionsAssignment_3_0() { return cPreconditionsAssignment_3_0; }

		//LogicalExpression
		public RuleCall getPreconditionsLogicalExpressionParserRuleCall_3_0_0() { return cPreconditionsLogicalExpressionParserRuleCall_3_0_0; }

		//(',' preconditions+=LogicalExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//preconditions+=LogicalExpression
		public Assignment getPreconditionsAssignment_3_1_1() { return cPreconditionsAssignment_3_1_1; }

		//LogicalExpression
		public RuleCall getPreconditionsLogicalExpressionParserRuleCall_3_1_1_0() { return cPreconditionsLogicalExpressionParserRuleCall_3_1_1_0; }
	}

	public class RuleElementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.RuleElementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleElementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsRuleElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RuleElementBlock:
		//	{RuleElementBlock}
		//	'{'
		//	elements+=RuleElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{RuleElementBlock}
		//'{'
		//elements+=RuleElement*
		//'}'
		public Group getGroup() { return cGroup; }

		//{RuleElementBlock}
		public Action getRuleElementBlockAction_0() { return cRuleElementBlockAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=RuleElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//RuleElement
		public RuleCall getElementsRuleElementParserRuleCall_2_0() { return cElementsRuleElementParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.RuleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarDeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarDeclVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVarDeclAssignment_0.eContents().get(0);
		private final Assignment cExprStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprStmtExpressionStatementParserRuleCall_1_0 = (RuleCall)cExprStmtAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cWhileAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cWhileWhileParserRuleCall_2_0_0 = (RuleCall)cWhileAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cForAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cForForParserRuleCall_3_0_0 = (RuleCall)cForAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//RuleElement:
		//	varDecl=VariableDeclaration
		//	| exprStmt=ExpressionStatement
		//	| while=While ';'?
		//	| for=For ';'?;
		@Override public ParserRule getRule() { return rule; }

		//varDecl=VariableDeclaration
		//| exprStmt=ExpressionStatement
		//| while=While ';'?
		//| for=For ';'?
		public Alternatives getAlternatives() { return cAlternatives; }

		//varDecl=VariableDeclaration
		public Assignment getVarDeclAssignment_0() { return cVarDeclAssignment_0; }

		//VariableDeclaration
		public RuleCall getVarDeclVariableDeclarationParserRuleCall_0_0() { return cVarDeclVariableDeclarationParserRuleCall_0_0; }

		//exprStmt=ExpressionStatement
		public Assignment getExprStmtAssignment_1() { return cExprStmtAssignment_1; }

		//ExpressionStatement
		public RuleCall getExprStmtExpressionStatementParserRuleCall_1_0() { return cExprStmtExpressionStatementParserRuleCall_1_0; }

		//while=While ';'?
		public Group getGroup_2() { return cGroup_2; }

		//while=While
		public Assignment getWhileAssignment_2_0() { return cWhileAssignment_2_0; }

		//While
		public RuleCall getWhileWhileParserRuleCall_2_0_0() { return cWhileWhileParserRuleCall_2_0_0; }

		//';'?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//for=For ';'?
		public Group getGroup_3() { return cGroup_3; }

		//for=For
		public Assignment getForAssignment_3_0() { return cForAssignment_3_0; }

		//For
		public RuleCall getForForParserRuleCall_3_0_0() { return cForForParserRuleCall_3_0_0; }

		//';'?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class RuleModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.RuleModifier");
		private final Assignment cProtectedAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cProtectedProtectedKeyword_0 = (Keyword)cProtectedAssignment.eContents().get(0);
		
		//RuleModifier:
		//	protected='protected';
		@Override public ParserRule getRule() { return rule; }

		//protected='protected'
		public Assignment getProtectedAssignment() { return cProtectedAssignment; }

		//'protected'
		public Keyword getProtectedProtectedKeyword_0() { return cProtectedProtectedKeyword_0; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.ExpressionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cVarIdentifierParserRuleCall_0_0_0_0 = (RuleCall)cVarAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final Assignment cFieldAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cFieldIdentifierParserRuleCall_0_0_1_1_0 = (RuleCall)cFieldAssignment_0_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAltAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAltAlternativeParserRuleCall_1_0_0 = (RuleCall)cAltAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//@Override
		//ExpressionStatement:
		//	(var=Identifier ('.' field=Identifier)? '=')?
		//	expr=Expression ';' | alt=Alternative ';'?;
		@Override public ParserRule getRule() { return rule; }

		//(var=Identifier ('.' field=Identifier)? '=')?
		//expr=Expression ';' | alt=Alternative ';'?
		public Alternatives getAlternatives() { return cAlternatives; }

		//(var=Identifier ('.' field=Identifier)? '=')?
		//expr=Expression ';'
		public Group getGroup_0() { return cGroup_0; }

		//(var=Identifier ('.' field=Identifier)? '=')?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//var=Identifier
		public Assignment getVarAssignment_0_0_0() { return cVarAssignment_0_0_0; }

		//Identifier
		public RuleCall getVarIdentifierParserRuleCall_0_0_0_0() { return cVarIdentifierParserRuleCall_0_0_0_0; }

		//('.' field=Identifier)?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//'.'
		public Keyword getFullStopKeyword_0_0_1_0() { return cFullStopKeyword_0_0_1_0; }

		//field=Identifier
		public Assignment getFieldAssignment_0_0_1_1() { return cFieldAssignment_0_0_1_1; }

		//Identifier
		public RuleCall getFieldIdentifierParserRuleCall_0_0_1_1_0() { return cFieldIdentifierParserRuleCall_0_0_1_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_0_2() { return cEqualsSignKeyword_0_0_2; }

		//expr=Expression
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_1_0() { return cExprExpressionParserRuleCall_0_1_0; }

		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//alt=Alternative ';'?
		public Group getGroup_1() { return cGroup_1; }

		//alt=Alternative
		public Assignment getAltAssignment_1_0() { return cAltAssignment_1_0; }

		//Alternative
		public RuleCall getAltAlternativeParserRuleCall_1_0_0() { return cAltAlternativeParserRuleCall_1_0_0; }

		//';'?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOtherExAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0 = (RuleCall)cOtherExAssignment_0.eContents().get(0);
		private final Assignment cUnqExAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnqExUnqualifiedExecutionParserRuleCall_1_0 = (RuleCall)cUnqExAssignment_1.eContents().get(0);
		private final Assignment cSuperExAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSuperExSuperExecutionParserRuleCall_2_0 = (RuleCall)cSuperExAssignment_2.eContents().get(0);
		private final Assignment cSysExAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSysExSystemExecutionParserRuleCall_3_0 = (RuleCall)cSysExAssignment_3.eContents().get(0);
		private final Assignment cMapAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMapMapParserRuleCall_4_0 = (RuleCall)cMapAssignment_4.eContents().get(0);
		private final Assignment cJoinAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cJoinJoinParserRuleCall_5_0 = (RuleCall)cJoinAssignment_5.eContents().get(0);
		private final Assignment cInstantiateAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cInstantiateInstantiateParserRuleCall_6_0 = (RuleCall)cInstantiateAssignment_6.eContents().get(0);
		private final Assignment cNewExAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cNewExConstructorExecutionParserRuleCall_7_0 = (RuleCall)cNewExAssignment_7.eContents().get(0);
		
		//@Override
		//PrimaryExpression:
		//	otherEx=ExpressionOrQualifiedExecution
		//	| unqEx=UnqualifiedExecution
		//	| superEx=SuperExecution
		//	| sysEx=SystemExecution
		//	| map=Map
		//	| join=Join
		//	| instantiate=Instantiate
		//	| newEx=ConstructorExecution;
		@Override public ParserRule getRule() { return rule; }

		//otherEx=ExpressionOrQualifiedExecution
		//| unqEx=UnqualifiedExecution
		//| superEx=SuperExecution
		//| sysEx=SystemExecution
		//| map=Map
		//| join=Join
		//| instantiate=Instantiate
		//| newEx=ConstructorExecution
		public Alternatives getAlternatives() { return cAlternatives; }

		//otherEx=ExpressionOrQualifiedExecution
		public Assignment getOtherExAssignment_0() { return cOtherExAssignment_0; }

		//ExpressionOrQualifiedExecution
		public RuleCall getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0() { return cOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0; }

		//unqEx=UnqualifiedExecution
		public Assignment getUnqExAssignment_1() { return cUnqExAssignment_1; }

		//UnqualifiedExecution
		public RuleCall getUnqExUnqualifiedExecutionParserRuleCall_1_0() { return cUnqExUnqualifiedExecutionParserRuleCall_1_0; }

		//superEx=SuperExecution
		public Assignment getSuperExAssignment_2() { return cSuperExAssignment_2; }

		//SuperExecution
		public RuleCall getSuperExSuperExecutionParserRuleCall_2_0() { return cSuperExSuperExecutionParserRuleCall_2_0; }

		//sysEx=SystemExecution
		public Assignment getSysExAssignment_3() { return cSysExAssignment_3; }

		//SystemExecution
		public RuleCall getSysExSystemExecutionParserRuleCall_3_0() { return cSysExSystemExecutionParserRuleCall_3_0; }

		//map=Map
		public Assignment getMapAssignment_4() { return cMapAssignment_4; }

		//Map
		public RuleCall getMapMapParserRuleCall_4_0() { return cMapMapParserRuleCall_4_0; }

		//join=Join
		public Assignment getJoinAssignment_5() { return cJoinAssignment_5; }

		//Join
		public RuleCall getJoinJoinParserRuleCall_5_0() { return cJoinJoinParserRuleCall_5_0; }

		//instantiate=Instantiate
		public Assignment getInstantiateAssignment_6() { return cInstantiateAssignment_6; }

		//Instantiate
		public RuleCall getInstantiateInstantiateParserRuleCall_6_0() { return cInstantiateInstantiateParserRuleCall_6_0; }

		//newEx=ConstructorExecution
		public Assignment getNewExAssignment_7() { return cNewExAssignment_7; }

		//ConstructorExecution
		public RuleCall getNewExConstructorExecutionParserRuleCall_7_0() { return cNewExConstructorExecutionParserRuleCall_7_0; }
	}

	public class InstantiateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.Instantiate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstantiateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cProjectAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cProjectIdentifierParserRuleCall_1_0_0 = (RuleCall)cProjectAssignment_1_0.eContents().get(0);
		private final Assignment cRuleNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cRuleNameSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cRuleNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamArgumentListParserRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVersionSpecAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVersionSpecVersionSpecParserRuleCall_5_0 = (RuleCall)cVersionSpecAssignment_5.eContents().get(0);
		
		//Instantiate:
		//	'instantiate' (project=Identifier | ruleName=STRING)
		//	'(' param=ArgumentList? ')' versionSpec=VersionSpec?;
		@Override public ParserRule getRule() { return rule; }

		//'instantiate' (project=Identifier | ruleName=STRING)
		//'(' param=ArgumentList? ')' versionSpec=VersionSpec?
		public Group getGroup() { return cGroup; }

		//'instantiate'
		public Keyword getInstantiateKeyword_0() { return cInstantiateKeyword_0; }

		//(project=Identifier | ruleName=STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//project=Identifier
		public Assignment getProjectAssignment_1_0() { return cProjectAssignment_1_0; }

		//Identifier
		public RuleCall getProjectIdentifierParserRuleCall_1_0_0() { return cProjectIdentifierParserRuleCall_1_0_0; }

		//ruleName=STRING
		public Assignment getRuleNameAssignment_1_1() { return cRuleNameAssignment_1_1; }

		//STRING
		public RuleCall getRuleNameSTRINGTerminalRuleCall_1_1_0() { return cRuleNameSTRINGTerminalRuleCall_1_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//param=ArgumentList?
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }

		//ArgumentList
		public RuleCall getParamArgumentListParserRuleCall_3_0() { return cParamArgumentListParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//versionSpec=VersionSpec?
		public Assignment getVersionSpecAssignment_5() { return cVersionSpecAssignment_5; }

		//VersionSpec
		public RuleCall getVersionSpecVersionSpecParserRuleCall_5_0() { return cVersionSpecVersionSpecParserRuleCall_5_0; }
	}

	public class LoopVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.LoopVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIdentifierParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//LoopVariable:
		//	type=Type?
		//	var=Identifier;
		@Override public ParserRule getRule() { return rule; }

		//type=Type?
		//var=Identifier
		public Group getGroup() { return cGroup; }

		//type=Type?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//var=Identifier
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//Identifier
		public RuleCall getVarIdentifierParserRuleCall_1_0() { return cVarIdentifierParserRuleCall_1_0; }
	}

	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarLoopVariableParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVarAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarLoopVariableParserRuleCall_3_1_0 = (RuleCall)cVarAssignment_3_1.eContents().get(0);
		private final Assignment cSeparatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cSeparatorAlternatives_4_0 = (Alternatives)cSeparatorAssignment_4.eContents().get(0);
		private final Keyword cSeparatorEqualsSignKeyword_4_0_0 = (Keyword)cSeparatorAlternatives_4_0.eContents().get(0);
		private final Keyword cSeparatorColonKeyword_4_0_1 = (Keyword)cSeparatorAlternatives_4_0.eContents().get(1);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExpressionParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlockRuleElementBlockParserRuleCall_7_0 = (RuleCall)cBlockAssignment_7.eContents().get(0);
		
		//Map:
		//	'map' '(' var+=LoopVariable (',' var+=LoopVariable)* separator=('=' | ':') expr=Expression ')'
		//	block=RuleElementBlock;
		@Override public ParserRule getRule() { return rule; }

		//'map' '(' var+=LoopVariable (',' var+=LoopVariable)* separator=('=' | ':') expr=Expression ')'
		//block=RuleElementBlock
		public Group getGroup() { return cGroup; }

		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var+=LoopVariable
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//LoopVariable
		public RuleCall getVarLoopVariableParserRuleCall_2_0() { return cVarLoopVariableParserRuleCall_2_0; }

		//(',' var+=LoopVariable)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//var+=LoopVariable
		public Assignment getVarAssignment_3_1() { return cVarAssignment_3_1; }

		//LoopVariable
		public RuleCall getVarLoopVariableParserRuleCall_3_1_0() { return cVarLoopVariableParserRuleCall_3_1_0; }

		//separator=('=' | ':')
		public Assignment getSeparatorAssignment_4() { return cSeparatorAssignment_4; }

		//('=' | ':')
		public Alternatives getSeparatorAlternatives_4_0() { return cSeparatorAlternatives_4_0; }

		//'='
		public Keyword getSeparatorEqualsSignKeyword_4_0_0() { return cSeparatorEqualsSignKeyword_4_0_0; }

		//':'
		public Keyword getSeparatorColonKeyword_4_0_1() { return cSeparatorColonKeyword_4_0_1; }

		//expr=Expression
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_5_0() { return cExprExpressionParserRuleCall_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//block=RuleElementBlock
		public Assignment getBlockAssignment_7() { return cBlockAssignment_7; }

		//RuleElementBlock
		public RuleCall getBlockRuleElementBlockParserRuleCall_7_0() { return cBlockRuleElementBlockParserRuleCall_7_0; }
	}

	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarLoopVariableParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVarAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarLoopVariableParserRuleCall_3_1_0 = (RuleCall)cVarAssignment_3_1.eContents().get(0);
		private final Assignment cSeparatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cSeparatorAlternatives_4_0 = (Alternatives)cSeparatorAssignment_4.eContents().get(0);
		private final Keyword cSeparatorEqualsSignKeyword_4_0_0 = (Keyword)cSeparatorAlternatives_4_0.eContents().get(0);
		private final Keyword cSeparatorColonKeyword_4_0_1 = (Keyword)cSeparatorAlternatives_4_0.eContents().get(1);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExpressionParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlockRuleElementBlockParserRuleCall_7_0 = (RuleCall)cBlockAssignment_7.eContents().get(0);
		
		//For:
		//	'for' '(' var+=LoopVariable (',' var+=LoopVariable)* separator=('=' | ':') expr=Expression ')'
		//	block=RuleElementBlock;
		@Override public ParserRule getRule() { return rule; }

		//'for' '(' var+=LoopVariable (',' var+=LoopVariable)* separator=('=' | ':') expr=Expression ')'
		//block=RuleElementBlock
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var+=LoopVariable
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//LoopVariable
		public RuleCall getVarLoopVariableParserRuleCall_2_0() { return cVarLoopVariableParserRuleCall_2_0; }

		//(',' var+=LoopVariable)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//var+=LoopVariable
		public Assignment getVarAssignment_3_1() { return cVarAssignment_3_1; }

		//LoopVariable
		public RuleCall getVarLoopVariableParserRuleCall_3_1_0() { return cVarLoopVariableParserRuleCall_3_1_0; }

		//separator=('=' | ':')
		public Assignment getSeparatorAssignment_4() { return cSeparatorAssignment_4; }

		//('=' | ':')
		public Alternatives getSeparatorAlternatives_4_0() { return cSeparatorAlternatives_4_0; }

		//'='
		public Keyword getSeparatorEqualsSignKeyword_4_0_0() { return cSeparatorEqualsSignKeyword_4_0_0; }

		//':'
		public Keyword getSeparatorColonKeyword_4_0_1() { return cSeparatorColonKeyword_4_0_1; }

		//expr=Expression
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_5_0() { return cExprExpressionParserRuleCall_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//block=RuleElementBlock
		public Assignment getBlockAssignment_7() { return cBlockAssignment_7; }

		//RuleElementBlock
		public RuleCall getBlockRuleElementBlockParserRuleCall_7_0() { return cBlockRuleElementBlockParserRuleCall_7_0; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockRuleElementBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//While:
		//	'while' '(' expr=Expression ')'
		//	block=RuleElementBlock;
		@Override public ParserRule getRule() { return rule; }

		//'while' '(' expr=Expression ')'
		//block=RuleElementBlock
		public Group getGroup() { return cGroup; }

		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//block=RuleElementBlock
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }

		//RuleElementBlock
		public RuleCall getBlockRuleElementBlockParserRuleCall_4_0() { return cBlockRuleElementBlockParserRuleCall_4_0; }
	}

	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfStatementOrBlockParserRuleCall_4_0 = (RuleCall)cIfAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementOrBlockParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//Alternative:
		//	'if' '(' expr=Expression ')' if=StatementOrBlock (=>'else' else=StatementOrBlock)?;
		@Override public ParserRule getRule() { return rule; }

		//'if' '(' expr=Expression ')' if=StatementOrBlock (=>'else' else=StatementOrBlock)?
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//if=StatementOrBlock
		public Assignment getIfAssignment_4() { return cIfAssignment_4; }

		//StatementOrBlock
		public RuleCall getIfStatementOrBlockParserRuleCall_4_0() { return cIfStatementOrBlockParserRuleCall_4_0; }

		//(=>'else' else=StatementOrBlock)?
		public Group getGroup_5() { return cGroup_5; }

		//=>'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else=StatementOrBlock
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }

		//StatementOrBlock
		public RuleCall getElseStatementOrBlockParserRuleCall_5_1_0() { return cElseStatementOrBlockParserRuleCall_5_1_0; }
	}

	public class StatementOrBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.StatementOrBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExStmtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExStmtExpressionStatementParserRuleCall_0_0 = (RuleCall)cExStmtAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBlockRuleElementBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//StatementOrBlock:
		//	exStmt=ExpressionStatement | block=RuleElementBlock;
		@Override public ParserRule getRule() { return rule; }

		//exStmt=ExpressionStatement | block=RuleElementBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//exStmt=ExpressionStatement
		public Assignment getExStmtAssignment_0() { return cExStmtAssignment_0; }

		//ExpressionStatement
		public RuleCall getExStmtExpressionStatementParserRuleCall_0_0() { return cExStmtExpressionStatementParserRuleCall_0_0; }

		//block=RuleElementBlock
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//RuleElementBlock
		public RuleCall getBlockRuleElementBlockParserRuleCall_1_0() { return cBlockRuleElementBlockParserRuleCall_1_0; }
	}

	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVar1JoinVariableParserRuleCall_2_0 = (RuleCall)cVar1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVar2JoinVariableParserRuleCall_4_0 = (RuleCall)cVar2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cConditionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_6_2_0 = (RuleCall)cConditionAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//Join:
		//	'join' '('
		//	var1=JoinVariable ','
		//	var2=JoinVariable ')' ('with'
		//	'(' condition=Expression ')')?;
		@Override public ParserRule getRule() { return rule; }

		//'join' '('
		//var1=JoinVariable ','
		//var2=JoinVariable ')' ('with'
		//'(' condition=Expression ')')?
		public Group getGroup() { return cGroup; }

		//'join'
		public Keyword getJoinKeyword_0() { return cJoinKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=JoinVariable
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//JoinVariable
		public RuleCall getVar1JoinVariableParserRuleCall_2_0() { return cVar1JoinVariableParserRuleCall_2_0; }

		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//var2=JoinVariable
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }

		//JoinVariable
		public RuleCall getVar2JoinVariableParserRuleCall_4_0() { return cVar2JoinVariableParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//('with'
		//'(' condition=Expression ')')?
		public Group getGroup_6() { return cGroup_6; }

		//'with'
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//condition=Expression
		public Assignment getConditionAssignment_6_2() { return cConditionAssignment_6_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_6_2_0() { return cConditionExpressionParserRuleCall_6_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
	}

	public class JoinVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.JoinVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExclExcludeKeyword_0_0 = (Keyword)cExclAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIdentifierParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		
		//JoinVariable:
		//	excl='exclude'? var=Identifier
		//	':'
		//	expr=Expression;
		@Override public ParserRule getRule() { return rule; }

		//excl='exclude'? var=Identifier
		//':'
		//expr=Expression
		public Group getGroup() { return cGroup; }

		//excl='exclude'?
		public Assignment getExclAssignment_0() { return cExclAssignment_0; }

		//'exclude'
		public Keyword getExclExcludeKeyword_0_0() { return cExclExcludeKeyword_0_0; }

		//var=Identifier
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//Identifier
		public RuleCall getVarIdentifierParserRuleCall_1_0() { return cVarIdentifierParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//expr=Expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }
	}

	public class SystemExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.VilBuildLanguage.SystemExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_1_0 = (RuleCall)cCallAssignment_1.eContents().get(0);
		private final Assignment cCallsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallsSubCallParserRuleCall_2_0 = (RuleCall)cCallsAssignment_2.eContents().get(0);
		
		//SystemExecution:
		//	'execute' call=Call calls+=SubCall*;
		@Override public ParserRule getRule() { return rule; }

		//'execute' call=Call calls+=SubCall*
		public Group getGroup() { return cGroup; }

		//'execute'
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }

		//call=Call
		public Assignment getCallAssignment_1() { return cCallAssignment_1; }

		//Call
		public RuleCall getCallCallParserRuleCall_1_0() { return cCallCallParserRuleCall_1_0; }

		//calls+=SubCall*
		public Assignment getCallsAssignment_2() { return cCallsAssignment_2; }

		//SubCall
		public RuleCall getCallsSubCallParserRuleCall_2_0() { return cCallsSubCallParserRuleCall_2_0; }
	}
	
	
	private final ImplementationUnitElements pImplementationUnit;
	private final RequireElements pRequire;
	private final LanguageUnitElements pLanguageUnit;
	private final ScriptParentDeclElements pScriptParentDecl;
	private final LoadPropertiesElements pLoadProperties;
	private final ScriptContentsElements pScriptContents;
	private final RuleDeclarationElements pRuleDeclaration;
	private final RuleConditionsElements pRuleConditions;
	private final RuleElementBlockElements pRuleElementBlock;
	private final RuleElementElements pRuleElement;
	private final RuleModifierElements pRuleModifier;
	private final ExpressionStatementElements pExpressionStatement;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final InstantiateElements pInstantiate;
	private final LoopVariableElements pLoopVariable;
	private final MapElements pMap;
	private final ForElements pFor;
	private final WhileElements pWhile;
	private final AlternativeElements pAlternative;
	private final StatementOrBlockElements pStatementOrBlock;
	private final JoinElements pJoin;
	private final JoinVariableElements pJoinVariable;
	private final SystemExecutionElements pSystemExecution;
	
	private final Grammar grammar;

	private final ExpressionDslGrammarAccess gaExpressionDsl;

	@Inject
	public VilBuildLanguageGrammarAccess(GrammarProvider grammarProvider,
		ExpressionDslGrammarAccess gaExpressionDsl) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaExpressionDsl = gaExpressionDsl;
		this.pImplementationUnit = new ImplementationUnitElements();
		this.pRequire = new RequireElements();
		this.pLanguageUnit = new LanguageUnitElements();
		this.pScriptParentDecl = new ScriptParentDeclElements();
		this.pLoadProperties = new LoadPropertiesElements();
		this.pScriptContents = new ScriptContentsElements();
		this.pRuleDeclaration = new RuleDeclarationElements();
		this.pRuleConditions = new RuleConditionsElements();
		this.pRuleElementBlock = new RuleElementBlockElements();
		this.pRuleElement = new RuleElementElements();
		this.pRuleModifier = new RuleModifierElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pInstantiate = new InstantiateElements();
		this.pLoopVariable = new LoopVariableElements();
		this.pMap = new MapElements();
		this.pFor = new ForElements();
		this.pWhile = new WhileElements();
		this.pAlternative = new AlternativeElements();
		this.pStatementOrBlock = new StatementOrBlockElements();
		this.pJoin = new JoinElements();
		this.pJoinVariable = new JoinVariableElements();
		this.pSystemExecution = new SystemExecutionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_hildesheim.sse.VilBuildLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ExpressionDslGrammarAccess getExpressionDslGrammarAccess() {
		return gaExpressionDsl;
	}

	
	//ImplementationUnit:
	//	{ImplementationUnit} imports+=Import*
	//	requires+=Require*
	//	scripts+=LanguageUnit*;
	public ImplementationUnitElements getImplementationUnitAccess() {
		return pImplementationUnit;
	}
	
	public ParserRule getImplementationUnitRule() {
		return getImplementationUnitAccess().getRule();
	}

	//Require:
	//	// here fqn because this may reference a specific project (of an external project)
	//	'requireVTL' name=STRING versionSpec=VersionSpec
	//	';';
	public RequireElements getRequireAccess() {
		return pRequire;
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}

	//@Override
	//LanguageUnit:
	//	advices+=Advice*
	//	'vilScript' name=Identifier
	//	'(' param=ParameterList? ')'
	//	parent=ScriptParentDecl?
	//	'{'
	//	version=VersionStmt?
	//	loadProperties+=LoadProperties*
	//	contents=ScriptContents
	//	'}' ';'?;
	public LanguageUnitElements getLanguageUnitAccess() {
		return pLanguageUnit;
	}
	
	public ParserRule getLanguageUnitRule() {
		return getLanguageUnitAccess().getRule();
	}

	//ScriptParentDecl:
	//	'extends' name=Identifier // here identifier because this references a complete project
	//;
	public ScriptParentDeclElements getScriptParentDeclAccess() {
		return pScriptParentDecl;
	}
	
	public ParserRule getScriptParentDeclRule() {
		return getScriptParentDeclAccess().getRule();
	}

	//LoadProperties:
	//	'load' 'properties' path=STRING // here string because this references a file
	//	';';
	public LoadPropertiesElements getLoadPropertiesAccess() {
		return pLoadProperties;
	}
	
	public ParserRule getLoadPropertiesRule() {
		return getLoadPropertiesAccess().getRule();
	}

	//ScriptContents:
	//	{ScriptContents} (elements+=VariableDeclaration
	//	| elements+=Compound
	//	| elements+=TypeDef
	//	| elements+=RuleDeclaration)*;
	public ScriptContentsElements getScriptContentsAccess() {
		return pScriptContents;
	}
	
	public ParserRule getScriptContentsRule() {
		return getScriptContentsAccess().getRule();
	}

	//// ---------------- rules
	//RuleDeclaration:
	//	{RuleDeclaration} (modifier=RuleModifier?
	//	type=Type?
	//	name=Identifier
	//	'(' paramList=ParameterList? ')'
	//	'=')?
	//	conditions=RuleConditions?
	//	block=RuleElementBlock
	//	';'?;
	public RuleDeclarationElements getRuleDeclarationAccess() {
		return pRuleDeclaration;
	}
	
	public ParserRule getRuleDeclarationRule() {
		return getRuleDeclarationAccess().getRule();
	}

	//RuleConditions:
	//	{RuleConditions} postcondition+=LogicalExpression?
	//	':' (preconditions+=LogicalExpression (',' preconditions+=LogicalExpression)*)?;
	public RuleConditionsElements getRuleConditionsAccess() {
		return pRuleConditions;
	}
	
	public ParserRule getRuleConditionsRule() {
		return getRuleConditionsAccess().getRule();
	}

	//RuleElementBlock:
	//	{RuleElementBlock}
	//	'{'
	//	elements+=RuleElement*
	//	'}';
	public RuleElementBlockElements getRuleElementBlockAccess() {
		return pRuleElementBlock;
	}
	
	public ParserRule getRuleElementBlockRule() {
		return getRuleElementBlockAccess().getRule();
	}

	//RuleElement:
	//	varDecl=VariableDeclaration
	//	| exprStmt=ExpressionStatement
	//	| while=While ';'?
	//	| for=For ';'?;
	public RuleElementElements getRuleElementAccess() {
		return pRuleElement;
	}
	
	public ParserRule getRuleElementRule() {
		return getRuleElementAccess().getRule();
	}

	//RuleModifier:
	//	protected='protected';
	public RuleModifierElements getRuleModifierAccess() {
		return pRuleModifier;
	}
	
	public ParserRule getRuleModifierRule() {
		return getRuleModifierAccess().getRule();
	}

	//@Override
	//ExpressionStatement:
	//	(var=Identifier ('.' field=Identifier)? '=')?
	//	expr=Expression ';' | alt=Alternative ';'?;
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//@Override
	//PrimaryExpression:
	//	otherEx=ExpressionOrQualifiedExecution
	//	| unqEx=UnqualifiedExecution
	//	| superEx=SuperExecution
	//	| sysEx=SystemExecution
	//	| map=Map
	//	| join=Join
	//	| instantiate=Instantiate
	//	| newEx=ConstructorExecution;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Instantiate:
	//	'instantiate' (project=Identifier | ruleName=STRING)
	//	'(' param=ArgumentList? ')' versionSpec=VersionSpec?;
	public InstantiateElements getInstantiateAccess() {
		return pInstantiate;
	}
	
	public ParserRule getInstantiateRule() {
		return getInstantiateAccess().getRule();
	}

	//LoopVariable:
	//	type=Type?
	//	var=Identifier;
	public LoopVariableElements getLoopVariableAccess() {
		return pLoopVariable;
	}
	
	public ParserRule getLoopVariableRule() {
		return getLoopVariableAccess().getRule();
	}

	//Map:
	//	'map' '(' var+=LoopVariable (',' var+=LoopVariable)* separator=('=' | ':') expr=Expression ')'
	//	block=RuleElementBlock;
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//For:
	//	'for' '(' var+=LoopVariable (',' var+=LoopVariable)* separator=('=' | ':') expr=Expression ')'
	//	block=RuleElementBlock;
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}

	//While:
	//	'while' '(' expr=Expression ')'
	//	block=RuleElementBlock;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//Alternative:
	//	'if' '(' expr=Expression ')' if=StatementOrBlock (=>'else' else=StatementOrBlock)?;
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//StatementOrBlock:
	//	exStmt=ExpressionStatement | block=RuleElementBlock;
	public StatementOrBlockElements getStatementOrBlockAccess() {
		return pStatementOrBlock;
	}
	
	public ParserRule getStatementOrBlockRule() {
		return getStatementOrBlockAccess().getRule();
	}

	//Join:
	//	'join' '('
	//	var1=JoinVariable ','
	//	var2=JoinVariable ')' ('with'
	//	'(' condition=Expression ')')?;
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}

	//JoinVariable:
	//	excl='exclude'? var=Identifier
	//	':'
	//	expr=Expression;
	public JoinVariableElements getJoinVariableAccess() {
		return pJoinVariable;
	}
	
	public ParserRule getJoinVariableRule() {
		return getJoinVariableAccess().getRule();
	}

	//SystemExecution:
	//	'execute' call=Call calls+=SubCall*;
	public SystemExecutionElements getSystemExecutionAccess() {
		return pSystemExecution;
	}
	
	public ParserRule getSystemExecutionRule() {
		return getSystemExecutionAccess().getRule();
	}

	//VariableDeclaration:
	//	const='const'?
	//	type=Type
	//	name=Identifier ('=' expression=Expression)?
	//	';';
	public ExpressionDslGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaExpressionDsl.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//Compound:
	//	abstract='abstract'? 'compound' name=Identifier ('refines' super=Identifier)? '{'
	//	vars+=VariableDeclaration*
	//	'}' ';'?;
	public ExpressionDslGrammarAccess.CompoundElements getCompoundAccess() {
		return gaExpressionDsl.getCompoundAccess();
	}
	
	public ParserRule getCompoundRule() {
		return getCompoundAccess().getRule();
	}

	//TypeDef:
	//	'typedef'
	//	name=Identifier
	//	type=Type
	//	';';
	public ExpressionDslGrammarAccess.TypeDefElements getTypeDefAccess() {
		return gaExpressionDsl.getTypeDefAccess();
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//// used in extending languages
	//Advice:
	//	'@advice' '(' name=QualifiedName ')'
	//	versionSpec=VersionSpec?;
	public ExpressionDslGrammarAccess.AdviceElements getAdviceAccess() {
		return gaExpressionDsl.getAdviceAccess();
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}

	//VersionSpec:
	//	'with' restriction=Expression;
	public ExpressionDslGrammarAccess.VersionSpecElements getVersionSpecAccess() {
		return gaExpressionDsl.getVersionSpecAccess();
	}
	
	public ParserRule getVersionSpecRule() {
		return getVersionSpecAccess().getRule();
	}

	//ParameterList:
	//	param+=Parameter (',' param+=Parameter)*;
	public ExpressionDslGrammarAccess.ParameterListElements getParameterListAccess() {
		return gaExpressionDsl.getParameterListAccess();
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//	type=Type
	//	name=Identifier ('=' dflt=Expression)?;
	public ExpressionDslGrammarAccess.ParameterElements getParameterAccess() {
		return gaExpressionDsl.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//VersionStmt:
	//	'version'
	//	version=VERSION
	//	';';
	public ExpressionDslGrammarAccess.VersionStmtElements getVersionStmtAccess() {
		return gaExpressionDsl.getVersionStmtAccess();
	}
	
	public ParserRule getVersionStmtRule() {
		return getVersionStmtAccess().getRule();
	}

	//Import:
	//	('import' | insert='insert') name=Identifier wildcard="*"? versionSpec=VersionSpec? ';';
	public ExpressionDslGrammarAccess.ImportElements getImportAccess() {
		return gaExpressionDsl.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Expression:
	//	expr=LogicalExpression | init=ContainerInitializer;
	public ExpressionDslGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressionDsl.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LogicalExpression:
	//	left=EqualityExpression
	//	right+=LogicalExpressionPart*;
	public ExpressionDslGrammarAccess.LogicalExpressionElements getLogicalExpressionAccess() {
		return gaExpressionDsl.getLogicalExpressionAccess();
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//LogicalExpressionPart:
	//	op=LogicalOperator
	//	ex=EqualityExpression;
	public ExpressionDslGrammarAccess.LogicalExpressionPartElements getLogicalExpressionPartAccess() {
		return gaExpressionDsl.getLogicalExpressionPartAccess();
	}
	
	public ParserRule getLogicalExpressionPartRule() {
		return getLogicalExpressionPartAccess().getRule();
	}

	//LogicalOperator:
	//	'and'
	//	| 'or'
	//	| 'xor'
	//	| 'implies'
	//	| 'iff';
	public ExpressionDslGrammarAccess.LogicalOperatorElements getLogicalOperatorAccess() {
		return gaExpressionDsl.getLogicalOperatorAccess();
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}

	//EqualityExpression:
	//	left=RelationalExpression
	//	right=EqualityExpressionPart?;
	public ExpressionDslGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaExpressionDsl.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//EqualityExpressionPart:
	//	op=EqualityOperator
	//	ex=RelationalExpression;
	public ExpressionDslGrammarAccess.EqualityExpressionPartElements getEqualityExpressionPartAccess() {
		return gaExpressionDsl.getEqualityExpressionPartAccess();
	}
	
	public ParserRule getEqualityExpressionPartRule() {
		return getEqualityExpressionPartAccess().getRule();
	}

	//EqualityOperator:
	//	'=='
	//	| '<>'
	//	| '!=';
	public ExpressionDslGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaExpressionDsl.getEqualityOperatorAccess();
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression:
	//	left=AdditiveExpression (right=RelationalExpressionPart right2=RelationalExpressionPart?)?;
	public ExpressionDslGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaExpressionDsl.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//RelationalExpressionPart:
	//	op=RelationalOperator
	//	ex=AdditiveExpression;
	public ExpressionDslGrammarAccess.RelationalExpressionPartElements getRelationalExpressionPartAccess() {
		return gaExpressionDsl.getRelationalExpressionPartAccess();
	}
	
	public ParserRule getRelationalExpressionPartRule() {
		return getRelationalExpressionPartAccess().getRule();
	}

	//RelationalOperator:
	//	'>'
	//	| '<'
	//	| '>='
	//	| '<=';
	public ExpressionDslGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaExpressionDsl.getRelationalOperatorAccess();
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression:
	//	left=MultiplicativeExpression
	//	right+=AdditiveExpressionPart*;
	public ExpressionDslGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaExpressionDsl.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AdditiveExpressionPart:
	//	op=AdditiveOperator
	//	ex=MultiplicativeExpression;
	public ExpressionDslGrammarAccess.AdditiveExpressionPartElements getAdditiveExpressionPartAccess() {
		return gaExpressionDsl.getAdditiveExpressionPartAccess();
	}
	
	public ParserRule getAdditiveExpressionPartRule() {
		return getAdditiveExpressionPartAccess().getRule();
	}

	//AdditiveOperator:
	//	'+'
	//	| '-';
	public ExpressionDslGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaExpressionDsl.getAdditiveOperatorAccess();
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression:
	//	left=UnaryExpression
	//	right=MultiplicativeExpressionPart?;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaExpressionDsl.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MultiplicativeExpressionPart:
	//	op=MultiplicativeOperator
	//	expr=UnaryExpression;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionPartElements getMultiplicativeExpressionPartAccess() {
		return gaExpressionDsl.getMultiplicativeExpressionPartAccess();
	}
	
	public ParserRule getMultiplicativeExpressionPartRule() {
		return getMultiplicativeExpressionPartAccess().getRule();
	}

	//MultiplicativeOperator:
	//	'*'
	//	| '/';
	public ExpressionDslGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaExpressionDsl.getMultiplicativeOperatorAccess();
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//UnaryExpression:
	//	op=UnaryOperator?
	//	expr=PostfixExpression;
	public ExpressionDslGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaExpressionDsl.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//UnaryOperator:
	//	'not'
	//	| '!'
	//	| '-';
	public ExpressionDslGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaExpressionDsl.getUnaryOperatorAccess();
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//PostfixExpression:
	//	left=super::PrimaryExpression // left here for extensions
	//;
	public ExpressionDslGrammarAccess.PostfixExpressionElements getPostfixExpressionAccess() {
		return gaExpressionDsl.getPostfixExpressionAccess();
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}

	//ExpressionOrQualifiedExecution:
	//	(val=Constant
	//	| '(' parenthesis=Expression ')') calls+=SubCall*;
	public ExpressionDslGrammarAccess.ExpressionOrQualifiedExecutionElements getExpressionOrQualifiedExecutionAccess() {
		return gaExpressionDsl.getExpressionOrQualifiedExecutionAccess();
	}
	
	public ParserRule getExpressionOrQualifiedExecutionRule() {
		return getExpressionOrQualifiedExecutionAccess().getRule();
	}

	//UnqualifiedExecution:
	//	call=Call calls+=SubCall*;
	public ExpressionDslGrammarAccess.UnqualifiedExecutionElements getUnqualifiedExecutionAccess() {
		return gaExpressionDsl.getUnqualifiedExecutionAccess();
	}
	
	public ParserRule getUnqualifiedExecutionRule() {
		return getUnqualifiedExecutionAccess().getRule();
	}

	//SuperExecution:
	//	'super' '.' call=Call calls+=SubCall*;
	public ExpressionDslGrammarAccess.SuperExecutionElements getSuperExecutionAccess() {
		return gaExpressionDsl.getSuperExecutionAccess();
	}
	
	public ParserRule getSuperExecutionRule() {
		return getSuperExecutionAccess().getRule();
	}

	//ConstructorExecution:
	//	'new' type=Type '(' param=ArgumentList? ')' calls+=SubCall*;
	public ExpressionDslGrammarAccess.ConstructorExecutionElements getConstructorExecutionAccess() {
		return gaExpressionDsl.getConstructorExecutionAccess();
	}
	
	public ParserRule getConstructorExecutionRule() {
		return getConstructorExecutionAccess().getRule();
	}

	//SubCall:
	//	type=('.' | '->') call=Call
	//	| '[' arrayEx=Expression ']' // IVML addition to OCL
	//;
	public ExpressionDslGrammarAccess.SubCallElements getSubCallAccess() {
		return gaExpressionDsl.getSubCallAccess();
	}
	
	public ParserRule getSubCallRule() {
		return getSubCallAccess().getRule();
	}

	//Declarator:
	//	decl+=Declaration (';' decl+=Declaration)* '|';
	public ExpressionDslGrammarAccess.DeclaratorElements getDeclaratorAccess() {
		return gaExpressionDsl.getDeclaratorAccess();
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}

	//Declaration:
	//	type=Type? units+=DeclarationUnit (',' units+=DeclarationUnit)*;
	public ExpressionDslGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaExpressionDsl.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//DeclarationUnit:
	//	id=Identifier ('=' deflt=Expression)?;
	public ExpressionDslGrammarAccess.DeclarationUnitElements getDeclarationUnitAccess() {
		return gaExpressionDsl.getDeclarationUnitAccess();
	}
	
	public ParserRule getDeclarationUnitRule() {
		return getDeclarationUnitAccess().getRule();
	}

	//Call:
	//	name=QualifiedPrefix
	//	'('
	//	decl=Declarator?
	//	param=ArgumentList?
	//	')';
	public ExpressionDslGrammarAccess.CallElements getCallAccess() {
		return gaExpressionDsl.getCallAccess();
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//ArgumentList:
	//	param+=NamedArgument (','
	//	param+=NamedArgument)*;
	public ExpressionDslGrammarAccess.ArgumentListElements getArgumentListAccess() {
		return gaExpressionDsl.getArgumentListAccess();
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}

	//NamedArgument:
	//	(name=Identifier '=')?
	//	ex=Expression;
	public ExpressionDslGrammarAccess.NamedArgumentElements getNamedArgumentAccess() {
		return gaExpressionDsl.getNamedArgumentAccess();
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}

	//QualifiedPrefix:
	//	qname+=Identifier (qname+='::' qname+=Identifier)*;
	public ExpressionDslGrammarAccess.QualifiedPrefixElements getQualifiedPrefixAccess() {
		return gaExpressionDsl.getQualifiedPrefixAccess();
	}
	
	public ParserRule getQualifiedPrefixRule() {
		return getQualifiedPrefixAccess().getRule();
	}

	//QualifiedName:
	//	prefix=QualifiedPrefix (qname+='.' qname+=Identifier)*;
	public ExpressionDslGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaExpressionDsl.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Constant:
	//	nValue=NumValue
	//	| sValue=STRING
	//	| qValue=QualifiedName
	//	| bValue=('true' | 'false') | null='null'
	//	| =>version=VERSION;
	public ExpressionDslGrammarAccess.ConstantElements getConstantAccess() {
		return gaExpressionDsl.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//NumValue:
	//	val=NUMBER;
	public ExpressionDslGrammarAccess.NumValueElements getNumValueAccess() {
		return gaExpressionDsl.getNumValueAccess();
	}
	
	public ParserRule getNumValueRule() {
		return getNumValueAccess().getRule();
	}

	//Identifier:
	//	ID | VERSION | EXPONENT | "version";
	public ExpressionDslGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaExpressionDsl.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//Type:
	//	name=QualifiedPrefix // specific types will be dynamically loaded at start-up
	//	| set='setOf' param=TypeParameters | seq='sequenceOf' param=TypeParameters | map='mapOf' param=TypeParameters |
	//	call='callOf' return=Type? param=TypeParameters;
	public ExpressionDslGrammarAccess.TypeElements getTypeAccess() {
		return gaExpressionDsl.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//TypeParameters:
	//	'(' param+=Type (',' param+=Type)* ')';
	public ExpressionDslGrammarAccess.TypeParametersElements getTypeParametersAccess() {
		return gaExpressionDsl.getTypeParametersAccess();
	}
	
	public ParserRule getTypeParametersRule() {
		return getTypeParametersAccess().getRule();
	}

	//ContainerInitializer:
	//	{ContainerInitializer}
	//	'{' (exprs+=ContainerInitializerExpression (',' exprs+=ContainerInitializerExpression)*)? '}';
	public ExpressionDslGrammarAccess.ContainerInitializerElements getContainerInitializerAccess() {
		return gaExpressionDsl.getContainerInitializerAccess();
	}
	
	public ParserRule getContainerInitializerRule() {
		return getContainerInitializerAccess().getRule();
	}

	//ContainerInitializerExpression:
	//	logical=LogicalExpression
	//	| container=ContainerInitializer;
	public ExpressionDslGrammarAccess.ContainerInitializerExpressionElements getContainerInitializerExpressionAccess() {
		return gaExpressionDsl.getContainerInitializerExpressionAccess();
	}
	
	public ParserRule getContainerInitializerExpressionRule() {
		return getContainerInitializerExpressionAccess().getRule();
	}

	//terminal VERSION:
	//	'v' '0'..'9'+ ('.' '0'..'9'+)*;
	public TerminalRule getVERSIONRule() {
		return gaExpressionDsl.getVERSIONRule();
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaExpressionDsl.getIDRule();
	} 

	//terminal NUMBER:
	//	'-'? ('0'..'9'+ ('.' '0'..'9'* EXPONENT?)?
	//	| '.' '0'..'9'+ EXPONENT?
	//	| '0'..'9'+ EXPONENT);
	public TerminalRule getNUMBERRule() {
		return gaExpressionDsl.getNUMBERRule();
	} 

	//terminal EXPONENT:
	//	('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getEXPONENTRule() {
		return gaExpressionDsl.getEXPONENTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaExpressionDsl.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaExpressionDsl.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaExpressionDsl.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaExpressionDsl.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaExpressionDsl.getANY_OTHERRule();
	} 
}
