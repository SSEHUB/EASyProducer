/*
 * generated by Xtext 2.35.0
 */
package de.uni_hildesheim.sse.vil.templatelang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.uni_hildesheim.sse.vil.expressions.services.ExpressionDslGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TemplateLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LanguageUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.LanguageUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cJavaExtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJavaExtsExtensionParserRuleCall_1_0 = (RuleCall)cJavaExtsAssignment_1.eContents().get(0);
		private final Assignment cAdvicesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdvicesAdviceParserRuleCall_2_0 = (RuleCall)cAdvicesAssignment_2.eContents().get(0);
		private final Assignment cIndentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndentIndentationHintParserRuleCall_3_0 = (RuleCall)cIndentAssignment_3.eContents().get(0);
		private final Assignment cFormattingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFormattingFormattingHintParserRuleCall_4_0 = (RuleCall)cFormattingAssignment_4.eContents().get(0);
		private final Keyword cTemplateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIdentifierParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cParamAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cParamParameterListParserRuleCall_8_0 = (RuleCall)cParamAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cExtendsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cExtAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cExtIdentifierParserRuleCall_10_1_0 = (RuleCall)cExtAssignment_10_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cVersionAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cVersionVersionStmtParserRuleCall_12_0 = (RuleCall)cVersionAssignment_12.eContents().get(0);
		private final Alternatives cAlternatives_13 = (Alternatives)cGroup.eContents().get(13);
		private final Assignment cElementsAssignment_13_0 = (Assignment)cAlternatives_13.eContents().get(0);
		private final RuleCall cElementsTypeDefParserRuleCall_13_0_0 = (RuleCall)cElementsAssignment_13_0.eContents().get(0);
		private final Assignment cElementsAssignment_13_1 = (Assignment)cAlternatives_13.eContents().get(1);
		private final RuleCall cElementsCompoundParserRuleCall_13_1_0 = (RuleCall)cElementsAssignment_13_1.eContents().get(0);
		private final Assignment cElementsAssignment_13_2 = (Assignment)cAlternatives_13.eContents().get(2);
		private final RuleCall cElementsVariableDeclarationParserRuleCall_13_2_0 = (RuleCall)cElementsAssignment_13_2.eContents().get(0);
		private final Assignment cElementsAssignment_13_3 = (Assignment)cAlternatives_13.eContents().get(3);
		private final RuleCall cElementsVilDefParserRuleCall_13_3_0 = (RuleCall)cElementsAssignment_13_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//@Override
		//LanguageUnit: // do not rename - required for reuse
		//    imports+=Import*
		//    javaExts+=Extension*
		//    (advices+=Advice)*
		//    (indent=IndentationHint)?
		//    (formatting=FormattingHint)?
		//    'template' name=Identifier
		//    '(' param=ParameterList? ')'
		//    ('extends' ext=Identifier)?
		//    '{'
		//        version=VersionStmt?
		//        (elements+=TypeDef
		//         | elements+=Compound
		//         | elements+=VariableDeclaration
		//         | elements+=VilDef)*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//// do not rename - required for reuse
		//   imports+=Import*
		//   javaExts+=Extension*
		//   (advices+=Advice)*
		//   (indent=IndentationHint)?
		//   (formatting=FormattingHint)?
		//   'template' name=Identifier
		//   '(' param=ParameterList? ')'
		//   ('extends' ext=Identifier)?
		//   '{'
		//       version=VersionStmt?
		//       (elements+=TypeDef
		//        | elements+=Compound
		//        | elements+=VariableDeclaration
		//        | elements+=VilDef)*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//// do not rename - required for reuse
		//   imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//javaExts+=Extension*
		public Assignment getJavaExtsAssignment_1() { return cJavaExtsAssignment_1; }
		
		//Extension
		public RuleCall getJavaExtsExtensionParserRuleCall_1_0() { return cJavaExtsExtensionParserRuleCall_1_0; }
		
		//(advices+=Advice)*
		public Assignment getAdvicesAssignment_2() { return cAdvicesAssignment_2; }
		
		//Advice
		public RuleCall getAdvicesAdviceParserRuleCall_2_0() { return cAdvicesAdviceParserRuleCall_2_0; }
		
		//(indent=IndentationHint)?
		public Assignment getIndentAssignment_3() { return cIndentAssignment_3; }
		
		//IndentationHint
		public RuleCall getIndentIndentationHintParserRuleCall_3_0() { return cIndentIndentationHintParserRuleCall_3_0; }
		
		//(formatting=FormattingHint)?
		public Assignment getFormattingAssignment_4() { return cFormattingAssignment_4; }
		
		//FormattingHint
		public RuleCall getFormattingFormattingHintParserRuleCall_4_0() { return cFormattingFormattingHintParserRuleCall_4_0; }
		
		//'template'
		public Keyword getTemplateKeyword_5() { return cTemplateKeyword_5; }
		
		//name=Identifier
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_6_0() { return cNameIdentifierParserRuleCall_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//param=ParameterList?
		public Assignment getParamAssignment_8() { return cParamAssignment_8; }
		
		//ParameterList
		public RuleCall getParamParameterListParserRuleCall_8_0() { return cParamParameterListParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//('extends' ext=Identifier)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'extends'
		public Keyword getExtendsKeyword_10_0() { return cExtendsKeyword_10_0; }
		
		//ext=Identifier
		public Assignment getExtAssignment_10_1() { return cExtAssignment_10_1; }
		
		//Identifier
		public RuleCall getExtIdentifierParserRuleCall_10_1_0() { return cExtIdentifierParserRuleCall_10_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//version=VersionStmt?
		public Assignment getVersionAssignment_12() { return cVersionAssignment_12; }
		
		//VersionStmt
		public RuleCall getVersionVersionStmtParserRuleCall_12_0() { return cVersionVersionStmtParserRuleCall_12_0; }
		
		//(elements+=TypeDef
		// | elements+=Compound
		// | elements+=VariableDeclaration
		// | elements+=VilDef)*
		public Alternatives getAlternatives_13() { return cAlternatives_13; }
		
		//elements+=TypeDef
		public Assignment getElementsAssignment_13_0() { return cElementsAssignment_13_0; }
		
		//TypeDef
		public RuleCall getElementsTypeDefParserRuleCall_13_0_0() { return cElementsTypeDefParserRuleCall_13_0_0; }
		
		//elements+=Compound
		public Assignment getElementsAssignment_13_1() { return cElementsAssignment_13_1; }
		
		//Compound
		public RuleCall getElementsCompoundParserRuleCall_13_1_0() { return cElementsCompoundParserRuleCall_13_1_0; }
		
		//elements+=VariableDeclaration
		public Assignment getElementsAssignment_13_2() { return cElementsAssignment_13_2; }
		
		//VariableDeclaration
		public RuleCall getElementsVariableDeclarationParserRuleCall_13_2_0() { return cElementsVariableDeclarationParserRuleCall_13_2_0; }
		
		//elements+=VilDef
		public Assignment getElementsAssignment_13_3() { return cElementsAssignment_13_3; }
		
		//VilDef
		public RuleCall getElementsVilDefParserRuleCall_13_3_0() { return cElementsVilDefParserRuleCall_13_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class TopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.Top");
		private final Assignment cExAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExHintedExpressionParserRuleCall_0 = (RuleCall)cExAssignment.eContents().get(0);
		
		//// fake rule, needed that HintedExpression is generated
		//Top:
		//    ex=HintedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ex=HintedExpression
		public Assignment getExAssignment() { return cExAssignment; }
		
		//HintedExpression
		public RuleCall getExHintedExpressionParserRuleCall_0() { return cExHintedExpressionParserRuleCall_0; }
	}
	public class HintedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.HintedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExExpressionParserRuleCall_0_0 = (RuleCall)cExAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cHintAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cHintAlternatives_1_1_0 = (Alternatives)cHintAssignment_1_1.eContents().get(0);
		private final RuleCall cHintIDTerminalRuleCall_1_1_0_0 = (RuleCall)cHintAlternatives_1_1_0.eContents().get(0);
		private final Keyword cHintLessThanSignKeyword_1_1_0_1 = (Keyword)cHintAlternatives_1_1_0.eContents().get(1);
		
		//// Alternative entry, expressions with hint
		//HintedExpression:
		//    ex=Expression ('|' hint=(ID|'<'))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ex=Expression ('|' hint=(ID|'<'))?
		public Group getGroup() { return cGroup; }
		
		//ex=Expression
		public Assignment getExAssignment_0() { return cExAssignment_0; }
		
		//Expression
		public RuleCall getExExpressionParserRuleCall_0_0() { return cExExpressionParserRuleCall_0_0; }
		
		//('|' hint=(ID|'<'))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//hint=(ID|'<')
		public Assignment getHintAssignment_1_1() { return cHintAssignment_1_1; }
		
		//(ID|'<')
		public Alternatives getHintAlternatives_1_1_0() { return cHintAlternatives_1_1_0; }
		
		//ID
		public RuleCall getHintIDTerminalRuleCall_1_1_0_0() { return cHintIDTerminalRuleCall_1_1_0_0; }
		
		//'<'
		public Keyword getHintLessThanSignKeyword_1_1_0_1() { return cHintLessThanSignKeyword_1_1_0_1; }
	}
	public class IndentationHintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.IndentationHint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartsIndentationHintPartParserRuleCall_2_0 = (RuleCall)cPartsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPartsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPartsIndentationHintPartParserRuleCall_3_1_0 = (RuleCall)cPartsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IndentationHint:
		//    '@indent' '(' parts+=IndentationHintPart (',' parts+=IndentationHintPart)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@indent' '(' parts+=IndentationHintPart (',' parts+=IndentationHintPart)* ')'
		public Group getGroup() { return cGroup; }
		
		//'@indent'
		public Keyword getIndentKeyword_0() { return cIndentKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parts+=IndentationHintPart
		public Assignment getPartsAssignment_2() { return cPartsAssignment_2; }
		
		//IndentationHintPart
		public RuleCall getPartsIndentationHintPartParserRuleCall_2_0() { return cPartsIndentationHintPartParserRuleCall_2_0; }
		
		//(',' parts+=IndentationHintPart)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parts+=IndentationHintPart
		public Assignment getPartsAssignment_3_1() { return cPartsAssignment_3_1; }
		
		//IndentationHintPart
		public RuleCall getPartsIndentationHintPartParserRuleCall_3_1_0() { return cPartsIndentationHintPartParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IndentationHintPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.IndentationHintPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNUMBERTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//IndentationHintPart:
		//    name=Identifier '=' value=NUMBER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Identifier '=' value=NUMBER
		public Group getGroup() { return cGroup; }
		
		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=NUMBER
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_2_0() { return cValueNUMBERTerminalRuleCall_2_0; }
	}
	public class FormattingHintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.FormattingHint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartsFormattingHintPartParserRuleCall_2_0 = (RuleCall)cPartsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPartsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPartsFormattingHintPartParserRuleCall_3_1_0 = (RuleCall)cPartsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FormattingHint:
		//    '@format' '(' parts+=FormattingHintPart (',' parts+=FormattingHintPart)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@format' '(' parts+=FormattingHintPart (',' parts+=FormattingHintPart)* ')'
		public Group getGroup() { return cGroup; }
		
		//'@format'
		public Keyword getFormatKeyword_0() { return cFormatKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parts+=FormattingHintPart
		public Assignment getPartsAssignment_2() { return cPartsAssignment_2; }
		
		//FormattingHintPart
		public RuleCall getPartsFormattingHintPartParserRuleCall_2_0() { return cPartsFormattingHintPartParserRuleCall_2_0; }
		
		//(',' parts+=FormattingHintPart)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parts+=FormattingHintPart
		public Assignment getPartsAssignment_3_1() { return cPartsAssignment_3_1; }
		
		//FormattingHintPart
		public RuleCall getPartsFormattingHintPartParserRuleCall_3_1_0() { return cPartsFormattingHintPartParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FormattingHintPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.FormattingHintPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cNumValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNumValueNUMBERTerminalRuleCall_2_1_0 = (RuleCall)cNumValueAssignment_2_1.eContents().get(0);
		
		//FormattingHintPart:
		//    name=Identifier '=' (value=STRING | numValue=NUMBER)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Identifier '=' (value=STRING | numValue=NUMBER)
		public Group getGroup() { return cGroup; }
		
		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(value=STRING | numValue=NUMBER)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//value=STRING
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0_0() { return cValueSTRINGTerminalRuleCall_2_0_0; }
		
		//numValue=NUMBER
		public Assignment getNumValueAssignment_2_1() { return cNumValueAssignment_2_1; }
		
		//NUMBER
		public RuleCall getNumValueNUMBERTerminalRuleCall_2_1_0() { return cNumValueNUMBERTerminalRuleCall_2_1_0; }
	}
	public class VilDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.VilDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationDeclarationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cProtectedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cProtectedProtectedKeyword_1_0 = (Keyword)cProtectedAssignment_1.eContents().get(0);
		private final Keyword cDefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIdentifierParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParamAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamParameterListParserRuleCall_6_0 = (RuleCall)cParamAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStmtsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStmtsStmtBlockParserRuleCall_8_0 = (RuleCall)cStmtsAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//VilDef:
		//  (annotations=AnnotationDeclarations)?
		//  (protected='protected')?
		//  'def' (type=Type)? id=Identifier '(' param=ParameterList? ')' stmts=StmtBlock ';'?
		//  ;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations=AnnotationDeclarations)?
		//(protected='protected')?
		//'def' (type=Type)? id=Identifier '(' param=ParameterList? ')' stmts=StmtBlock ';'?
		public Group getGroup() { return cGroup; }
		
		//(annotations=AnnotationDeclarations)?
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AnnotationDeclarations
		public RuleCall getAnnotationsAnnotationDeclarationsParserRuleCall_0_0() { return cAnnotationsAnnotationDeclarationsParserRuleCall_0_0; }
		
		//(protected='protected')?
		public Assignment getProtectedAssignment_1() { return cProtectedAssignment_1; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_1_0() { return cProtectedProtectedKeyword_1_0; }
		
		//'def'
		public Keyword getDefKeyword_2() { return cDefKeyword_2; }
		
		//(type=Type)?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_4_0() { return cIdIdentifierParserRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//param=ParameterList?
		public Assignment getParamAssignment_6() { return cParamAssignment_6; }
		
		//ParameterList
		public RuleCall getParamParameterListParserRuleCall_6_0() { return cParamParameterListParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//stmts=StmtBlock
		public Assignment getStmtsAssignment_8() { return cStmtsAssignment_8; }
		
		//StmtBlock
		public RuleCall getStmtsStmtBlockParserRuleCall_8_0() { return cStmtsStmtBlockParserRuleCall_8_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class StmtBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.StmtBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStmtBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtsStmtParserRuleCall_2_0 = (RuleCall)cStmtsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StmtBlock:
		//    {StmtBlock}
		//    '{'
		//        stmts+=Stmt*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{StmtBlock}
		//'{'
		//    stmts+=Stmt*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{StmtBlock}
		public Action getStmtBlockAction_0() { return cStmtBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//stmts+=Stmt*
		public Assignment getStmtsAssignment_2() { return cStmtsAssignment_2; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_0() { return cStmtsStmtParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cAltAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAltAlternativeParserRuleCall_1_0 = (RuleCall)cAltAssignment_1.eContents().get(0);
		private final Assignment cSwitchAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSwitchSwitchParserRuleCall_2_0 = (RuleCall)cSwitchAssignment_2.eContents().get(0);
		private final Assignment cMultiAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cMultiMultiselectParserRuleCall_3_0 = (RuleCall)cMultiAssignment_3.eContents().get(0);
		private final Assignment cLoopAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cLoopLoopParserRuleCall_4_0 = (RuleCall)cLoopAssignment_4.eContents().get(0);
		private final Assignment cWhileAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cWhileWhileParserRuleCall_5_0 = (RuleCall)cWhileAssignment_5.eContents().get(0);
		private final Assignment cExprStmtAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cExprStmtExpressionStatementParserRuleCall_6_0 = (RuleCall)cExprStmtAssignment_6.eContents().get(0);
		private final Assignment cCtnAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cCtnContentParserRuleCall_7_0 = (RuleCall)cCtnAssignment_7.eContents().get(0);
		private final Assignment cFlushAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cFlushFlushParserRuleCall_8_0 = (RuleCall)cFlushAssignment_8.eContents().get(0);
		
		//Stmt:
		//  var=VariableDeclaration
		//  | alt=Alternative
		//  | switch=Switch
		//  | multi=multiselect
		//  | loop=Loop
		//  | while=While
		//  | exprStmt=ExpressionStatement
		//  | ctn=Content
		//  | flush=Flush
		//  ;
		@Override public ParserRule getRule() { return rule; }
		
		//var=VariableDeclaration
		//| alt=Alternative
		//| switch=Switch
		//| multi=multiselect
		//| loop=Loop
		//| while=While
		//| exprStmt=ExpressionStatement
		//| ctn=Content
		//| flush=Flush
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=VariableDeclaration
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VariableDeclaration
		public RuleCall getVarVariableDeclarationParserRuleCall_0_0() { return cVarVariableDeclarationParserRuleCall_0_0; }
		
		//alt=Alternative
		public Assignment getAltAssignment_1() { return cAltAssignment_1; }
		
		//Alternative
		public RuleCall getAltAlternativeParserRuleCall_1_0() { return cAltAlternativeParserRuleCall_1_0; }
		
		//switch=Switch
		public Assignment getSwitchAssignment_2() { return cSwitchAssignment_2; }
		
		//Switch
		public RuleCall getSwitchSwitchParserRuleCall_2_0() { return cSwitchSwitchParserRuleCall_2_0; }
		
		//multi=multiselect
		public Assignment getMultiAssignment_3() { return cMultiAssignment_3; }
		
		//multiselect
		public RuleCall getMultiMultiselectParserRuleCall_3_0() { return cMultiMultiselectParserRuleCall_3_0; }
		
		//loop=Loop
		public Assignment getLoopAssignment_4() { return cLoopAssignment_4; }
		
		//Loop
		public RuleCall getLoopLoopParserRuleCall_4_0() { return cLoopLoopParserRuleCall_4_0; }
		
		//while=While
		public Assignment getWhileAssignment_5() { return cWhileAssignment_5; }
		
		//While
		public RuleCall getWhileWhileParserRuleCall_5_0() { return cWhileWhileParserRuleCall_5_0; }
		
		//exprStmt=ExpressionStatement
		public Assignment getExprStmtAssignment_6() { return cExprStmtAssignment_6; }
		
		//ExpressionStatement
		public RuleCall getExprStmtExpressionStatementParserRuleCall_6_0() { return cExprStmtExpressionStatementParserRuleCall_6_0; }
		
		//ctn=Content
		public Assignment getCtnAssignment_7() { return cCtnAssignment_7; }
		
		//Content
		public RuleCall getCtnContentParserRuleCall_7_0() { return cCtnContentParserRuleCall_7_0; }
		
		//flush=Flush
		public Assignment getFlushAssignment_8() { return cFlushAssignment_8; }
		
		//Flush
		public RuleCall getFlushFlushParserRuleCall_8_0() { return cFlushFlushParserRuleCall_8_0; }
	}
	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cIfAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cIfStmtParserRuleCall_4_0_0 = (RuleCall)cIfAssignment_4_0.eContents().get(0);
		private final Assignment cIfBlockAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cIfBlockStmtBlockParserRuleCall_4_1_0 = (RuleCall)cIfBlockAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cElseAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cElseStmtParserRuleCall_5_1_0_0 = (RuleCall)cElseAssignment_5_1_0.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cElseBlockStmtBlockParserRuleCall_5_1_1_0 = (RuleCall)cElseBlockAssignment_5_1_1.eContents().get(0);
		
		//Alternative:
		//    'if' '(' expr=Expression ')' (if=Stmt | ifBlock=StmtBlock) (=> 'else' (else=Stmt | elseBlock=StmtBlock))?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' expr=Expression ')' (if=Stmt | ifBlock=StmtBlock) (=> 'else' (else=Stmt | elseBlock=StmtBlock))?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//(if=Stmt | ifBlock=StmtBlock)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//if=Stmt
		public Assignment getIfAssignment_4_0() { return cIfAssignment_4_0; }
		
		//Stmt
		public RuleCall getIfStmtParserRuleCall_4_0_0() { return cIfStmtParserRuleCall_4_0_0; }
		
		//ifBlock=StmtBlock
		public Assignment getIfBlockAssignment_4_1() { return cIfBlockAssignment_4_1; }
		
		//StmtBlock
		public RuleCall getIfBlockStmtBlockParserRuleCall_4_1_0() { return cIfBlockStmtBlockParserRuleCall_4_1_0; }
		
		//(=> 'else' (else=Stmt | elseBlock=StmtBlock))?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//(else=Stmt | elseBlock=StmtBlock)
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//else=Stmt
		public Assignment getElseAssignment_5_1_0() { return cElseAssignment_5_1_0; }
		
		//Stmt
		public RuleCall getElseStmtParserRuleCall_5_1_0_0() { return cElseStmtParserRuleCall_5_1_0_0; }
		
		//elseBlock=StmtBlock
		public Assignment getElseBlockAssignment_5_1_1() { return cElseBlockAssignment_5_1_1; }
		
		//StmtBlock
		public RuleCall getElseBlockStmtBlockParserRuleCall_5_1_1_0() { return cElseBlockStmtBlockParserRuleCall_5_1_1_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.Content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCtnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCtnSTRINGTerminalRuleCall_0_0 = (RuleCall)cCtnAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cNoCRAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cNoCRExclamationMarkKeyword_1_0_0_0 = (Keyword)cNoCRAssignment_1_0_0.eContents().get(0);
		private final Assignment cCRAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cCRCRKeyword_1_0_1_0 = (Keyword)cCRAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIndentAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIndentExpressionParserRuleCall_1_1_1_0 = (RuleCall)cIndentAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Content:
		//    ctn=STRING (((noCR='!')? CR='<CR>')? ('|' indent=Expression )? ';')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//ctn=STRING (((noCR='!')? CR='<CR>')? ('|' indent=Expression )? ';')?
		public Group getGroup() { return cGroup; }
		
		//ctn=STRING
		public Assignment getCtnAssignment_0() { return cCtnAssignment_0; }
		
		//STRING
		public RuleCall getCtnSTRINGTerminalRuleCall_0_0() { return cCtnSTRINGTerminalRuleCall_0_0; }
		
		//(((noCR='!')? CR='<CR>')? ('|' indent=Expression )? ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//((noCR='!')? CR='<CR>')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(noCR='!')?
		public Assignment getNoCRAssignment_1_0_0() { return cNoCRAssignment_1_0_0; }
		
		//'!'
		public Keyword getNoCRExclamationMarkKeyword_1_0_0_0() { return cNoCRExclamationMarkKeyword_1_0_0_0; }
		
		//CR='<CR>'
		public Assignment getCRAssignment_1_0_1() { return cCRAssignment_1_0_1; }
		
		//'<CR>'
		public Keyword getCRCRKeyword_1_0_1_0() { return cCRCRKeyword_1_0_1_0; }
		
		//('|' indent=Expression )?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_1_0() { return cVerticalLineKeyword_1_1_0; }
		
		//indent=Expression
		public Assignment getIndentAssignment_1_1_1() { return cIndentAssignment_1_1_1; }
		
		//Expression
		public RuleCall getIndentExpressionParserRuleCall_1_1_1_0() { return cIndentExpressionParserRuleCall_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}
	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cPartsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cPartsSwitchPartParserRuleCall_5_0_0 = (RuleCall)cPartsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cPartsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cPartsSwitchPartParserRuleCall_5_1_1_0 = (RuleCall)cPartsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Keyword cDefaultKeyword_5_2_1 = (Keyword)cGroup_5_2.eContents().get(1);
		private final Keyword cColonKeyword_5_2_2 = (Keyword)cGroup_5_2.eContents().get(2);
		private final Assignment cDfltAssignment_5_2_3 = (Assignment)cGroup_5_2.eContents().get(3);
		private final RuleCall cDfltExpressionParserRuleCall_5_2_3_0 = (RuleCall)cDfltAssignment_5_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Switch:
		//    'switch' '(' expr=Expression ')' '{'
		//      (parts+=SwitchPart (',' parts+=SwitchPart)* (',' 'default' ':' dflt=Expression)?)
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' '(' expr=Expression ')' '{'
		//  (parts+=SwitchPart (',' parts+=SwitchPart)* (',' 'default' ':' dflt=Expression)?)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(parts+=SwitchPart (',' parts+=SwitchPart)* (',' 'default' ':' dflt=Expression)?)
		public Group getGroup_5() { return cGroup_5; }
		
		//parts+=SwitchPart
		public Assignment getPartsAssignment_5_0() { return cPartsAssignment_5_0; }
		
		//SwitchPart
		public RuleCall getPartsSwitchPartParserRuleCall_5_0_0() { return cPartsSwitchPartParserRuleCall_5_0_0; }
		
		//(',' parts+=SwitchPart)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//parts+=SwitchPart
		public Assignment getPartsAssignment_5_1_1() { return cPartsAssignment_5_1_1; }
		
		//SwitchPart
		public RuleCall getPartsSwitchPartParserRuleCall_5_1_1_0() { return cPartsSwitchPartParserRuleCall_5_1_1_0; }
		
		//(',' 'default' ':' dflt=Expression)?
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//'default'
		public Keyword getDefaultKeyword_5_2_1() { return cDefaultKeyword_5_2_1; }
		
		//':'
		public Keyword getColonKeyword_5_2_2() { return cColonKeyword_5_2_2; }
		
		//dflt=Expression
		public Assignment getDfltAssignment_5_2_3() { return cDfltAssignment_5_2_3; }
		
		//Expression
		public RuleCall getDfltExpressionParserRuleCall_5_2_3_0() { return cDfltExpressionParserRuleCall_5_2_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SwitchPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.SwitchPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//SwitchPart:
		//    left=Expression ':' right=Expression
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Expression ':' right=Expression
		public Group getGroup() { return cGroup; }
		
		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIdentifierParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExpressionParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSeparatorAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSeparatorPrimaryExpressionParserRuleCall_6_1_0 = (RuleCall)cSeparatorAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cFinalSeparatorAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cFinalSeparatorPrimaryExpressionParserRuleCall_6_2_1_0 = (RuleCall)cFinalSeparatorAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cStmtAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cStmtStmtParserRuleCall_8_0_0 = (RuleCall)cStmtAssignment_8_0.eContents().get(0);
		private final Assignment cBlockAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cBlockStmtBlockParserRuleCall_8_1_0 = (RuleCall)cBlockAssignment_8_1.eContents().get(0);
		
		//Loop:
		//    'for' '('
		//        type=Type id=Identifier ':' expr=Expression
		//        (',' separator=PrimaryExpression (',' finalSeparator=PrimaryExpression)?)?
		//    ')' (stmt=Stmt | block=StmtBlock)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '('
		//    type=Type id=Identifier ':' expr=Expression
		//    (',' separator=PrimaryExpression (',' finalSeparator=PrimaryExpression)?)?
		//')' (stmt=Stmt | block=StmtBlock)
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_3_0() { return cIdIdentifierParserRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//expr=Expression
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_5_0() { return cExprExpressionParserRuleCall_5_0; }
		
		//(',' separator=PrimaryExpression (',' finalSeparator=PrimaryExpression)?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//separator=PrimaryExpression
		public Assignment getSeparatorAssignment_6_1() { return cSeparatorAssignment_6_1; }
		
		//PrimaryExpression
		public RuleCall getSeparatorPrimaryExpressionParserRuleCall_6_1_0() { return cSeparatorPrimaryExpressionParserRuleCall_6_1_0; }
		
		//(',' finalSeparator=PrimaryExpression)?
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//finalSeparator=PrimaryExpression
		public Assignment getFinalSeparatorAssignment_6_2_1() { return cFinalSeparatorAssignment_6_2_1; }
		
		//PrimaryExpression
		public RuleCall getFinalSeparatorPrimaryExpressionParserRuleCall_6_2_1_0() { return cFinalSeparatorPrimaryExpressionParserRuleCall_6_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//(stmt=Stmt | block=StmtBlock)
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//stmt=Stmt
		public Assignment getStmtAssignment_8_0() { return cStmtAssignment_8_0; }
		
		//Stmt
		public RuleCall getStmtStmtParserRuleCall_8_0_0() { return cStmtStmtParserRuleCall_8_0_0; }
		
		//block=StmtBlock
		public Assignment getBlockAssignment_8_1() { return cBlockAssignment_8_1; }
		
		//StmtBlock
		public RuleCall getBlockStmtBlockParserRuleCall_8_1_0() { return cBlockStmtBlockParserRuleCall_8_1_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStmtAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cStmtStmtParserRuleCall_4_0_0 = (RuleCall)cStmtAssignment_4_0.eContents().get(0);
		private final Assignment cBlockAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cBlockStmtBlockParserRuleCall_4_1_0 = (RuleCall)cBlockAssignment_4_1.eContents().get(0);
		
		//While:
		//    'while' '(' expr=Expression ')'
		//    (stmt=Stmt | block=StmtBlock)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' expr=Expression ')'
		//(stmt=Stmt | block=StmtBlock)
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//(stmt=Stmt | block=StmtBlock)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//stmt=Stmt
		public Assignment getStmtAssignment_4_0() { return cStmtAssignment_4_0; }
		
		//Stmt
		public RuleCall getStmtStmtParserRuleCall_4_0_0() { return cStmtStmtParserRuleCall_4_0_0; }
		
		//block=StmtBlock
		public Assignment getBlockAssignment_4_1() { return cBlockAssignment_4_1; }
		
		//StmtBlock
		public RuleCall getBlockStmtBlockParserRuleCall_4_1_0() { return cBlockStmtBlockParserRuleCall_4_1_0; }
	}
	public class SubCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.SubCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0_0 = (Alternatives)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cTypeFullStopKeyword_0_0_0_0 = (Keyword)cTypeAlternatives_0_0_0.eContents().get(0);
		private final Keyword cTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1 = (Keyword)cTypeAlternatives_0_0_0.eContents().get(1);
		private final Assignment cCallAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_0_1_0 = (RuleCall)cCallAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArrayExAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArrayExExpressionParserRuleCall_1_1_0 = (RuleCall)cArrayExAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSubCallAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFullStopLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cVarTypeAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cVarTypeTypeParserRuleCall_2_2_0_0 = (RuleCall)cVarTypeAssignment_2_2_0.eContents().get(0);
		private final Assignment cIdAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_2_2_1_0 = (RuleCall)cIdAssignment_2_2_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cNestedAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cNestedStmtParserRuleCall_2_4_0 = (RuleCall)cNestedAssignment_2_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		
		//@Override
		//SubCall:
		//    type=('.' | '->') call=Call
		//    | '[' arrayEx=Expression ']' // IVML addition to OCL
		//    | {SubCall} '.(' (varType=Type? id=Identifier '|')? '{' nested+=Stmt* '}' ')' // implicit block with variable from last result
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=('.' | '->') call=Call
		//| '[' arrayEx=Expression ']' // IVML addition to OCL
		//| {SubCall} '.(' (varType=Type? id=Identifier '|')? '{' nested+=Stmt* '}' ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=('.' | '->') call=Call
		public Group getGroup_0() { return cGroup_0; }
		
		//type=('.' | '->')
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//('.' | '->')
		public Alternatives getTypeAlternatives_0_0_0() { return cTypeAlternatives_0_0_0; }
		
		//'.'
		public Keyword getTypeFullStopKeyword_0_0_0_0() { return cTypeFullStopKeyword_0_0_0_0; }
		
		//'->'
		public Keyword getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1() { return cTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1; }
		
		//call=Call
		public Assignment getCallAssignment_0_1() { return cCallAssignment_0_1; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_0_1_0() { return cCallCallParserRuleCall_0_1_0; }
		
		//'[' arrayEx=Expression ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//arrayEx=Expression
		public Assignment getArrayExAssignment_1_1() { return cArrayExAssignment_1_1; }
		
		//Expression
		public RuleCall getArrayExExpressionParserRuleCall_1_1_0() { return cArrayExExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//{SubCall} '.(' (varType=Type? id=Identifier '|')? '{' nested+=Stmt* '}' ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{SubCall}
		public Action getSubCallAction_2_0() { return cSubCallAction_2_0; }
		
		//'.('
		public Keyword getFullStopLeftParenthesisKeyword_2_1() { return cFullStopLeftParenthesisKeyword_2_1; }
		
		//(varType=Type? id=Identifier '|')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//varType=Type?
		public Assignment getVarTypeAssignment_2_2_0() { return cVarTypeAssignment_2_2_0; }
		
		//Type
		public RuleCall getVarTypeTypeParserRuleCall_2_2_0_0() { return cVarTypeTypeParserRuleCall_2_2_0_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_2_2_1() { return cIdAssignment_2_2_1; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_2_2_1_0() { return cIdIdentifierParserRuleCall_2_2_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_2_2() { return cVerticalLineKeyword_2_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_3() { return cLeftCurlyBracketKeyword_2_3; }
		
		//nested+=Stmt*
		public Assignment getNestedAssignment_2_4() { return cNestedAssignment_2_4; }
		
		//Stmt
		public RuleCall getNestedStmtParserRuleCall_2_4_0() { return cNestedStmtParserRuleCall_2_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_5() { return cRightCurlyBracketKeyword_2_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
	}
	public class FlushElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.Flush");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlushKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Flush:
		//    'flush' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'flush' ';'
		public Group getGroup() { return cGroup; }
		
		//'flush'
		public Keyword getFlushKeyword_0() { return cFlushKeyword_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class MultiselectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.multiselect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGenAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGenGenericMultiselectParserRuleCall_0_0 = (RuleCall)cGenAssignment_0.eContents().get(0);
		private final Assignment cUserAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUserUserMultiselectParserRuleCall_1_0 = (RuleCall)cUserAssignment_1.eContents().get(0);
		
		//multiselect:
		//    gen=genericMultiselect
		//    | user=userMultiselect
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//gen=genericMultiselect
		//| user=userMultiselect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//gen=genericMultiselect
		public Assignment getGenAssignment_0() { return cGenAssignment_0; }
		
		//genericMultiselect
		public RuleCall getGenGenericMultiselectParserRuleCall_0_0() { return cGenGenericMultiselectParserRuleCall_0_0; }
		
		//user=userMultiselect
		public Assignment getUserAssignment_1() { return cUserAssignment_1; }
		
		//userMultiselect
		public RuleCall getUserUserMultiselectParserRuleCall_1_0() { return cUserUserMultiselectParserRuleCall_1_0; }
	}
	public class GenericMultiselectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.genericMultiselect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPreambleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPreambleStmtBlockParserRuleCall_1_0 = (RuleCall)cPreambleAssignment_1.eContents().get(0);
		private final Assignment cSelectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectorStmtBlockParserRuleCall_2_0 = (RuleCall)cSelectorAssignment_2.eContents().get(0);
		private final Assignment cPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartMultiSelectPartParserRuleCall_3_0 = (RuleCall)cPartAssignment_3.eContents().get(0);
		private final Assignment cTrailerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrailerStmtBlockParserRuleCall_4_0 = (RuleCall)cTrailerAssignment_4.eContents().get(0);
		
		//// a kind of macro
		//genericMultiselect:
		//    'multiSelect' preamble=StmtBlock selector=StmtBlock part+=multiSelectPart+ trailer=StmtBlock
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'multiSelect' preamble=StmtBlock selector=StmtBlock part+=multiSelectPart+ trailer=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'multiSelect'
		public Keyword getMultiSelectKeyword_0() { return cMultiSelectKeyword_0; }
		
		//preamble=StmtBlock
		public Assignment getPreambleAssignment_1() { return cPreambleAssignment_1; }
		
		//StmtBlock
		public RuleCall getPreambleStmtBlockParserRuleCall_1_0() { return cPreambleStmtBlockParserRuleCall_1_0; }
		
		//selector=StmtBlock
		public Assignment getSelectorAssignment_2() { return cSelectorAssignment_2; }
		
		//StmtBlock
		public RuleCall getSelectorStmtBlockParserRuleCall_2_0() { return cSelectorStmtBlockParserRuleCall_2_0; }
		
		//part+=multiSelectPart+
		public Assignment getPartAssignment_3() { return cPartAssignment_3; }
		
		//multiSelectPart
		public RuleCall getPartMultiSelectPartParserRuleCall_3_0() { return cPartMultiSelectPartParserRuleCall_3_0; }
		
		//trailer=StmtBlock
		public Assignment getTrailerAssignment_4() { return cTrailerAssignment_4; }
		
		//StmtBlock
		public RuleCall getTrailerStmtBlockParserRuleCall_4_0() { return cTrailerStmtBlockParserRuleCall_4_0; }
	}
	public class MultiSelectPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.multiSelectPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseExpressionParserRuleCall_1_0 = (RuleCall)cCaseAssignment_1.eContents().get(0);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeStmtBlockParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Assignment cSelectorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelectorStmtBlockParserRuleCall_3_0 = (RuleCall)cSelectorAssignment_3.eContents().get(0);
		
		//multiSelectPart:
		//    'case' case=Expression code=StmtBlock selector=StmtBlock
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' case=Expression code=StmtBlock selector=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//case=Expression
		public Assignment getCaseAssignment_1() { return cCaseAssignment_1; }
		
		//Expression
		public RuleCall getCaseExpressionParserRuleCall_1_0() { return cCaseExpressionParserRuleCall_1_0; }
		
		//code=StmtBlock
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//StmtBlock
		public RuleCall getCodeStmtBlockParserRuleCall_2_0() { return cCodeStmtBlockParserRuleCall_2_0; }
		
		//selector=StmtBlock
		public Assignment getSelectorAssignment_3() { return cSelectorAssignment_3; }
		
		//StmtBlock
		public RuleCall getSelectorStmtBlockParserRuleCall_3_0() { return cSelectorStmtBlockParserRuleCall_3_0; }
	}
	public class UserMultiselectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.userMultiselect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentifierParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGenericMultiSelectKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtStmtBlockParserRuleCall_3_0 = (RuleCall)cStmtAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// a kind of pre-instantiated
		//userMultiselect:
		//    id=Identifier ':=' 'generic-multiSelect' stmt=StmtBlock ';'?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//id=Identifier ':=' 'generic-multiSelect' stmt=StmtBlock ';'?
		public Group getGroup() { return cGroup; }
		
		//id=Identifier
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_0_0() { return cIdIdentifierParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//'generic-multiSelect'
		public Keyword getGenericMultiSelectKeyword_2() { return cGenericMultiSelectKeyword_2; }
		
		//stmt=StmtBlock
		public Assignment getStmtAssignment_3() { return cStmtAssignment_3; }
		
		//StmtBlock
		public RuleCall getStmtStmtBlockParserRuleCall_3_0() { return cStmtStmtBlockParserRuleCall_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.Extension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameJavaQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// multiple alternatives missing at the moment
		//Extension:
		//    'extension' name=JavaQualifiedName ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'extension' name=JavaQualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'extension'
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }
		
		//name=JavaQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//JavaQualifiedName
		public RuleCall getNameJavaQualifiedNameParserRuleCall_1_0() { return cNameJavaQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class JavaQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uni_hildesheim.sse.vil.templatelang.TemplateLang.JavaQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQnameIdentifierParserRuleCall_0_0 = (RuleCall)cQnameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQnameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cQnameFullStopKeyword_1_0_0 = (Keyword)cQnameAssignment_1_0.eContents().get(0);
		private final Assignment cQnameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQnameIdentifierParserRuleCall_1_1_0 = (RuleCall)cQnameAssignment_1_1.eContents().get(0);
		
		//JavaQualifiedName:
		//    qname+=Identifier (qname+='.' qname+=Identifier)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//qname+=Identifier (qname+='.' qname+=Identifier)*
		public Group getGroup() { return cGroup; }
		
		//qname+=Identifier
		public Assignment getQnameAssignment_0() { return cQnameAssignment_0; }
		
		//Identifier
		public RuleCall getQnameIdentifierParserRuleCall_0_0() { return cQnameIdentifierParserRuleCall_0_0; }
		
		//(qname+='.' qname+=Identifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//qname+='.'
		public Assignment getQnameAssignment_1_0() { return cQnameAssignment_1_0; }
		
		//'.'
		public Keyword getQnameFullStopKeyword_1_0_0() { return cQnameFullStopKeyword_1_0_0; }
		
		//qname+=Identifier
		public Assignment getQnameAssignment_1_1() { return cQnameAssignment_1_1; }
		
		//Identifier
		public RuleCall getQnameIdentifierParserRuleCall_1_1_0() { return cQnameIdentifierParserRuleCall_1_1_0; }
	}
	
	
	private final LanguageUnitElements pLanguageUnit;
	private final TopElements pTop;
	private final HintedExpressionElements pHintedExpression;
	private final IndentationHintElements pIndentationHint;
	private final IndentationHintPartElements pIndentationHintPart;
	private final FormattingHintElements pFormattingHint;
	private final FormattingHintPartElements pFormattingHintPart;
	private final VilDefElements pVilDef;
	private final StmtBlockElements pStmtBlock;
	private final StmtElements pStmt;
	private final AlternativeElements pAlternative;
	private final ContentElements pContent;
	private final SwitchElements pSwitch;
	private final SwitchPartElements pSwitchPart;
	private final LoopElements pLoop;
	private final WhileElements pWhile;
	private final SubCallElements pSubCall;
	private final FlushElements pFlush;
	private final MultiselectElements pMultiselect;
	private final GenericMultiselectElements pGenericMultiselect;
	private final MultiSelectPartElements pMultiSelectPart;
	private final UserMultiselectElements pUserMultiselect;
	private final ExtensionElements pExtension;
	private final JavaQualifiedNameElements pJavaQualifiedName;
	
	private final Grammar grammar;
	
	private final ExpressionDslGrammarAccess gaExpressionDsl;

	@Inject
	public TemplateLangGrammarAccess(GrammarProvider grammarProvider,
			ExpressionDslGrammarAccess gaExpressionDsl) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaExpressionDsl = gaExpressionDsl;
		this.pLanguageUnit = new LanguageUnitElements();
		this.pTop = new TopElements();
		this.pHintedExpression = new HintedExpressionElements();
		this.pIndentationHint = new IndentationHintElements();
		this.pIndentationHintPart = new IndentationHintPartElements();
		this.pFormattingHint = new FormattingHintElements();
		this.pFormattingHintPart = new FormattingHintPartElements();
		this.pVilDef = new VilDefElements();
		this.pStmtBlock = new StmtBlockElements();
		this.pStmt = new StmtElements();
		this.pAlternative = new AlternativeElements();
		this.pContent = new ContentElements();
		this.pSwitch = new SwitchElements();
		this.pSwitchPart = new SwitchPartElements();
		this.pLoop = new LoopElements();
		this.pWhile = new WhileElements();
		this.pSubCall = new SubCallElements();
		this.pFlush = new FlushElements();
		this.pMultiselect = new MultiselectElements();
		this.pGenericMultiselect = new GenericMultiselectElements();
		this.pMultiSelectPart = new MultiSelectPartElements();
		this.pUserMultiselect = new UserMultiselectElements();
		this.pExtension = new ExtensionElements();
		this.pJavaQualifiedName = new JavaQualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_hildesheim.sse.vil.templatelang.TemplateLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public ExpressionDslGrammarAccess getExpressionDslGrammarAccess() {
		return gaExpressionDsl;
	}

	
	//@Override
	//LanguageUnit: // do not rename - required for reuse
	//    imports+=Import*
	//    javaExts+=Extension*
	//    (advices+=Advice)*
	//    (indent=IndentationHint)?
	//    (formatting=FormattingHint)?
	//    'template' name=Identifier
	//    '(' param=ParameterList? ')'
	//    ('extends' ext=Identifier)?
	//    '{'
	//        version=VersionStmt?
	//        (elements+=TypeDef
	//         | elements+=Compound
	//         | elements+=VariableDeclaration
	//         | elements+=VilDef)*
	//    '}'
	//    ;
	public LanguageUnitElements getLanguageUnitAccess() {
		return pLanguageUnit;
	}
	
	public ParserRule getLanguageUnitRule() {
		return getLanguageUnitAccess().getRule();
	}
	
	//// fake rule, needed that HintedExpression is generated
	//Top:
	//    ex=HintedExpression
	//;
	public TopElements getTopAccess() {
		return pTop;
	}
	
	public ParserRule getTopRule() {
		return getTopAccess().getRule();
	}
	
	//// Alternative entry, expressions with hint
	//HintedExpression:
	//    ex=Expression ('|' hint=(ID|'<'))?
	//;
	public HintedExpressionElements getHintedExpressionAccess() {
		return pHintedExpression;
	}
	
	public ParserRule getHintedExpressionRule() {
		return getHintedExpressionAccess().getRule();
	}
	
	//IndentationHint:
	//    '@indent' '(' parts+=IndentationHintPart (',' parts+=IndentationHintPart)* ')'
	//;
	public IndentationHintElements getIndentationHintAccess() {
		return pIndentationHint;
	}
	
	public ParserRule getIndentationHintRule() {
		return getIndentationHintAccess().getRule();
	}
	
	//IndentationHintPart:
	//    name=Identifier '=' value=NUMBER
	//;
	public IndentationHintPartElements getIndentationHintPartAccess() {
		return pIndentationHintPart;
	}
	
	public ParserRule getIndentationHintPartRule() {
		return getIndentationHintPartAccess().getRule();
	}
	
	//FormattingHint:
	//    '@format' '(' parts+=FormattingHintPart (',' parts+=FormattingHintPart)* ')'
	//;
	public FormattingHintElements getFormattingHintAccess() {
		return pFormattingHint;
	}
	
	public ParserRule getFormattingHintRule() {
		return getFormattingHintAccess().getRule();
	}
	
	//FormattingHintPart:
	//    name=Identifier '=' (value=STRING | numValue=NUMBER)
	//;
	public FormattingHintPartElements getFormattingHintPartAccess() {
		return pFormattingHintPart;
	}
	
	public ParserRule getFormattingHintPartRule() {
		return getFormattingHintPartAccess().getRule();
	}
	
	//VilDef:
	//  (annotations=AnnotationDeclarations)?
	//  (protected='protected')?
	//  'def' (type=Type)? id=Identifier '(' param=ParameterList? ')' stmts=StmtBlock ';'?
	//  ;
	public VilDefElements getVilDefAccess() {
		return pVilDef;
	}
	
	public ParserRule getVilDefRule() {
		return getVilDefAccess().getRule();
	}
	
	//StmtBlock:
	//    {StmtBlock}
	//    '{'
	//        stmts+=Stmt*
	//    '}'
	//    ;
	public StmtBlockElements getStmtBlockAccess() {
		return pStmtBlock;
	}
	
	public ParserRule getStmtBlockRule() {
		return getStmtBlockAccess().getRule();
	}
	
	//Stmt:
	//  var=VariableDeclaration
	//  | alt=Alternative
	//  | switch=Switch
	//  | multi=multiselect
	//  | loop=Loop
	//  | while=While
	//  | exprStmt=ExpressionStatement
	//  | ctn=Content
	//  | flush=Flush
	//  ;
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//Alternative:
	//    'if' '(' expr=Expression ')' (if=Stmt | ifBlock=StmtBlock) (=> 'else' (else=Stmt | elseBlock=StmtBlock))?
	//    ;
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}
	
	//Content:
	//    ctn=STRING (((noCR='!')? CR='<CR>')? ('|' indent=Expression )? ';')?
	//    ;
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//Switch:
	//    'switch' '(' expr=Expression ')' '{'
	//      (parts+=SwitchPart (',' parts+=SwitchPart)* (',' 'default' ':' dflt=Expression)?)
	//    '}'
	//    ;
	public SwitchElements getSwitchAccess() {
		return pSwitch;
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}
	
	//SwitchPart:
	//    left=Expression ':' right=Expression
	//    ;
	public SwitchPartElements getSwitchPartAccess() {
		return pSwitchPart;
	}
	
	public ParserRule getSwitchPartRule() {
		return getSwitchPartAccess().getRule();
	}
	
	//Loop:
	//    'for' '('
	//        type=Type id=Identifier ':' expr=Expression
	//        (',' separator=PrimaryExpression (',' finalSeparator=PrimaryExpression)?)?
	//    ')' (stmt=Stmt | block=StmtBlock)
	//    ;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//While:
	//    'while' '(' expr=Expression ')'
	//    (stmt=Stmt | block=StmtBlock)
	//;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//@Override
	//SubCall:
	//    type=('.' | '->') call=Call
	//    | '[' arrayEx=Expression ']' // IVML addition to OCL
	//    | {SubCall} '.(' (varType=Type? id=Identifier '|')? '{' nested+=Stmt* '}' ')' // implicit block with variable from last result
	//;
	public SubCallElements getSubCallAccess() {
		return pSubCall;
	}
	
	public ParserRule getSubCallRule() {
		return getSubCallAccess().getRule();
	}
	
	//Flush:
	//    'flush' ';'
	//;
	public FlushElements getFlushAccess() {
		return pFlush;
	}
	
	public ParserRule getFlushRule() {
		return getFlushAccess().getRule();
	}
	
	//multiselect:
	//    gen=genericMultiselect
	//    | user=userMultiselect
	//    ;
	public MultiselectElements getMultiselectAccess() {
		return pMultiselect;
	}
	
	public ParserRule getMultiselectRule() {
		return getMultiselectAccess().getRule();
	}
	
	//// a kind of macro
	//genericMultiselect:
	//    'multiSelect' preamble=StmtBlock selector=StmtBlock part+=multiSelectPart+ trailer=StmtBlock
	//    ;
	public GenericMultiselectElements getGenericMultiselectAccess() {
		return pGenericMultiselect;
	}
	
	public ParserRule getGenericMultiselectRule() {
		return getGenericMultiselectAccess().getRule();
	}
	
	//multiSelectPart:
	//    'case' case=Expression code=StmtBlock selector=StmtBlock
	//;
	public MultiSelectPartElements getMultiSelectPartAccess() {
		return pMultiSelectPart;
	}
	
	public ParserRule getMultiSelectPartRule() {
		return getMultiSelectPartAccess().getRule();
	}
	
	//// a kind of pre-instantiated
	//userMultiselect:
	//    id=Identifier ':=' 'generic-multiSelect' stmt=StmtBlock ';'?
	//    ;
	public UserMultiselectElements getUserMultiselectAccess() {
		return pUserMultiselect;
	}
	
	public ParserRule getUserMultiselectRule() {
		return getUserMultiselectAccess().getRule();
	}
	
	//// multiple alternatives missing at the moment
	//Extension:
	//    'extension' name=JavaQualifiedName ';'
	//    ;
	public ExtensionElements getExtensionAccess() {
		return pExtension;
	}
	
	public ParserRule getExtensionRule() {
		return getExtensionAccess().getRule();
	}
	
	//JavaQualifiedName:
	//    qname+=Identifier (qname+='.' qname+=Identifier)*
	//;
	public JavaQualifiedNameElements getJavaQualifiedNameAccess() {
		return pJavaQualifiedName;
	}
	
	public ParserRule getJavaQualifiedNameRule() {
		return getJavaQualifiedNameAccess().getRule();
	}
	
	//VariableDeclaration:
	//    (const='const')?
	//    type=Type
	//    name=Identifier ('=' expression=Expression)?
	//    ';'
	//;
	public ExpressionDslGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaExpressionDsl.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Compound:
	//    (abstract='abstract')? 'compound' name=Identifier ('refines' super=Identifier)? '{'
	//        vars+=VariableDeclaration*
	//    '}' ';'?
	//;
	public ExpressionDslGrammarAccess.CompoundElements getCompoundAccess() {
		return gaExpressionDsl.getCompoundAccess();
	}
	
	public ParserRule getCompoundRule() {
		return getCompoundAccess().getRule();
	}
	
	//TypeDef:
	//    'typedef'
	//    name=Identifier
	//    type=Type
	//    ';'
	//;
	public ExpressionDslGrammarAccess.TypeDefElements getTypeDefAccess() {
		return gaExpressionDsl.getTypeDefAccess();
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//// used in extending languages
	//Advice:
	//    '@advice' '(' name=QualifiedName ')'
	//    (versionSpec=VersionSpec?)
	//;
	public ExpressionDslGrammarAccess.AdviceElements getAdviceAccess() {
		return gaExpressionDsl.getAdviceAccess();
	}
	
	public ParserRule getAdviceRule() {
		return getAdviceAccess().getRule();
	}
	
	//VersionSpec:
	//   'with' restriction = Expression
	//;
	public ExpressionDslGrammarAccess.VersionSpecElements getVersionSpecAccess() {
		return gaExpressionDsl.getVersionSpecAccess();
	}
	
	public ParserRule getVersionSpecRule() {
		return getVersionSpecAccess().getRule();
	}
	
	//ParameterList:
	//    (param+=Parameter (',' param+=Parameter)*)
	//;
	public ExpressionDslGrammarAccess.ParameterListElements getParameterListAccess() {
		return gaExpressionDsl.getParameterListAccess();
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Parameter:
	//    type=Type
	//    name=Identifier
	//    ('=' dflt=Expression)?
	//;
	public ExpressionDslGrammarAccess.ParameterElements getParameterAccess() {
		return gaExpressionDsl.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//VersionStmt:
	//    'version'
	//    version=VERSION
	//    ';'
	//;
	public ExpressionDslGrammarAccess.VersionStmtElements getVersionStmtAccess() {
		return gaExpressionDsl.getVersionStmtAccess();
	}
	
	public ParserRule getVersionStmtRule() {
		return getVersionStmtAccess().getRule();
	}
	
	//Import:
	//    //here fqn because this may reference a specific project (of an external project)
	//    ('import' | insert='insert') name=Identifier (wildcard="*"?) (versionSpec=VersionSpec?)
	//    ';'
	//;
	public ExpressionDslGrammarAccess.ImportElements getImportAccess() {
		return gaExpressionDsl.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//// ------------------------------------- expressions -----------------------
	//// used in extending languages
	//ExpressionStatement:
	//    (var=Identifier ('.' field=Identifier)? '=')?
	//    expr=Expression
	//    ';'
	//    ;
	public ExpressionDslGrammarAccess.ExpressionStatementElements getExpressionStatementAccess() {
		return gaExpressionDsl.getExpressionStatementAccess();
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//Expression:
	//    expr=LogicalExpression | init=ContainerInitializer
	//    ;
	public ExpressionDslGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressionDsl.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//LogicalExpression:
	//    left=EqualityExpression
	//    right+=LogicalExpressionPart*
	//    ;
	public ExpressionDslGrammarAccess.LogicalExpressionElements getLogicalExpressionAccess() {
		return gaExpressionDsl.getLogicalExpressionAccess();
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}
	
	//LogicalExpressionPart:
	//    op=LogicalOperator
	//    ex=EqualityExpression
	//;
	public ExpressionDslGrammarAccess.LogicalExpressionPartElements getLogicalExpressionPartAccess() {
		return gaExpressionDsl.getLogicalExpressionPartAccess();
	}
	
	public ParserRule getLogicalExpressionPartRule() {
		return getLogicalExpressionPartAccess().getRule();
	}
	
	//LogicalOperator:
	//    'and'
	//    |'or'
	//    |'xor'
	//    |'implies'
	//    |'iff'
	//    ;
	public ExpressionDslGrammarAccess.LogicalOperatorElements getLogicalOperatorAccess() {
		return gaExpressionDsl.getLogicalOperatorAccess();
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//EqualityExpression:
	//    left=RelationalExpression
	//    right=EqualityExpressionPart?
	//    ;
	public ExpressionDslGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaExpressionDsl.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//EqualityExpressionPart:
	//    op=EqualityOperator
	//    ex=RelationalExpression
	//;
	public ExpressionDslGrammarAccess.EqualityExpressionPartElements getEqualityExpressionPartAccess() {
		return gaExpressionDsl.getEqualityExpressionPartAccess();
	}
	
	public ParserRule getEqualityExpressionPartRule() {
		return getEqualityExpressionPartAccess().getRule();
	}
	
	//EqualityOperator:
	//    '=='
	//    |'<>'
	//    |'!='
	//    ;
	public ExpressionDslGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaExpressionDsl.getEqualityOperatorAccess();
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//RelationalExpression:
	//    left=AdditiveExpression
	//    (right=RelationalExpressionPart right2=RelationalExpressionPart?)?
	//    ;
	public ExpressionDslGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaExpressionDsl.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//RelationalExpressionPart:
	//    op=RelationalOperator
	//    ex=AdditiveExpression
	//;
	public ExpressionDslGrammarAccess.RelationalExpressionPartElements getRelationalExpressionPartAccess() {
		return gaExpressionDsl.getRelationalExpressionPartAccess();
	}
	
	public ParserRule getRelationalExpressionPartRule() {
		return getRelationalExpressionPartAccess().getRule();
	}
	
	//RelationalOperator:
	//    '>'
	//    |'<'
	//    |'>='
	//    |'<='
	//    ;
	public ExpressionDslGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaExpressionDsl.getRelationalOperatorAccess();
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//AdditiveExpression:
	//    left=MultiplicativeExpression
	//    right+=AdditiveExpressionPart*
	//    ;
	public ExpressionDslGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaExpressionDsl.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//AdditiveExpressionPart:
	//    op=AdditiveOperator
	//    ex=MultiplicativeExpression
	//;
	public ExpressionDslGrammarAccess.AdditiveExpressionPartElements getAdditiveExpressionPartAccess() {
		return gaExpressionDsl.getAdditiveExpressionPartAccess();
	}
	
	public ParserRule getAdditiveExpressionPartRule() {
		return getAdditiveExpressionPartAccess().getRule();
	}
	
	//AdditiveOperator:
	//    '+'
	//    |'-'
	//    ;
	public ExpressionDslGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaExpressionDsl.getAdditiveOperatorAccess();
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//MultiplicativeExpression:
	//    left=UnaryExpression
	//    right=MultiplicativeExpressionPart?
	//    ;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaExpressionDsl.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MultiplicativeExpressionPart:
	//    op=MultiplicativeOperator
	//    expr=UnaryExpression
	//;
	public ExpressionDslGrammarAccess.MultiplicativeExpressionPartElements getMultiplicativeExpressionPartAccess() {
		return gaExpressionDsl.getMultiplicativeExpressionPartAccess();
	}
	
	public ParserRule getMultiplicativeExpressionPartRule() {
		return getMultiplicativeExpressionPartAccess().getRule();
	}
	
	//MultiplicativeOperator:
	//    '*'
	//    |'/'
	//    ;
	public ExpressionDslGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaExpressionDsl.getMultiplicativeOperatorAccess();
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//UnaryExpression:
	//    op = UnaryOperator?
	//    expr=PostfixExpression
	//    ;
	public ExpressionDslGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaExpressionDsl.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//    'not'
	//    |'!'
	//    |'-'
	//    ;
	public ExpressionDslGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaExpressionDsl.getUnaryOperatorAccess();
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//PostfixExpression:
	//    left=PrimaryExpression // left here for extensions
	//    ;
	public ExpressionDslGrammarAccess.PostfixExpressionElements getPostfixExpressionAccess() {
		return gaExpressionDsl.getPostfixExpressionAccess();
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//PrimaryExpression:
	//    otherEx=ExpressionOrQualifiedExecution
	//    | unqEx=UnqualifiedExecution
	//    | superEx=SuperExecution
	//    | newEx=ConstructorExecution
	//    ;
	public ExpressionDslGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaExpressionDsl.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//ExpressionOrQualifiedExecution:
	//    (val=Constant
	//    | '(' parenthesis=Expression ')'
	//    )
	//    calls+=SubCall*
	//    ;
	public ExpressionDslGrammarAccess.ExpressionOrQualifiedExecutionElements getExpressionOrQualifiedExecutionAccess() {
		return gaExpressionDsl.getExpressionOrQualifiedExecutionAccess();
	}
	
	public ParserRule getExpressionOrQualifiedExecutionRule() {
		return getExpressionOrQualifiedExecutionAccess().getRule();
	}
	
	//UnqualifiedExecution:
	//    call=Call calls+=SubCall*
	//    ;
	public ExpressionDslGrammarAccess.UnqualifiedExecutionElements getUnqualifiedExecutionAccess() {
		return gaExpressionDsl.getUnqualifiedExecutionAccess();
	}
	
	public ParserRule getUnqualifiedExecutionRule() {
		return getUnqualifiedExecutionAccess().getRule();
	}
	
	//SuperExecution:
	//    'super' '.' call=Call calls+=SubCall*
	//    ;
	public ExpressionDslGrammarAccess.SuperExecutionElements getSuperExecutionAccess() {
		return gaExpressionDsl.getSuperExecutionAccess();
	}
	
	public ParserRule getSuperExecutionRule() {
		return getSuperExecutionAccess().getRule();
	}
	
	//ConstructorExecution:
	//    'new' type=Type '(' param=ArgumentList? ')' calls+=SubCall*
	//    ;
	public ExpressionDslGrammarAccess.ConstructorExecutionElements getConstructorExecutionAccess() {
		return gaExpressionDsl.getConstructorExecutionAccess();
	}
	
	public ParserRule getConstructorExecutionRule() {
		return getConstructorExecutionAccess().getRule();
	}
	
	//Declarator:
	//    decl+=Declaration (';' decl+=Declaration)* '|'
	//    ;
	public ExpressionDslGrammarAccess.DeclaratorElements getDeclaratorAccess() {
		return gaExpressionDsl.getDeclaratorAccess();
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	//Declaration:
	//    type=Type? units+=DeclarationUnit (',' units+=DeclarationUnit)*
	//    ;
	public ExpressionDslGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaExpressionDsl.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//DeclarationUnit:
	//    id=Identifier
	//    ('=' deflt=Expression)?
	//;
	public ExpressionDslGrammarAccess.DeclarationUnitElements getDeclarationUnitAccess() {
		return gaExpressionDsl.getDeclarationUnitAccess();
	}
	
	public ParserRule getDeclarationUnitRule() {
		return getDeclarationUnitAccess().getRule();
	}
	
	//AnnotationDeclarations:
	//    {AnnotationDeclarations}
	//    ('@' id+=Identifier)*
	//;
	public ExpressionDslGrammarAccess.AnnotationDeclarationsElements getAnnotationDeclarationsAccess() {
		return gaExpressionDsl.getAnnotationDeclarationsAccess();
	}
	
	public ParserRule getAnnotationDeclarationsRule() {
		return getAnnotationDeclarationsAccess().getRule();
	}
	
	//Call:
	//    name=QualifiedPrefix
	//    '('
	//    decl=Declarator?
	//    param=ArgumentList?
	//    ')'
	//    ;
	public ExpressionDslGrammarAccess.CallElements getCallAccess() {
		return gaExpressionDsl.getCallAccess();
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//ArgumentList:
	//    param+=NamedArgument
	//    (
	//        ','
	//        param+=NamedArgument
	//    )*
	//    ;
	public ExpressionDslGrammarAccess.ArgumentListElements getArgumentListAccess() {
		return gaExpressionDsl.getArgumentListAccess();
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//NamedArgument:
	//    (name=Identifier '=')?
	//    ex=Expression
	//;
	public ExpressionDslGrammarAccess.NamedArgumentElements getNamedArgumentAccess() {
		return gaExpressionDsl.getNamedArgumentAccess();
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}
	
	//QualifiedPrefix:
	//    qname+=Identifier (qname+='::' qname+=Identifier)*
	//    ;
	public ExpressionDslGrammarAccess.QualifiedPrefixElements getQualifiedPrefixAccess() {
		return gaExpressionDsl.getQualifiedPrefixAccess();
	}
	
	public ParserRule getQualifiedPrefixRule() {
		return getQualifiedPrefixAccess().getRule();
	}
	
	//QualifiedName:
	//    prefix=QualifiedPrefix (qname+='.' qname+=Identifier)*
	//;
	public ExpressionDslGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaExpressionDsl.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Constant:
	//    nValue = NumValue
	//    | sValue = STRING
	//    | qValue = QualifiedName
	//    | bValue = ('true' | 'false')
	//    | null = 'null'
	//    | => version = VERSION
	//;
	public ExpressionDslGrammarAccess.ConstantElements getConstantAccess() {
		return gaExpressionDsl.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//NumValue :
	//    val=NUMBER
	//;
	public ExpressionDslGrammarAccess.NumValueElements getNumValueAccess() {
		return gaExpressionDsl.getNumValueAccess();
	}
	
	public ParserRule getNumValueRule() {
		return getNumValueAccess().getRule();
	}
	
	//Identifier:
	//    ID | VERSION | EXPONENT | "version" | "for" | "protected" | "switch" | "if" | "else" | "extends" | "static"
	//;
	public ExpressionDslGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaExpressionDsl.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//Type:
	//    name=QualifiedPrefix // specific types will be dynamically loaded at start-up
	//    | (set='setOf' param=TypeParameters)
	//    | (seq='sequenceOf' param=TypeParameters)
	//    | (map='mapOf' param=TypeParameters)
	//    | (call='callOf' (return=Type)? param=TypeParameters)
	//;
	public ExpressionDslGrammarAccess.TypeElements getTypeAccess() {
		return gaExpressionDsl.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeParameters:
	//    '(' param+=Type (',' param+=Type)* ')'
	//;
	public ExpressionDslGrammarAccess.TypeParametersElements getTypeParametersAccess() {
		return gaExpressionDsl.getTypeParametersAccess();
	}
	
	public ParserRule getTypeParametersRule() {
		return getTypeParametersAccess().getRule();
	}
	
	//ContainerInitializer:
	//    {ContainerInitializer}
	//    '{' (exprs+=ContainerInitializerExpression (',' exprs+=ContainerInitializerExpression)*)? '}'
	//;
	public ExpressionDslGrammarAccess.ContainerInitializerElements getContainerInitializerAccess() {
		return gaExpressionDsl.getContainerInitializerAccess();
	}
	
	public ParserRule getContainerInitializerRule() {
		return getContainerInitializerAccess().getRule();
	}
	
	//ContainerInitializerExpression:
	//    logical=LogicalExpression
	//    | container=ContainerInitializer
	//;
	public ExpressionDslGrammarAccess.ContainerInitializerExpressionElements getContainerInitializerExpressionAccess() {
		return gaExpressionDsl.getContainerInitializerExpressionAccess();
	}
	
	public ParserRule getContainerInitializerExpressionRule() {
		return getContainerInitializerExpressionAccess().getRule();
	}
	
	//// --------------------- Terminals (from IVML)----------------------------------
	//// otherwise we would have to write 0 . 5 instead of 0.5
	//terminal VERSION:
	//    'v' ('0'..'9')+ ('.' ('0'..'9')+)*
	//;
	public TerminalRule getVERSIONRule() {
		return gaExpressionDsl.getVERSIONRule();
	}
	
	//// adjust de.uni_hildesheim.sse.model.validation.IvmlIdentifierCheck
	//// never allow identifiers starting with $ -> Reasoner name prefixes
	//// here $ goes for meta names in dynamic IVML types
	//terminal ID:
	//    ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	//;
	public TerminalRule getIDRule() {
		return gaExpressionDsl.getIDRule();
	}
	
	//terminal NUMBER:
	//    '-'?
	//    (('0'..'9')+ ('.' ('0'..'9')* EXPONENT?)?
	//    |   '.' ('0'..'9')+ EXPONENT?
	//    |   ('0'..'9')+ EXPONENT)
	//;
	public TerminalRule getNUMBERRule() {
		return gaExpressionDsl.getNUMBERRule();
	}
	
	//terminal EXPONENT: // just return a string
	//    ('e'|'E') ('+'|'-')? ('0'..'9')+
	//;
	public TerminalRule getEXPONENTRule() {
		return gaExpressionDsl.getEXPONENTRule();
	}
	
	//terminal STRING :
	//    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	//    "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
	//;
	public TerminalRule getSTRINGRule() {
		return gaExpressionDsl.getSTRINGRule();
	}
	
	//// do not change the name of this terminal!!! -> comment recognition
	//terminal ML_COMMENT:
	//    '/*' -> '*/'
	//;
	public TerminalRule getML_COMMENTRule() {
		return gaExpressionDsl.getML_COMMENTRule();
	}
	
	//// do not change the name of this terminal!!! -> comment recognition
	//terminal SL_COMMENT:
	//    '//' !('\n'|'\r')* ('\r'? '\n')?
	//;
	public TerminalRule getSL_COMMENTRule() {
		return gaExpressionDsl.getSL_COMMENTRule();
	}
	
	//// do not change the name of this terminal!!! -> comment recognition
	//terminal WS:
	//    (' '|'\t'|'\r'|'\n')+
	//;
	public TerminalRule getWSRule() {
		return gaExpressionDsl.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//    .
	//;
	public TerminalRule getANY_OTHERRule() {
		return gaExpressionDsl.getANY_OTHERRule();
	}
}
