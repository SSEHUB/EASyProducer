module de.uni_hildesheim.sse.vil.templatelang.GenerateTemplateLang

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.xtext.ui.generator.*

//var grammarURI = "classpath:/de/uni_hildesheim/sse/vil/templatelang/TemplateLang.xtext"
var file.extensions = "vtl"
var projectName = "de.uni_hildesheim.sse.vil.templatelang"
var grammarName = "${projectName}.TemplateLang"
var rootPath = ".."
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
            scanClassPath = true
            platformUri = "${runtimeProject}/.."
            // The following two lines can be removed, if Xbase is not used.
            //registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
            //registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
            registerGeneratedEPackage = "de.uni_hildesheim.sse.vil.expressions.expressionDsl.ExpressionDslPackage"
            registerGenModelFile = "platform:/resource/de.uni_hildesheim.sse.vil.expressions/src-gen/de/uni_hildesheim/sse/vil/expressions/ExpressionDsl.genmodel"
        }
    
        component = DirectoryCleaner {
            directory = "${runtimeProject}/src-gen"
        }
    
        component = DirectoryCleaner {
            directory = "${runtimeProject}.ui/src-gen"
        }
    
        component = XtextGenerator {
            configuration = {
                project = StandardProjectConfig {
                    baseName = projectName
                    rootPath = rootPath
                    runtime = {
                        name = runtimeProject
                    }
                    //genericIde = {
                    //    name = "${projectName}.ui"
                    //}
                    runtimeTest = {
                        enabled = true
                        name = "${projectName}.tests"
                    }
                    eclipsePlugin = {
                        enabled = true
                        name = "${projectName}.ui"
                    }
                    eclipsePluginTest = {
                        enabled = false
                    }
                    createEclipseMetaData = true
                }
                code = {
                    encoding = "UTF-8"
                    lineDelimiter = "\r\n"
                    fileHeader = "/*\n * generated by Xtext \${version}\n */"
                    preferXtendStubs = false
                }
            }            
            //pathRtProject = runtimeProject
            //pathUiProject = "${runtimeProject}.ui"
            //pathTestProject = "${runtimeProject}.tests"
            //projectNameRt = projectName
            //projectNameUi = "${projectName}.ui"
            language = {
                name = grammarName
                fileExtensions = file.extensions
    
                // Java API to access grammar elements (required by several other fragments)
                fragment = grammarAccess.GrammarAccessFragment2 {}
    
                // generates Java API for the generated EPackages
                fragment = ecore.EMFGeneratorFragment2 {
                // referencedGenModels = "
                //  platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
                //  platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
                // "
                }
    
                // Serializer 2.0
                fragment = serializer.SerializerFragment2 {
                	generateStub = false
                }
                
                // the serialization component (1.0)
                // fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
    
                // a custom ResourceFactory for use with EMF
                fragment = resourceFactory.ResourceFactoryFragment2 {
                    //fileExtensions = file.extensions
                }
    
                // The antlr parser generator fragment.
                fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
                  options = {
                      backtrack = true
                      skipUnusedRules = false
                  }
                }
    
                // java-based API for validation
                fragment = validation.ValidatorFragment2 {
                    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                    // CK: excluded to enable the definition of multiple equal identifier
                //    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
                }
    
                // scoping and exporting API
                // fragment = scoping.ImportURIScopingFragment {}
                // fragment = exporting.SimpleNamesFragment {}
    
                // scoping and exporting API
                fragment = scoping.ImportNamespacesScopingFragment2 {}
                fragment = exporting.QualifiedNamesFragment2 {}
                fragment = builder.BuilderIntegrationFragment2 {}
    
                // generator API
                fragment = generator.GeneratorFragment2 {
                    generateMwe = false
                    generateJavaMain = false
                }
    
                // formatter API
                fragment = formatting.Formatter2Fragment2 {}
    
                // labeling API
                fragment = ui.labeling.LabelProviderFragment2 {}
    
                // outline API
                fragment = ui.outline.OutlineTreeProviderFragment2 {}
                fragment = ui.outline.QuickOutlineFragment2 {}
    
                // quickfix API
                fragment = ui.quickfix.QuickfixProviderFragment2 {}
    
                // content assist API
                fragment = ui.contentAssist.ContentAssistFragment2 {}
    
                // generates a more lightweight Antlr parser and lexer tailored for content assist
                //fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
    
                // generates junit test support classes into Generator#pathTestProject
                //fragment = junit.Junit4Fragment {}
    
                // project wizard (optional)
                // fragment = projectWizard.SimpleProjectWizardFragment {
                //      generatorProjectName = "${projectName}"
                //      modelFileExtension = file.extensions
                // }
    
                // rename refactoring
                fragment = ui.refactoring.RefactorElementNameFragment2 {}
    
                // provides the necessary bindings for java types integration
                fragment = types.TypesGeneratorFragment2 {}
    
                // generates the required bindings only if the grammar inherits from Xbase
                fragment = xbase.XbaseGeneratorFragment2 {}
    
                // provides a preference page for template proposals
                fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
    
                // provides a compare view
                fragment = ui.compare.CompareFragment2 {
                     //fileExtensions = file.extensions
                }
    
            }
        }
}

