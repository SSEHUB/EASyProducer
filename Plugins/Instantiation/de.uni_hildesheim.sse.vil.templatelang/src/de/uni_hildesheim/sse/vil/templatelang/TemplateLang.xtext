grammar de.uni_hildesheim.sse.vil.templatelang.TemplateLang with de.uni_hildesheim.sse.vil.expressions.ExpressionDsl

generate templateLang "http://www.uni_hildesheim.de/sse/vil/templatelang/TemplateLang"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

@Override
LanguageUnit: // do not rename - required for reuse
    imports+=Import* 
    javaExts+=Extension* 
    (advices+=Advice)*
    (indent=IndentationHint)?
    (formatting=FormattingHint)?
    'template' name=Identifier 
    '(' param=ParameterList? ')'
    ('extends' ext=Identifier)? 
    '{' 
        version=VersionStmt?
        (elements+=TypeDef
         | elements+=Compound
         | elements+=VariableDeclaration 
         | elements+=VilDef)* 
    '}' 
    ;

// fake rule, needed that HintedExpression is generated
Top:
    ex=HintedExpression
;

// Alternative entry, expressions with hint
HintedExpression:
    ex=Expression ('|' hint=(ID|'<'))?
;
    
IndentationHint:
    '@indent' '(' parts+=IndentationHintPart (',' parts+=IndentationHintPart)* ')' 
;

IndentationHintPart:
    name=Identifier '=' value=NUMBER
;

FormattingHint:
    '@format' '(' parts+=FormattingHintPart (',' parts+=FormattingHintPart)* ')'    
;

FormattingHintPart:
    name=Identifier '=' (value=STRING | numValue=NUMBER)
;

VilDef:
  (annotations=AnnotationDeclarations)?
  (protected='protected')? 
  'def' (type=Type)? id=Identifier '(' param=ParameterList? ')' stmts=StmtBlock ';'?
  ;
  
StmtBlock: 
    {StmtBlock}    
    '{' 
        stmts+=Stmt* 
    '}'
    ;

Stmt: 
  var=VariableDeclaration 
  | alt=Alternative 
  | switch=Switch 
  | multi=multiselect
  | loop=Loop 
  | while=While
  | exprStmt=ExpressionStatement
  | ctn=Content
  | flush=Flush
  ;

Alternative:
    'if' '(' expr=Expression ')' (if=Stmt | ifBlock=StmtBlock) (=> 'else' (else=Stmt | elseBlock=StmtBlock))?
    ;

Content:
    ctn=STRING (((noCR='!')? CR='<CR>')? ('|' indent=Expression )? ';')?
    ;

Switch: 
    'switch' '(' expr=Expression ')' '{'
      (parts+=SwitchPart (',' parts+=SwitchPart)* (',' 'default' ':' dflt=Expression)?) 
    '}'
    ;

SwitchPart:
    left=Expression ':' right=Expression
    ;

Loop:
    'for' '(' 
        type=Type id=Identifier ':' expr=Expression 
        (',' separator=PrimaryExpression (',' finalSeparator=PrimaryExpression)?)?
    ')' (stmt=Stmt | block=StmtBlock)
    ;

While:
    'while' '(' expr=Expression ')' 
    (stmt=Stmt | block=StmtBlock)
;

@Override
SubCall:
    type=('.' | '->') call=Call 
    | '[' arrayEx=Expression ']' // IVML addition to OCL
    | '.(' (varType=Type? id=Identifier '|')? '{' nested+=Stmt (nested+=Stmt)* '}' ')' // implicit block with variable from last result
;

Flush:
    'flush' ';'
;
      
multiselect: 
    gen=genericMultiselect 
    | user=userMultiselect
    ;
    
// a kind of macro
genericMultiselect: 
    'multiSelect' preamble=StmtBlock selector=StmtBlock part+=multiSelectPart+ trailer=StmtBlock
    ;
    
multiSelectPart:
    'case' case=Expression code=StmtBlock selector=StmtBlock
;

// a kind of pre-instantiated 
userMultiselect:
    id=Identifier ':=' 'generic-multiSelect' stmt=StmtBlock ';'?
    ;

// multiple alternatives missing at the moment
  
Extension: 
    'extension' name=JavaQualifiedName ';'
    ;

JavaQualifiedName:
    qname+=Identifier (qname+='.' qname+=Identifier)* 
;
