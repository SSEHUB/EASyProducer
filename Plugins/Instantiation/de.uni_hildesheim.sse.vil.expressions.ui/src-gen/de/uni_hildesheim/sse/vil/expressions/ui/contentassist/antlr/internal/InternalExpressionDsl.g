/*
 * generated by Xtext
 */
grammar InternalExpressionDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.uni_hildesheim.sse.vil.expressions.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.uni_hildesheim.sse.vil.expressions.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.uni_hildesheim.sse.vil.expressions.services.ExpressionDslGrammarAccess;

}

@parser::members {
 
 	private ExpressionDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpressionDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLanguageUnit
entryRuleLanguageUnit 
:
{ before(grammarAccess.getLanguageUnitRule()); }
	 ruleLanguageUnit
{ after(grammarAccess.getLanguageUnitRule()); } 
	 EOF 
;

// Rule LanguageUnit
ruleLanguageUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLanguageUnitAccess().getGroup()); }
(rule__LanguageUnit__Group__0)
{ after(grammarAccess.getLanguageUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleAdvice
entryRuleAdvice 
:
{ before(grammarAccess.getAdviceRule()); }
	 ruleAdvice
{ after(grammarAccess.getAdviceRule()); } 
	 EOF 
;

// Rule Advice
ruleAdvice
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdviceAccess().getGroup()); }
(rule__Advice__Group__0)
{ after(grammarAccess.getAdviceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersionSpec
entryRuleVersionSpec 
:
{ before(grammarAccess.getVersionSpecRule()); }
	 ruleVersionSpec
{ after(grammarAccess.getVersionSpecRule()); } 
	 EOF 
;

// Rule VersionSpec
ruleVersionSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVersionSpecAccess().getGroup()); }
(rule__VersionSpec__Group__0)
{ after(grammarAccess.getVersionSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersionStmt
entryRuleVersionStmt 
:
{ before(grammarAccess.getVersionStmtRule()); }
	 ruleVersionStmt
{ after(grammarAccess.getVersionStmtRule()); } 
	 EOF 
;

// Rule VersionStmt
ruleVersionStmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVersionStmtAccess().getGroup()); }
(rule__VersionStmt__Group__0)
{ after(grammarAccess.getVersionStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression 
:
{ before(grammarAccess.getLogicalExpressionRule()); }
	 ruleLogicalExpression
{ after(grammarAccess.getLogicalExpressionRule()); } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalExpressionAccess().getGroup()); }
(rule__LogicalExpression__Group__0)
{ after(grammarAccess.getLogicalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalExpressionPart
entryRuleLogicalExpressionPart 
:
{ before(grammarAccess.getLogicalExpressionPartRule()); }
	 ruleLogicalExpressionPart
{ after(grammarAccess.getLogicalExpressionPartRule()); } 
	 EOF 
;

// Rule LogicalExpressionPart
ruleLogicalExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getGroup()); }
(rule__LogicalExpressionPart__Group__0)
{ after(grammarAccess.getLogicalExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator 
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
(rule__LogicalOperator__Alternatives)
{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpressionPart
entryRuleEqualityExpressionPart 
:
{ before(grammarAccess.getEqualityExpressionPartRule()); }
	 ruleEqualityExpressionPart
{ after(grammarAccess.getEqualityExpressionPartRule()); } 
	 EOF 
;

// Rule EqualityExpressionPart
ruleEqualityExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getGroup()); }
(rule__EqualityExpressionPart__Group__0)
{ after(grammarAccess.getEqualityExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator 
:
{ before(grammarAccess.getEqualityOperatorRule()); }
	 ruleEqualityOperator
{ after(grammarAccess.getEqualityOperatorRule()); } 
	 EOF 
;

// Rule EqualityOperator
ruleEqualityOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
(rule__EqualityOperator__Alternatives)
{ after(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpressionPart
entryRuleRelationalExpressionPart 
:
{ before(grammarAccess.getRelationalExpressionPartRule()); }
	 ruleRelationalExpressionPart
{ after(grammarAccess.getRelationalExpressionPartRule()); } 
	 EOF 
;

// Rule RelationalExpressionPart
ruleRelationalExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getGroup()); }
(rule__RelationalExpressionPart__Group__0)
{ after(grammarAccess.getRelationalExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator 
:
{ before(grammarAccess.getRelationalOperatorRule()); }
	 ruleRelationalOperator
{ after(grammarAccess.getRelationalOperatorRule()); } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpressionPart
entryRuleAdditiveExpressionPart 
:
{ before(grammarAccess.getAdditiveExpressionPartRule()); }
	 ruleAdditiveExpressionPart
{ after(grammarAccess.getAdditiveExpressionPartRule()); } 
	 EOF 
;

// Rule AdditiveExpressionPart
ruleAdditiveExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getGroup()); }
(rule__AdditiveExpressionPart__Group__0)
{ after(grammarAccess.getAdditiveExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator 
:
{ before(grammarAccess.getAdditiveOperatorRule()); }
	 ruleAdditiveOperator
{ after(grammarAccess.getAdditiveOperatorRule()); } 
	 EOF 
;

// Rule AdditiveOperator
ruleAdditiveOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
(rule__AdditiveOperator__Alternatives)
{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpressionPart
entryRuleMultiplicativeExpressionPart 
:
{ before(grammarAccess.getMultiplicativeExpressionPartRule()); }
	 ruleMultiplicativeExpressionPart
{ after(grammarAccess.getMultiplicativeExpressionPartRule()); } 
	 EOF 
;

// Rule MultiplicativeExpressionPart
ruleMultiplicativeExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getGroup()); }
(rule__MultiplicativeExpressionPart__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator 
:
{ before(grammarAccess.getMultiplicativeOperatorRule()); }
	 ruleMultiplicativeOperator
{ after(grammarAccess.getMultiplicativeOperatorRule()); } 
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
(rule__MultiplicativeOperator__Alternatives)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator 
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixExpression
entryRulePostfixExpression 
:
{ before(grammarAccess.getPostfixExpressionRule()); }
	 rulePostfixExpression
{ after(grammarAccess.getPostfixExpressionRule()); } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostfixExpressionAccess().getLeftAssignment()); }
(rule__PostfixExpression__LeftAssignment)
{ after(grammarAccess.getPostfixExpressionAccess().getLeftAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionOrQualifiedExecution
entryRuleExpressionOrQualifiedExecution 
:
{ before(grammarAccess.getExpressionOrQualifiedExecutionRule()); }
	 ruleExpressionOrQualifiedExecution
{ after(grammarAccess.getExpressionOrQualifiedExecutionRule()); } 
	 EOF 
;

// Rule ExpressionOrQualifiedExecution
ruleExpressionOrQualifiedExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup()); }
(rule__ExpressionOrQualifiedExecution__Group__0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnqualifiedExecution
entryRuleUnqualifiedExecution 
:
{ before(grammarAccess.getUnqualifiedExecutionRule()); }
	 ruleUnqualifiedExecution
{ after(grammarAccess.getUnqualifiedExecutionRule()); } 
	 EOF 
;

// Rule UnqualifiedExecution
ruleUnqualifiedExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getGroup()); }
(rule__UnqualifiedExecution__Group__0)
{ after(grammarAccess.getUnqualifiedExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSuperExecution
entryRuleSuperExecution 
:
{ before(grammarAccess.getSuperExecutionRule()); }
	 ruleSuperExecution
{ after(grammarAccess.getSuperExecutionRule()); } 
	 EOF 
;

// Rule SuperExecution
ruleSuperExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSuperExecutionAccess().getGroup()); }
(rule__SuperExecution__Group__0)
{ after(grammarAccess.getSuperExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstructorExecution
entryRuleConstructorExecution 
:
{ before(grammarAccess.getConstructorExecutionRule()); }
	 ruleConstructorExecution
{ after(grammarAccess.getConstructorExecutionRule()); } 
	 EOF 
;

// Rule ConstructorExecution
ruleConstructorExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructorExecutionAccess().getGroup()); }
(rule__ConstructorExecution__Group__0)
{ after(grammarAccess.getConstructorExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubCall
entryRuleSubCall 
:
{ before(grammarAccess.getSubCallRule()); }
	 ruleSubCall
{ after(grammarAccess.getSubCallRule()); } 
	 EOF 
;

// Rule SubCall
ruleSubCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubCallAccess().getAlternatives()); }
(rule__SubCall__Alternatives)
{ after(grammarAccess.getSubCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarator
entryRuleDeclarator 
:
{ before(grammarAccess.getDeclaratorRule()); }
	 ruleDeclarator
{ after(grammarAccess.getDeclaratorRule()); } 
	 EOF 
;

// Rule Declarator
ruleDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaratorAccess().getGroup()); }
(rule__Declarator__Group__0)
{ after(grammarAccess.getDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationUnit
entryRuleDeclarationUnit 
:
{ before(grammarAccess.getDeclarationUnitRule()); }
	 ruleDeclarationUnit
{ after(grammarAccess.getDeclarationUnitRule()); } 
	 EOF 
;

// Rule DeclarationUnit
ruleDeclarationUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationUnitAccess().getGroup()); }
(rule__DeclarationUnit__Group__0)
{ after(grammarAccess.getDeclarationUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCall
entryRuleCall 
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallAccess().getGroup()); }
(rule__Call__Group__0)
{ after(grammarAccess.getCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgumentList
entryRuleArgumentList 
:
{ before(grammarAccess.getArgumentListRule()); }
	 ruleArgumentList
{ after(grammarAccess.getArgumentListRule()); } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentListAccess().getGroup()); }
(rule__ArgumentList__Group__0)
{ after(grammarAccess.getArgumentListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedArgument
entryRuleNamedArgument 
:
{ before(grammarAccess.getNamedArgumentRule()); }
	 ruleNamedArgument
{ after(grammarAccess.getNamedArgumentRule()); } 
	 EOF 
;

// Rule NamedArgument
ruleNamedArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedArgumentAccess().getGroup()); }
(rule__NamedArgument__Group__0)
{ after(grammarAccess.getNamedArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedPrefix
entryRuleQualifiedPrefix 
:
{ before(grammarAccess.getQualifiedPrefixRule()); }
	 ruleQualifiedPrefix
{ after(grammarAccess.getQualifiedPrefixRule()); } 
	 EOF 
;

// Rule QualifiedPrefix
ruleQualifiedPrefix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getGroup()); }
(rule__QualifiedPrefix__Group__0)
{ after(grammarAccess.getQualifiedPrefixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getAlternatives()); }
(rule__Constant__Alternatives)
{ after(grammarAccess.getConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumValue
entryRuleNumValue 
:
{ before(grammarAccess.getNumValueRule()); }
	 ruleNumValue
{ after(grammarAccess.getNumValueRule()); } 
	 EOF 
;

// Rule NumValue
ruleNumValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumValueAccess().getValAssignment()); }
(rule__NumValue__ValAssignment)
{ after(grammarAccess.getNumValueAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifier
entryRuleIdentifier 
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifierAccess().getAlternatives()); }
(rule__Identifier__Alternatives)
{ after(grammarAccess.getIdentifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeParameters
entryRuleTypeParameters 
:
{ before(grammarAccess.getTypeParametersRule()); }
	 ruleTypeParameters
{ after(grammarAccess.getTypeParametersRule()); } 
	 EOF 
;

// Rule TypeParameters
ruleTypeParameters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParametersAccess().getGroup()); }
(rule__TypeParameters__Group__0)
{ after(grammarAccess.getTypeParametersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContainerInitializer
entryRuleContainerInitializer 
:
{ before(grammarAccess.getContainerInitializerRule()); }
	 ruleContainerInitializer
{ after(grammarAccess.getContainerInitializerRule()); } 
	 EOF 
;

// Rule ContainerInitializer
ruleContainerInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContainerInitializerAccess().getGroup()); }
(rule__ContainerInitializer__Group__0)
{ after(grammarAccess.getContainerInitializerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContainerInitializerExpression
entryRuleContainerInitializerExpression 
:
{ before(grammarAccess.getContainerInitializerExpressionRule()); }
	 ruleContainerInitializerExpression
{ after(grammarAccess.getContainerInitializerExpressionRule()); } 
	 EOF 
;

// Rule ContainerInitializerExpression
ruleContainerInitializerExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getAlternatives()); }
(rule__ContainerInitializerExpression__Alternatives)
{ after(grammarAccess.getContainerInitializerExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Import__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getImportAccess().getInsertAssignment_0_1()); }
(rule__Import__InsertAssignment_0_1)
{ after(grammarAccess.getImportAccess().getInsertAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprAssignment_0()); }
(rule__Expression__ExprAssignment_0)
{ after(grammarAccess.getExpressionAccess().getExprAssignment_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getInitAssignment_1()); }
(rule__Expression__InitAssignment_1)
{ after(grammarAccess.getExpressionAccess().getInitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); }

	'and' 

{ after(grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); }

	'or' 

{ after(grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getXorKeyword_2()); }

	'xor' 

{ after(grammarAccess.getLogicalOperatorAccess().getXorKeyword_2()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getImpliesKeyword_3()); }

	'implies' 

{ after(grammarAccess.getLogicalOperatorAccess().getImpliesKeyword_3()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getIffKeyword_4()); }

	'iff' 

{ after(grammarAccess.getLogicalOperatorAccess().getIffKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getEqualityOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }

	'<>' 

{ after(grammarAccess.getEqualityOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2()); }

	'!=' 

{ after(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); }

	'>' 

{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }

	'>=' 

{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }

	'<=' 

{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getNotKeyword_0()); }

	'not' 

{ after(grammarAccess.getUnaryOperatorAccess().getNotKeyword_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_1()); }

	'!' 

{ after(grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_2()); }

	'-' 

{ after(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOtherExAssignment_0()); }
(rule__PrimaryExpression__OtherExAssignment_0)
{ after(grammarAccess.getPrimaryExpressionAccess().getOtherExAssignment_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnqExAssignment_1()); }
(rule__PrimaryExpression__UnqExAssignment_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getUnqExAssignment_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getSuperExAssignment_2()); }
(rule__PrimaryExpression__SuperExAssignment_2)
{ after(grammarAccess.getPrimaryExpressionAccess().getSuperExAssignment_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNewExAssignment_3()); }
(rule__PrimaryExpression__NewExAssignment_3)
{ after(grammarAccess.getPrimaryExpressionAccess().getNewExAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValAssignment_0_0()); }
(rule__ExpressionOrQualifiedExecution__ValAssignment_0_0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup_0_1()); }
(rule__ExpressionOrQualifiedExecution__Group_0_1__0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getGroup_0()); }
(rule__SubCall__Group_0__0)
{ after(grammarAccess.getSubCallAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSubCallAccess().getGroup_1()); }
(rule__SubCall__Group_1__0)
{ after(grammarAccess.getSubCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__TypeAlternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getTypeFullStopKeyword_0_0_0_0()); }

	'.' 

{ after(grammarAccess.getSubCallAccess().getTypeFullStopKeyword_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getSubCallAccess().getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1()); }

	'->' 

{ after(grammarAccess.getSubCallAccess().getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNValueAssignment_0()); }
(rule__Constant__NValueAssignment_0)
{ after(grammarAccess.getConstantAccess().getNValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getSValueAssignment_1()); }
(rule__Constant__SValueAssignment_1)
{ after(grammarAccess.getConstantAccess().getSValueAssignment_1()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getQValueAssignment_2()); }
(rule__Constant__QValueAssignment_2)
{ after(grammarAccess.getConstantAccess().getQValueAssignment_2()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getBValueAssignment_3()); }
(rule__Constant__BValueAssignment_3)
{ after(grammarAccess.getConstantAccess().getBValueAssignment_3()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getNullAssignment_4()); }
(rule__Constant__NullAssignment_4)
{ after(grammarAccess.getConstantAccess().getNullAssignment_4()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getVersionAssignment_5()); }
(rule__Constant__VersionAssignment_5)
{ after(grammarAccess.getConstantAccess().getVersionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__BValueAlternatives_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getBValueTrueKeyword_3_0_0()); }

	'true' 

{ after(grammarAccess.getConstantAccess().getBValueTrueKeyword_3_0_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getBValueFalseKeyword_3_0_1()); }

	'false' 

{ after(grammarAccess.getConstantAccess().getBValueFalseKeyword_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getVERSIONTerminalRuleCall_1()); }
	RULE_VERSION
{ after(grammarAccess.getIdentifierAccess().getVERSIONTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getEXPONENTTerminalRuleCall_2()); }
	RULE_EXPONENT
{ after(grammarAccess.getIdentifierAccess().getEXPONENTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getVersionKeyword_3()); }

	'version' 

{ after(grammarAccess.getIdentifierAccess().getVersionKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameAssignment_0()); }
(rule__Type__NameAssignment_0)
{ after(grammarAccess.getTypeAccess().getNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_1()); }
(rule__Type__Group_1__0)
{ after(grammarAccess.getTypeAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_2()); }
(rule__Type__Group_2__0)
{ after(grammarAccess.getTypeAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_3()); }
(rule__Type__Group_3__0)
{ after(grammarAccess.getTypeAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_4()); }
(rule__Type__Group_4__0)
{ after(grammarAccess.getTypeAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializerExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getLogicalAssignment_0()); }
(rule__ContainerInitializerExpression__LogicalAssignment_0)
{ after(grammarAccess.getContainerInitializerExpressionAccess().getLogicalAssignment_0()); }
)

    |(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getContainerAssignment_1()); }
(rule__ContainerInitializerExpression__ContainerAssignment_1)
{ after(grammarAccess.getContainerInitializerExpressionAccess().getContainerAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__LanguageUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__0__Impl
	rule__LanguageUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getAdvicesAssignment_0()); }
(rule__LanguageUnit__AdvicesAssignment_0)*
{ after(grammarAccess.getLanguageUnitAccess().getAdvicesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__1__Impl
	rule__LanguageUnit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getNameAssignment_1()); }
(rule__LanguageUnit__NameAssignment_1)
{ after(grammarAccess.getLanguageUnitAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__2__Impl
	rule__LanguageUnit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getVersionAssignment_2()); }
(rule__LanguageUnit__VersionAssignment_2)?
{ after(grammarAccess.getLanguageUnitAccess().getVersionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getImportsAssignment_3()); }
(rule__LanguageUnit__ImportsAssignment_3)*
{ after(grammarAccess.getLanguageUnitAccess().getImportsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstAssignment_0()); }
(rule__VariableDeclaration__ConstAssignment_0)?
{ after(grammarAccess.getVariableDeclarationAccess().getConstAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
(rule__VariableDeclaration__TypeAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
(rule__VariableDeclaration__NameAssignment_2)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
	rule__VariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
(rule__VariableDeclaration__Group_3__0)?
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__0__Impl
	rule__VariableDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }

	'=' 

{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
(rule__VariableDeclaration__ExpressionAssignment_3_1)
{ after(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Advice__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__0__Impl
	rule__Advice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getAdviceKeyword_0()); }

	'@advice' 

{ after(grammarAccess.getAdviceAccess().getAdviceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__1__Impl
	rule__Advice__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAdviceAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__2__Impl
	rule__Advice__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getNameAssignment_2()); }
(rule__Advice__NameAssignment_2)
{ after(grammarAccess.getAdviceAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__3__Impl
	rule__Advice__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAdviceAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getVersionSpecAssignment_4()); }
(rule__Advice__VersionSpecAssignment_4)?
{ after(grammarAccess.getAdviceAccess().getVersionSpecAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VersionSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionSpec__Group__0__Impl
	rule__VersionSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionSpecAccess().getWithKeyword_0()); }

	'with' 

{ after(grammarAccess.getVersionSpecAccess().getWithKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionSpecAccess().getRestrictionAssignment_1()); }
(rule__VersionSpec__RestrictionAssignment_1)
{ after(grammarAccess.getVersionSpecAccess().getRestrictionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_0()); }
(rule__Parameter__TypeAssignment_0)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
(rule__Parameter__NameAssignment_1)
{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_2()); }
(rule__Parameter__Group_2__0)?
{ after(grammarAccess.getParameterAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameter__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_2__0__Impl
	rule__Parameter__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getParameterAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDfltAssignment_2_1()); }
(rule__Parameter__DfltAssignment_2_1)
{ after(grammarAccess.getParameterAccess().getDfltAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VersionStmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionStmt__Group__0__Impl
	rule__VersionStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getVersionKeyword_0()); }

	'version' 

{ after(grammarAccess.getVersionStmtAccess().getVersionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionStmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionStmt__Group__1__Impl
	rule__VersionStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getVersionAssignment_1()); }
(rule__VersionStmt__VersionAssignment_1)
{ after(grammarAccess.getVersionStmtAccess().getVersionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionStmt__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionStmt__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getVersionStmtAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getAlternatives_0()); }
(rule__Import__Alternatives_0)
{ after(grammarAccess.getImportAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameAssignment_1()); }
(rule__Import__NameAssignment_1)
{ after(grammarAccess.getImportAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getWildcardAssignment_2()); }
(rule__Import__WildcardAssignment_2)?
{ after(grammarAccess.getImportAccess().getWildcardAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__3__Impl
	rule__Import__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getVersionSpecAssignment_3()); }
(rule__Import__VersionSpecAssignment_3)?
{ after(grammarAccess.getImportAccess().getVersionSpecAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getImportAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__LogicalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpression__Group__0__Impl
	rule__LogicalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getLeftAssignment_0()); }
(rule__LogicalExpression__LeftAssignment_0)
{ after(grammarAccess.getLogicalExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1()); }
(rule__LogicalExpression__RightAssignment_1)*
{ after(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpressionPart__Group__0__Impl
	rule__LogicalExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getOpAssignment_0()); }
(rule__LogicalExpressionPart__OpAssignment_0)
{ after(grammarAccess.getLogicalExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getExAssignment_1()); }
(rule__LogicalExpressionPart__ExAssignment_1)
{ after(grammarAccess.getLogicalExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getLeftAssignment_0()); }
(rule__EqualityExpression__LeftAssignment_0)
{ after(grammarAccess.getEqualityExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1()); }
(rule__EqualityExpression__RightAssignment_1)?
{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpressionPart__Group__0__Impl
	rule__EqualityExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getOpAssignment_0()); }
(rule__EqualityExpressionPart__OpAssignment_0)
{ after(grammarAccess.getEqualityExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getExAssignment_1()); }
(rule__EqualityExpressionPart__ExAssignment_1)
{ after(grammarAccess.getEqualityExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLeftAssignment_0()); }
(rule__RelationalExpression__LeftAssignment_0)
{ after(grammarAccess.getRelationalExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)?
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_0()); }
(rule__RelationalExpression__RightAssignment_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRight2Assignment_1_1()); }
(rule__RelationalExpression__Right2Assignment_1_1)?
{ after(grammarAccess.getRelationalExpressionAccess().getRight2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpressionPart__Group__0__Impl
	rule__RelationalExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getOpAssignment_0()); }
(rule__RelationalExpressionPart__OpAssignment_0)
{ after(grammarAccess.getRelationalExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getExAssignment_1()); }
(rule__RelationalExpressionPart__ExAssignment_1)
{ after(grammarAccess.getRelationalExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getLeftAssignment_0()); }
(rule__AdditiveExpression__LeftAssignment_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1()); }
(rule__AdditiveExpression__RightAssignment_1)*
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpressionPart__Group__0__Impl
	rule__AdditiveExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getOpAssignment_0()); }
(rule__AdditiveExpressionPart__OpAssignment_0)
{ after(grammarAccess.getAdditiveExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getExAssignment_1()); }
(rule__AdditiveExpressionPart__ExAssignment_1)
{ after(grammarAccess.getAdditiveExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getLeftAssignment_0()); }
(rule__MultiplicativeExpression__LeftAssignment_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1()); }
(rule__MultiplicativeExpression__RightAssignment_1)?
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpressionPart__Group__0__Impl
	rule__MultiplicativeExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getOpAssignment_0()); }
(rule__MultiplicativeExpressionPart__OpAssignment_0)
{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getExprAssignment_1()); }
(rule__MultiplicativeExpressionPart__ExprAssignment_1)
{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
(rule__UnaryExpression__OpAssignment_0)?
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1()); }
(rule__UnaryExpression__ExprAssignment_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionOrQualifiedExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group__0__Impl
	rule__ExpressionOrQualifiedExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getAlternatives_0()); }
(rule__ExpressionOrQualifiedExecution__Alternatives_0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrQualifiedExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsAssignment_1()); }
(rule__ExpressionOrQualifiedExecution__CallsAssignment_1)*
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionOrQualifiedExecution__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group_0_1__0__Impl
	rule__ExpressionOrQualifiedExecution__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getLeftParenthesisKeyword_0_1_0()); }

	'(' 

{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getLeftParenthesisKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrQualifiedExecution__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group_0_1__1__Impl
	rule__ExpressionOrQualifiedExecution__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisAssignment_0_1_1()); }
(rule__ExpressionOrQualifiedExecution__ParenthesisAssignment_0_1_1)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrQualifiedExecution__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getRightParenthesisKeyword_0_1_2()); }

	')' 

{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getRightParenthesisKeyword_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnqualifiedExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnqualifiedExecution__Group__0__Impl
	rule__UnqualifiedExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallAssignment_0()); }
(rule__UnqualifiedExecution__CallAssignment_0)
{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnqualifiedExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnqualifiedExecution__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallsAssignment_1()); }
(rule__UnqualifiedExecution__CallsAssignment_1)*
{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SuperExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__0__Impl
	rule__SuperExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getSuperKeyword_0()); }

	'super' 

{ after(grammarAccess.getSuperExecutionAccess().getSuperKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__1__Impl
	rule__SuperExecution__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getSuperExecutionAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExecution__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__2__Impl
	rule__SuperExecution__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallAssignment_2()); }
(rule__SuperExecution__CallAssignment_2)
{ after(grammarAccess.getSuperExecutionAccess().getCallAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExecution__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallsAssignment_3()); }
(rule__SuperExecution__CallsAssignment_3)*
{ after(grammarAccess.getSuperExecutionAccess().getCallsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConstructorExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__0__Impl
	rule__ConstructorExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getConstructorExecutionAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__1__Impl
	rule__ConstructorExecution__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getTypeAssignment_1()); }
(rule__ConstructorExecution__TypeAssignment_1)
{ after(grammarAccess.getConstructorExecutionAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__2__Impl
	rule__ConstructorExecution__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getConstructorExecutionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__3__Impl
	rule__ConstructorExecution__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getParamAssignment_3()); }
(rule__ConstructorExecution__ParamAssignment_3)?
{ after(grammarAccess.getConstructorExecutionAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__4__Impl
	rule__ConstructorExecution__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getConstructorExecutionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getCallsAssignment_5()); }
(rule__ConstructorExecution__CallsAssignment_5)*
{ after(grammarAccess.getConstructorExecutionAccess().getCallsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SubCall__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_0__0__Impl
	rule__SubCall__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getTypeAssignment_0_0()); }
(rule__SubCall__TypeAssignment_0_0)
{ after(grammarAccess.getSubCallAccess().getTypeAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubCall__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getCallAssignment_0_1()); }
(rule__SubCall__CallAssignment_0_1)
{ after(grammarAccess.getSubCallAccess().getCallAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_1__0__Impl
	rule__SubCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getSubCallAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_1__1__Impl
	rule__SubCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getArrayExAssignment_1_1()); }
(rule__SubCall__ArrayExAssignment_1_1)
{ after(grammarAccess.getSubCallAccess().getArrayExAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getSubCallAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__0__Impl
	rule__Declarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclAssignment_0()); }
(rule__Declarator__DeclAssignment_0)
{ after(grammarAccess.getDeclaratorAccess().getDeclAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__1__Impl
	rule__Declarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getGroup_1()); }
(rule__Declarator__Group_1__0)*
{ after(grammarAccess.getDeclaratorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declarator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group_1__0__Impl
	rule__Declarator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getSemicolonKeyword_1_0()); }

	';' 

{ after(grammarAccess.getDeclaratorAccess().getSemicolonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclAssignment_1_1()); }
(rule__Declarator__DeclAssignment_1_1)
{ after(grammarAccess.getDeclaratorAccess().getDeclAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
(rule__Declaration__TypeAssignment_0)?
{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsAssignment_1()); }
(rule__Declaration__UnitsAssignment_1)
{ after(grammarAccess.getDeclarationAccess().getUnitsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getGroup_2()); }
(rule__Declaration__Group_2__0)*
{ after(grammarAccess.getDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_2__0__Impl
	rule__Declaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getDeclarationAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsAssignment_2_1()); }
(rule__Declaration__UnitsAssignment_2_1)
{ after(grammarAccess.getDeclarationAccess().getUnitsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclarationUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group__0__Impl
	rule__DeclarationUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getIdAssignment_0()); }
(rule__DeclarationUnit__IdAssignment_0)
{ after(grammarAccess.getDeclarationUnitAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getGroup_1()); }
(rule__DeclarationUnit__Group_1__0)?
{ after(grammarAccess.getDeclarationUnitAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclarationUnit__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group_1__0__Impl
	rule__DeclarationUnit__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getDeclarationUnitAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationUnit__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getDefltAssignment_1_1()); }
(rule__DeclarationUnit__DefltAssignment_1_1)
{ after(grammarAccess.getDeclarationUnitAccess().getDefltAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getNameAssignment_0()); }
(rule__Call__NameAssignment_0)
{ after(grammarAccess.getCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getDeclAssignment_2()); }
(rule__Call__DeclAssignment_2)?
{ after(grammarAccess.getCallAccess().getDeclAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__3__Impl
	rule__Call__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParamAssignment_3()); }
(rule__Call__ParamAssignment_3)?
{ after(grammarAccess.getCallAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArgumentList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group__0__Impl
	rule__ArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamAssignment_0()); }
(rule__ArgumentList__ParamAssignment_0)
{ after(grammarAccess.getArgumentListAccess().getParamAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getGroup_1()); }
(rule__ArgumentList__Group_1__0)*
{ after(grammarAccess.getArgumentListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group_1__0__Impl
	rule__ArgumentList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getArgumentListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamAssignment_1_1()); }
(rule__ArgumentList__ParamAssignment_1_1)
{ after(grammarAccess.getArgumentListAccess().getParamAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedArgument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group__0__Impl
	rule__NamedArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getGroup_0()); }
(rule__NamedArgument__Group_0__0)?
{ after(grammarAccess.getNamedArgumentAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getExAssignment_1()); }
(rule__NamedArgument__ExAssignment_1)
{ after(grammarAccess.getNamedArgumentAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedArgument__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group_0__0__Impl
	rule__NamedArgument__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getNameAssignment_0_0()); }
(rule__NamedArgument__NameAssignment_0_0)
{ after(grammarAccess.getNamedArgumentAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgument__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_0_1()); }

	'=' 

{ after(grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedPrefix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group__0__Impl
	rule__QualifiedPrefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_0()); }
(rule__QualifiedPrefix__QnameAssignment_0)
{ after(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedPrefix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getGroup_1()); }
(rule__QualifiedPrefix__Group_1__0)*
{ after(grammarAccess.getQualifiedPrefixAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedPrefix__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group_1__0__Impl
	rule__QualifiedPrefix__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_0()); }
(rule__QualifiedPrefix__QnameAssignment_1_0)
{ after(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedPrefix__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_1()); }
(rule__QualifiedPrefix__QnameAssignment_1_1)
{ after(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getPrefixAssignment_0()); }
(rule__QualifiedName__PrefixAssignment_0)
{ after(grammarAccess.getQualifiedNameAccess().getPrefixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_0()); }
(rule__QualifiedName__QnameAssignment_1_0)
{ after(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_1()); }
(rule__QualifiedName__QnameAssignment_1_1)
{ after(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__0__Impl
	rule__Type__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSetAssignment_1_0()); }
(rule__Type__SetAssignment_1_0)
{ after(grammarAccess.getTypeAccess().getSetAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_1_1()); }
(rule__Type__ParamAssignment_1_1)
{ after(grammarAccess.getTypeAccess().getParamAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_2__0__Impl
	rule__Type__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSeqAssignment_2_0()); }
(rule__Type__SeqAssignment_2_0)
{ after(grammarAccess.getTypeAccess().getSeqAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_2_1()); }
(rule__Type__ParamAssignment_2_1)
{ after(grammarAccess.getTypeAccess().getParamAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_3__0__Impl
	rule__Type__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getMapAssignment_3_0()); }
(rule__Type__MapAssignment_3_0)
{ after(grammarAccess.getTypeAccess().getMapAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_3_1()); }
(rule__Type__ParamAssignment_3_1)
{ after(grammarAccess.getTypeAccess().getParamAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_4__0__Impl
	rule__Type__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCallAssignment_4_0()); }
(rule__Type__CallAssignment_4_0)
{ after(grammarAccess.getTypeAccess().getCallAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_4__1__Impl
	rule__Type__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getReturnAssignment_4_1()); }
(rule__Type__ReturnAssignment_4_1)?
{ after(grammarAccess.getTypeAccess().getReturnAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_4_2()); }
(rule__Type__ParamAssignment_4_2)
{ after(grammarAccess.getTypeAccess().getParamAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypeParameters__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__0__Impl
	rule__TypeParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getTypeParametersAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__1__Impl
	rule__TypeParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamAssignment_1()); }
(rule__TypeParameters__ParamAssignment_1)
{ after(grammarAccess.getTypeParametersAccess().getParamAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__2__Impl
	rule__TypeParameters__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getGroup_2()); }
(rule__TypeParameters__Group_2__0)*
{ after(grammarAccess.getTypeParametersAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getTypeParametersAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeParameters__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group_2__0__Impl
	rule__TypeParameters__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamAssignment_2_1()); }
(rule__TypeParameters__ParamAssignment_2_1)
{ after(grammarAccess.getTypeParametersAccess().getParamAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainerInitializer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__0__Impl
	rule__ContainerInitializer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getContainerInitializerAction_0()); }
(

)
{ after(grammarAccess.getContainerInitializerAccess().getContainerInitializerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__1__Impl
	rule__ContainerInitializer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getContainerInitializerAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__2__Impl
	rule__ContainerInitializer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getGroup_2()); }
(rule__ContainerInitializer__Group_2__0)?
{ after(grammarAccess.getContainerInitializerAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getContainerInitializerAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ContainerInitializer__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2__0__Impl
	rule__ContainerInitializer__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_0()); }
(rule__ContainerInitializer__ExprsAssignment_2_0)
{ after(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getGroup_2_1()); }
(rule__ContainerInitializer__Group_2_1__0)*
{ after(grammarAccess.getContainerInitializerAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainerInitializer__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2_1__0__Impl
	rule__ContainerInitializer__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getContainerInitializerAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_1_1()); }
(rule__ContainerInitializer__ExprsAssignment_2_1_1)
{ after(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__LanguageUnit__AdvicesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getAdvicesAdviceParserRuleCall_0_0()); }
	ruleAdvice{ after(grammarAccess.getLanguageUnitAccess().getAdvicesAdviceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getLanguageUnitAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__VersionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getVersionVersionStmtParserRuleCall_2_0()); }
	ruleVersionStmt{ after(grammarAccess.getLanguageUnitAccess().getVersionVersionStmtParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ImportsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getImportsImportParserRuleCall_3_0()); }
	ruleImport{ after(grammarAccess.getLanguageUnitAccess().getImportsImportParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ConstAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }

	'const' 

{ after(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }
)

{ after(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIdentifierParserRuleCall_2_0()); }
	ruleIdentifier{ after(grammarAccess.getVariableDeclarationAccess().getNameIdentifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ExpressionAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Advice__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAdviceAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__VersionSpecAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getVersionSpecVersionSpecParserRuleCall_4_0()); }
	ruleVersionSpec{ after(grammarAccess.getAdviceAccess().getVersionSpecVersionSpecParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VersionSpec__RestrictionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionSpecAccess().getRestrictionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getVersionSpecAccess().getRestrictionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Parameter__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__DfltAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDfltExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getParameterAccess().getDfltExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__VersionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getVersionVERSIONTerminalRuleCall_1_0()); }
	RULE_VERSION{ after(grammarAccess.getVersionStmtAccess().getVersionVERSIONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__InsertAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }
(
{ before(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }

	'insert' 

{ after(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }
)

{ after(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getImportAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__WildcardAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }
(
{ before(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }

	'*' 

{ after(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }
)

{ after(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__VersionSpecAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getVersionSpecVersionSpecParserRuleCall_3_0()); }
	ruleVersionSpec{ after(grammarAccess.getImportAccess().getVersionSpecVersionSpecParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__ExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprLogicalExpressionParserRuleCall_0_0()); }
	ruleLogicalExpression{ after(grammarAccess.getExpressionAccess().getExprLogicalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__InitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getInitContainerInitializerParserRuleCall_1_0()); }
	ruleContainerInitializer{ after(grammarAccess.getExpressionAccess().getInitContainerInitializerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getLeftEqualityExpressionParserRuleCall_0_0()); }
	ruleEqualityExpression{ after(grammarAccess.getLogicalExpressionAccess().getLeftEqualityExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionPartParserRuleCall_1_0()); }
	ruleLogicalExpressionPart{ after(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getOpLogicalOperatorParserRuleCall_0_0()); }
	ruleLogicalOperator{ after(grammarAccess.getLogicalExpressionPartAccess().getOpLogicalOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getExEqualityExpressionParserRuleCall_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getLogicalExpressionPartAccess().getExEqualityExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionPartParserRuleCall_1_0()); }
	ruleEqualityExpressionPart{ after(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getOpEqualityOperatorParserRuleCall_0_0()); }
	ruleEqualityOperator{ after(grammarAccess.getEqualityExpressionPartAccess().getOpEqualityOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getExRelationalExpressionParserRuleCall_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionPartAccess().getExRelationalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLeftAdditiveExpressionParserRuleCall_0_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getLeftAdditiveExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionPartParserRuleCall_1_0_0()); }
	ruleRelationalExpressionPart{ after(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionPartParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Right2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRight2RelationalExpressionPartParserRuleCall_1_1_0()); }
	ruleRelationalExpressionPart{ after(grammarAccess.getRelationalExpressionAccess().getRight2RelationalExpressionPartParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getOpRelationalOperatorParserRuleCall_0_0()); }
	ruleRelationalOperator{ after(grammarAccess.getRelationalExpressionPartAccess().getOpRelationalOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getExAdditiveExpressionParserRuleCall_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionPartAccess().getExAdditiveExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getLeftMultiplicativeExpressionParserRuleCall_0_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getLeftMultiplicativeExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionPartParserRuleCall_1_0()); }
	ruleAdditiveExpressionPart{ after(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getOpAdditiveOperatorParserRuleCall_0_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getAdditiveExpressionPartAccess().getOpAdditiveOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getExMultiplicativeExpressionParserRuleCall_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionPartAccess().getExMultiplicativeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionPartParserRuleCall_1_0()); }
	ruleMultiplicativeExpressionPart{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getOpMultiplicativeOperatorParserRuleCall_0_0()); }
	ruleMultiplicativeOperator{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getOpMultiplicativeOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getExprUnaryExpressionParserRuleCall_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getExprUnaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0()); }
	rulePostfixExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__LeftAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getLeftPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression{ after(grammarAccess.getPostfixExpressionAccess().getLeftPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OtherExAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0()); }
	ruleExpressionOrQualifiedExecution{ after(grammarAccess.getPrimaryExpressionAccess().getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__UnqExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnqExUnqualifiedExecutionParserRuleCall_1_0()); }
	ruleUnqualifiedExecution{ after(grammarAccess.getPrimaryExpressionAccess().getUnqExUnqualifiedExecutionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__SuperExAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getSuperExSuperExecutionParserRuleCall_2_0()); }
	ruleSuperExecution{ after(grammarAccess.getPrimaryExpressionAccess().getSuperExSuperExecutionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__NewExAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNewExConstructorExecutionParserRuleCall_3_0()); }
	ruleConstructorExecution{ after(grammarAccess.getPrimaryExpressionAccess().getNewExConstructorExecutionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__ValAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValConstantParserRuleCall_0_0_0()); }
	ruleConstant{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValConstantParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__ParenthesisAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisExpressionParserRuleCall_0_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisExpressionParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__CallsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
	ruleSubCall{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__CallAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallCallParserRuleCall_0_0()); }
	ruleCall{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallCallParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__CallsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
	ruleSubCall{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__CallAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallCallParserRuleCall_2_0()); }
	ruleCall{ after(grammarAccess.getSuperExecutionAccess().getCallCallParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__CallsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallsSubCallParserRuleCall_3_0()); }
	ruleSubCall{ after(grammarAccess.getSuperExecutionAccess().getCallsSubCallParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getConstructorExecutionAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getParamArgumentListParserRuleCall_3_0()); }
	ruleArgumentList{ after(grammarAccess.getConstructorExecutionAccess().getParamArgumentListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__CallsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getCallsSubCallParserRuleCall_5_0()); }
	ruleSubCall{ after(grammarAccess.getConstructorExecutionAccess().getCallsSubCallParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__TypeAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getTypeAlternatives_0_0_0()); }
(rule__SubCall__TypeAlternatives_0_0_0)
{ after(grammarAccess.getSubCallAccess().getTypeAlternatives_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__CallAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getCallCallParserRuleCall_0_1_0()); }
	ruleCall{ after(grammarAccess.getSubCallAccess().getCallCallParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__ArrayExAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getArrayExExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getSubCallAccess().getArrayExExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DeclAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_0_0()); }
	ruleDeclaration{ after(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DeclAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_1_1_0()); }
	ruleDeclaration{ after(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__UnitsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_1_0()); }
	ruleDeclarationUnit{ after(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__UnitsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_2_1_0()); }
	ruleDeclarationUnit{ after(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getIdIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getDeclarationUnitAccess().getIdIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__DefltAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getDefltExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getDeclarationUnitAccess().getDefltExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
	ruleQualifiedPrefix{ after(grammarAccess.getCallAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__DeclAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getDeclDeclaratorParserRuleCall_2_0()); }
	ruleDeclarator{ after(grammarAccess.getCallAccess().getDeclDeclaratorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParamArgumentListParserRuleCall_3_0()); }
	ruleArgumentList{ after(grammarAccess.getCallAccess().getParamArgumentListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ParamAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_0_0()); }
	ruleNamedArgument{ after(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ParamAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_1_1_0()); }
	ruleNamedArgument{ after(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getNameIdentifierParserRuleCall_0_0_0()); }
	ruleIdentifier{ after(grammarAccess.getNamedArgumentAccess().getNameIdentifierParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getExExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getNamedArgumentAccess().getExExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__QnameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__QnameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }

	'::' 

{ after(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }
)

{ after(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__QnameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__PrefixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getPrefixQualifiedPrefixParserRuleCall_0_0()); }
	ruleQualifiedPrefix{ after(grammarAccess.getQualifiedNameAccess().getPrefixQualifiedPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__QnameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
)

{ after(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__QnameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNValueNumValueParserRuleCall_0_0()); }
	ruleNumValue{ after(grammarAccess.getConstantAccess().getNValueNumValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__SValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getSValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getConstantAccess().getSValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__QValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getQValueQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getConstantAccess().getQValueQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__BValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getBValueAlternatives_3_0()); }
(rule__Constant__BValueAlternatives_3_0)
{ after(grammarAccess.getConstantAccess().getBValueAlternatives_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NullAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }
(
{ before(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }

	'null' 

{ after(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }
)

{ after(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__VersionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getVersionVERSIONTerminalRuleCall_5_0()); }
	RULE_VERSION{ after(grammarAccess.getConstantAccess().getVersionVERSIONTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumValue__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumValueAccess().getValNUMBERTerminalRuleCall_0()); }
	RULE_NUMBER{ after(grammarAccess.getNumValueAccess().getValNUMBERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
	ruleQualifiedPrefix{ after(grammarAccess.getTypeAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__SetAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }

	'setOf' 

{ after(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_1_1_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__SeqAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }

	'sequenceOf' 

{ after(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_2_1_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__MapAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }

	'mapOf' 

{ after(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_3_1_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__CallAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }

	'callOf' 

{ after(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ReturnAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getReturnTypeParserRuleCall_4_1_0()); }
	ruleType{ after(grammarAccess.getTypeAccess().getReturnTypeParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_4_2_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__ParamAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__ParamAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_2_1_0()); }
	ruleType{ after(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__ExprsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_0_0()); }
	ruleContainerInitializerExpression{ after(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__ExprsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_1_1_0()); }
	ruleContainerInitializerExpression{ after(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializerExpression__LogicalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getLogicalLogicalExpressionParserRuleCall_0_0()); }
	ruleLogicalExpression{ after(grammarAccess.getContainerInitializerExpressionAccess().getLogicalLogicalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializerExpression__ContainerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getContainerContainerInitializerParserRuleCall_1_0()); }
	ruleContainerInitializer{ after(grammarAccess.getContainerInitializerExpressionAccess().getContainerContainerInitializerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_VERSION : 'v' ('0'..'9')+ ('.' ('0'..'9')+)*;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NUMBER : '-'? (('0'..'9')+ ('.' ('0'..'9')* RULE_EXPONENT?)?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT);

RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


