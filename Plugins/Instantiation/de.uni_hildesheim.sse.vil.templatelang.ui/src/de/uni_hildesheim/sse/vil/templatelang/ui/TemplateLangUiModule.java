/*
 * generated by Xtext
 */
package de.uni_hildesheim.sse.vil.templatelang.ui;

import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration;
import org.eclipse.xtext.ui.resource.IResourceUIServiceProvider;
import org.eclipse.xtext.builder.IXtextBuilderParticipant;
import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator;

import de.uni_hildesheim.sse.vil.expressions.ui.highlighting.VilHighlightingCalculator;
import de.uni_hildesheim.sse.vil.expressions.ui.highlighting.VilHighlightingConfiguration;
import de.uni_hildesheim.sse.vil.templatelang.ui.hyperlinking.VtlHyperlinkHelper;
import net.ssehub.easy.dslCore.ui.BuilderParticipant;
import net.ssehub.easy.dslCore.ui.EasyUiResourceServiceProvider;

/**
 * Use this class to register components to be used within the IDE.
 */
public class TemplateLangUiModule extends de.uni_hildesheim.sse.vil.templatelang.ui.AbstractTemplateLangUiModule {
	public TemplateLangUiModule(AbstractUIPlugin plugin) {
		super(plugin);
	}
	
    /**
     * Bind the initial configuration of the highlighting (bold) for the customized
     * highlighting. May be overridden by the user's preferences stored by Eclipse.
     * 
     * @return the class which defines the initial configuration
     */
    public Class<? extends IHighlightingConfiguration> bindIHighlightingConfiguration () {
        return VilHighlightingConfiguration.class;
    }
    
    /**
     * Bind the actual highlighting (what and how to highlight).
     * 
     * @return the class which determines what and how to highlight
     */
    public Class<? extends ISemanticHighlightingCalculator> bindISemanticHighlightingCalculator(){
        return VilHighlightingCalculator.class;   
    }
    
    /**
     * Binds the custom VTL hyperlink helper for the creation of the <code>com.google.inject.Bindery</code>.
     * 
     * This enables the creation of hyperlinks for VTL-elements in an VTL-file and the custom
     * reaction on selecting these Hyperlinks (or pressing F3), e.g. showing the element's declaration.
     */
    public Class<? extends IHyperlinkHelper> bindIHyperlinkHelper() {
        return VtlHyperlinkHelper.class;
    }
    
    @Override
    public Class<? extends IXtextBuilderParticipant> bindIXtextBuilderParticipant() {
        return BuilderParticipant.class;
    }

    /**
     * Binds a resource service provider.
     * 
     * @return the resource service provider
     */
    public Class<? extends IResourceUIServiceProvider> bindIResourceUIServiceProvider() {
        return EasyUiResourceServiceProvider.class;
    }
    
    /*@Override
    public Class<? extends IXtextEditorCallback> bindIXtextEditorCallback() {
         return ValidatingEditorCallback.class; // enable markers, Composite would be nice
    }*/

}
