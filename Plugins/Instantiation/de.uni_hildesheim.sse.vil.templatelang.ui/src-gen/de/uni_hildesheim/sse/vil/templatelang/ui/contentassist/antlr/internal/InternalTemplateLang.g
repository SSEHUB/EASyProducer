/*
 * generated by Xtext
 */
grammar InternalTemplateLang;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.uni_hildesheim.sse.vil.templatelang.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.uni_hildesheim.sse.vil.templatelang.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.uni_hildesheim.sse.vil.templatelang.services.TemplateLangGrammarAccess;

}

@parser::members {
 
 	private TemplateLangGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TemplateLangGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLanguageUnit
entryRuleLanguageUnit 
:
{ before(grammarAccess.getLanguageUnitRule()); }
	 ruleLanguageUnit
{ after(grammarAccess.getLanguageUnitRule()); } 
	 EOF 
;

// Rule LanguageUnit
ruleLanguageUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLanguageUnitAccess().getGroup()); }
(rule__LanguageUnit__Group__0)
{ after(grammarAccess.getLanguageUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleHintedExpression
entryRuleHintedExpression 
:
{ before(grammarAccess.getHintedExpressionRule()); }
	 ruleHintedExpression
{ after(grammarAccess.getHintedExpressionRule()); } 
	 EOF 
;

// Rule HintedExpression
ruleHintedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHintedExpressionAccess().getGroup()); }
(rule__HintedExpression__Group__0)
{ after(grammarAccess.getHintedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIndentationHint
entryRuleIndentationHint 
:
{ before(grammarAccess.getIndentationHintRule()); }
	 ruleIndentationHint
{ after(grammarAccess.getIndentationHintRule()); } 
	 EOF 
;

// Rule IndentationHint
ruleIndentationHint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIndentationHintAccess().getGroup()); }
(rule__IndentationHint__Group__0)
{ after(grammarAccess.getIndentationHintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIndentationHintPart
entryRuleIndentationHintPart 
:
{ before(grammarAccess.getIndentationHintPartRule()); }
	 ruleIndentationHintPart
{ after(grammarAccess.getIndentationHintPartRule()); } 
	 EOF 
;

// Rule IndentationHintPart
ruleIndentationHintPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIndentationHintPartAccess().getGroup()); }
(rule__IndentationHintPart__Group__0)
{ after(grammarAccess.getIndentationHintPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFormattingHint
entryRuleFormattingHint 
:
{ before(grammarAccess.getFormattingHintRule()); }
	 ruleFormattingHint
{ after(grammarAccess.getFormattingHintRule()); } 
	 EOF 
;

// Rule FormattingHint
ruleFormattingHint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFormattingHintAccess().getGroup()); }
(rule__FormattingHint__Group__0)
{ after(grammarAccess.getFormattingHintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFormattingHintPart
entryRuleFormattingHintPart 
:
{ before(grammarAccess.getFormattingHintPartRule()); }
	 ruleFormattingHintPart
{ after(grammarAccess.getFormattingHintPartRule()); } 
	 EOF 
;

// Rule FormattingHintPart
ruleFormattingHintPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFormattingHintPartAccess().getGroup()); }
(rule__FormattingHintPart__Group__0)
{ after(grammarAccess.getFormattingHintPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVilDef
entryRuleVilDef 
:
{ before(grammarAccess.getVilDefRule()); }
	 ruleVilDef
{ after(grammarAccess.getVilDefRule()); } 
	 EOF 
;

// Rule VilDef
ruleVilDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVilDefAccess().getGroup()); }
(rule__VilDef__Group__0)
{ after(grammarAccess.getVilDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStmtBlock
entryRuleStmtBlock 
:
{ before(grammarAccess.getStmtBlockRule()); }
	 ruleStmtBlock
{ after(grammarAccess.getStmtBlockRule()); } 
	 EOF 
;

// Rule StmtBlock
ruleStmtBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStmtBlockAccess().getGroup()); }
(rule__StmtBlock__Group__0)
{ after(grammarAccess.getStmtBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStmt
entryRuleStmt 
:
{ before(grammarAccess.getStmtRule()); }
	 ruleStmt
{ after(grammarAccess.getStmtRule()); } 
	 EOF 
;

// Rule Stmt
ruleStmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStmtAccess().getAlternatives()); }
(rule__Stmt__Alternatives)
{ after(grammarAccess.getStmtAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlternative
entryRuleAlternative 
:
{ before(grammarAccess.getAlternativeRule()); }
	 ruleAlternative
{ after(grammarAccess.getAlternativeRule()); } 
	 EOF 
;

// Rule Alternative
ruleAlternative
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlternativeAccess().getGroup()); }
(rule__Alternative__Group__0)
{ after(grammarAccess.getAlternativeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContent
entryRuleContent 
:
{ before(grammarAccess.getContentRule()); }
	 ruleContent
{ after(grammarAccess.getContentRule()); } 
	 EOF 
;

// Rule Content
ruleContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContentAccess().getGroup()); }
(rule__Content__Group__0)
{ after(grammarAccess.getContentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitch
entryRuleSwitch 
:
{ before(grammarAccess.getSwitchRule()); }
	 ruleSwitch
{ after(grammarAccess.getSwitchRule()); } 
	 EOF 
;

// Rule Switch
ruleSwitch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchAccess().getGroup()); }
(rule__Switch__Group__0)
{ after(grammarAccess.getSwitchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchPart
entryRuleSwitchPart 
:
{ before(grammarAccess.getSwitchPartRule()); }
	 ruleSwitchPart
{ after(grammarAccess.getSwitchPartRule()); } 
	 EOF 
;

// Rule SwitchPart
ruleSwitchPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchPartAccess().getGroup()); }
(rule__SwitchPart__Group__0)
{ after(grammarAccess.getSwitchPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoop
entryRuleLoop 
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopAccess().getGroup()); }
(rule__Loop__Group__0)
{ after(grammarAccess.getLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhile
entryRuleWhile 
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileAccess().getGroup()); }
(rule__While__Group__0)
{ after(grammarAccess.getWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlush
entryRuleFlush 
:
{ before(grammarAccess.getFlushRule()); }
	 ruleFlush
{ after(grammarAccess.getFlushRule()); } 
	 EOF 
;

// Rule Flush
ruleFlush
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlushAccess().getGroup()); }
(rule__Flush__Group__0)
{ after(grammarAccess.getFlushAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemultiselect
entryRulemultiselect 
:
{ before(grammarAccess.getMultiselectRule()); }
	 rulemultiselect
{ after(grammarAccess.getMultiselectRule()); } 
	 EOF 
;

// Rule multiselect
rulemultiselect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiselectAccess().getAlternatives()); }
(rule__Multiselect__Alternatives)
{ after(grammarAccess.getMultiselectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegenericMultiselect
entryRulegenericMultiselect 
:
{ before(grammarAccess.getGenericMultiselectRule()); }
	 rulegenericMultiselect
{ after(grammarAccess.getGenericMultiselectRule()); } 
	 EOF 
;

// Rule genericMultiselect
rulegenericMultiselect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGenericMultiselectAccess().getGroup()); }
(rule__GenericMultiselect__Group__0)
{ after(grammarAccess.getGenericMultiselectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemultiSelectPart
entryRulemultiSelectPart 
:
{ before(grammarAccess.getMultiSelectPartRule()); }
	 rulemultiSelectPart
{ after(grammarAccess.getMultiSelectPartRule()); } 
	 EOF 
;

// Rule multiSelectPart
rulemultiSelectPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiSelectPartAccess().getGroup()); }
(rule__MultiSelectPart__Group__0)
{ after(grammarAccess.getMultiSelectPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleuserMultiselect
entryRuleuserMultiselect 
:
{ before(grammarAccess.getUserMultiselectRule()); }
	 ruleuserMultiselect
{ after(grammarAccess.getUserMultiselectRule()); } 
	 EOF 
;

// Rule userMultiselect
ruleuserMultiselect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUserMultiselectAccess().getGroup()); }
(rule__UserMultiselect__Group__0)
{ after(grammarAccess.getUserMultiselectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExtension
entryRuleExtension 
:
{ before(grammarAccess.getExtensionRule()); }
	 ruleExtension
{ after(grammarAccess.getExtensionRule()); } 
	 EOF 
;

// Rule Extension
ruleExtension
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExtensionAccess().getGroup()); }
(rule__Extension__Group__0)
{ after(grammarAccess.getExtensionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaQualifiedName
entryRuleJavaQualifiedName 
:
{ before(grammarAccess.getJavaQualifiedNameRule()); }
	 ruleJavaQualifiedName
{ after(grammarAccess.getJavaQualifiedNameRule()); } 
	 EOF 
;

// Rule JavaQualifiedName
ruleJavaQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaQualifiedNameAccess().getGroup()); }
(rule__JavaQualifiedName__Group__0)
{ after(grammarAccess.getJavaQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompound
entryRuleCompound 
:
{ before(grammarAccess.getCompoundRule()); }
	 ruleCompound
{ after(grammarAccess.getCompoundRule()); } 
	 EOF 
;

// Rule Compound
ruleCompound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundAccess().getGroup()); }
(rule__Compound__Group__0)
{ after(grammarAccess.getCompoundAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDef
entryRuleTypeDef 
:
{ before(grammarAccess.getTypeDefRule()); }
	 ruleTypeDef
{ after(grammarAccess.getTypeDefRule()); } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDefAccess().getGroup()); }
(rule__TypeDef__Group__0)
{ after(grammarAccess.getTypeDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdvice
entryRuleAdvice 
:
{ before(grammarAccess.getAdviceRule()); }
	 ruleAdvice
{ after(grammarAccess.getAdviceRule()); } 
	 EOF 
;

// Rule Advice
ruleAdvice
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdviceAccess().getGroup()); }
(rule__Advice__Group__0)
{ after(grammarAccess.getAdviceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersionSpec
entryRuleVersionSpec 
:
{ before(grammarAccess.getVersionSpecRule()); }
	 ruleVersionSpec
{ after(grammarAccess.getVersionSpecRule()); } 
	 EOF 
;

// Rule VersionSpec
ruleVersionSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVersionSpecAccess().getGroup()); }
(rule__VersionSpec__Group__0)
{ after(grammarAccess.getVersionSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterList
entryRuleParameterList 
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterListAccess().getGroup()); }
(rule__ParameterList__Group__0)
{ after(grammarAccess.getParameterListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVersionStmt
entryRuleVersionStmt 
:
{ before(grammarAccess.getVersionStmtRule()); }
	 ruleVersionStmt
{ after(grammarAccess.getVersionStmtRule()); } 
	 EOF 
;

// Rule VersionStmt
ruleVersionStmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVersionStmtAccess().getGroup()); }
(rule__VersionStmt__Group__0)
{ after(grammarAccess.getVersionStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement 
:
{ before(grammarAccess.getExpressionStatementRule()); }
	 ruleExpressionStatement
{ after(grammarAccess.getExpressionStatementRule()); } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup()); }
(rule__ExpressionStatement__Group__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression 
:
{ before(grammarAccess.getLogicalExpressionRule()); }
	 ruleLogicalExpression
{ after(grammarAccess.getLogicalExpressionRule()); } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalExpressionAccess().getGroup()); }
(rule__LogicalExpression__Group__0)
{ after(grammarAccess.getLogicalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalExpressionPart
entryRuleLogicalExpressionPart 
:
{ before(grammarAccess.getLogicalExpressionPartRule()); }
	 ruleLogicalExpressionPart
{ after(grammarAccess.getLogicalExpressionPartRule()); } 
	 EOF 
;

// Rule LogicalExpressionPart
ruleLogicalExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getGroup()); }
(rule__LogicalExpressionPart__Group__0)
{ after(grammarAccess.getLogicalExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator 
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
(rule__LogicalOperator__Alternatives)
{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpressionPart
entryRuleEqualityExpressionPart 
:
{ before(grammarAccess.getEqualityExpressionPartRule()); }
	 ruleEqualityExpressionPart
{ after(grammarAccess.getEqualityExpressionPartRule()); } 
	 EOF 
;

// Rule EqualityExpressionPart
ruleEqualityExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getGroup()); }
(rule__EqualityExpressionPart__Group__0)
{ after(grammarAccess.getEqualityExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator 
:
{ before(grammarAccess.getEqualityOperatorRule()); }
	 ruleEqualityOperator
{ after(grammarAccess.getEqualityOperatorRule()); } 
	 EOF 
;

// Rule EqualityOperator
ruleEqualityOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
(rule__EqualityOperator__Alternatives)
{ after(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpressionPart
entryRuleRelationalExpressionPart 
:
{ before(grammarAccess.getRelationalExpressionPartRule()); }
	 ruleRelationalExpressionPart
{ after(grammarAccess.getRelationalExpressionPartRule()); } 
	 EOF 
;

// Rule RelationalExpressionPart
ruleRelationalExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getGroup()); }
(rule__RelationalExpressionPart__Group__0)
{ after(grammarAccess.getRelationalExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator 
:
{ before(grammarAccess.getRelationalOperatorRule()); }
	 ruleRelationalOperator
{ after(grammarAccess.getRelationalOperatorRule()); } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpressionPart
entryRuleAdditiveExpressionPart 
:
{ before(grammarAccess.getAdditiveExpressionPartRule()); }
	 ruleAdditiveExpressionPart
{ after(grammarAccess.getAdditiveExpressionPartRule()); } 
	 EOF 
;

// Rule AdditiveExpressionPart
ruleAdditiveExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getGroup()); }
(rule__AdditiveExpressionPart__Group__0)
{ after(grammarAccess.getAdditiveExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveOperator
entryRuleAdditiveOperator 
:
{ before(grammarAccess.getAdditiveOperatorRule()); }
	 ruleAdditiveOperator
{ after(grammarAccess.getAdditiveOperatorRule()); } 
	 EOF 
;

// Rule AdditiveOperator
ruleAdditiveOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
(rule__AdditiveOperator__Alternatives)
{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpressionPart
entryRuleMultiplicativeExpressionPart 
:
{ before(grammarAccess.getMultiplicativeExpressionPartRule()); }
	 ruleMultiplicativeExpressionPart
{ after(grammarAccess.getMultiplicativeExpressionPartRule()); } 
	 EOF 
;

// Rule MultiplicativeExpressionPart
ruleMultiplicativeExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getGroup()); }
(rule__MultiplicativeExpressionPart__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator 
:
{ before(grammarAccess.getMultiplicativeOperatorRule()); }
	 ruleMultiplicativeOperator
{ after(grammarAccess.getMultiplicativeOperatorRule()); } 
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
(rule__MultiplicativeOperator__Alternatives)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator 
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixExpression
entryRulePostfixExpression 
:
{ before(grammarAccess.getPostfixExpressionRule()); }
	 rulePostfixExpression
{ after(grammarAccess.getPostfixExpressionRule()); } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostfixExpressionAccess().getLeftAssignment()); }
(rule__PostfixExpression__LeftAssignment)
{ after(grammarAccess.getPostfixExpressionAccess().getLeftAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionOrQualifiedExecution
entryRuleExpressionOrQualifiedExecution 
:
{ before(grammarAccess.getExpressionOrQualifiedExecutionRule()); }
	 ruleExpressionOrQualifiedExecution
{ after(grammarAccess.getExpressionOrQualifiedExecutionRule()); } 
	 EOF 
;

// Rule ExpressionOrQualifiedExecution
ruleExpressionOrQualifiedExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup()); }
(rule__ExpressionOrQualifiedExecution__Group__0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnqualifiedExecution
entryRuleUnqualifiedExecution 
:
{ before(grammarAccess.getUnqualifiedExecutionRule()); }
	 ruleUnqualifiedExecution
{ after(grammarAccess.getUnqualifiedExecutionRule()); } 
	 EOF 
;

// Rule UnqualifiedExecution
ruleUnqualifiedExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getGroup()); }
(rule__UnqualifiedExecution__Group__0)
{ after(grammarAccess.getUnqualifiedExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSuperExecution
entryRuleSuperExecution 
:
{ before(grammarAccess.getSuperExecutionRule()); }
	 ruleSuperExecution
{ after(grammarAccess.getSuperExecutionRule()); } 
	 EOF 
;

// Rule SuperExecution
ruleSuperExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSuperExecutionAccess().getGroup()); }
(rule__SuperExecution__Group__0)
{ after(grammarAccess.getSuperExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstructorExecution
entryRuleConstructorExecution 
:
{ before(grammarAccess.getConstructorExecutionRule()); }
	 ruleConstructorExecution
{ after(grammarAccess.getConstructorExecutionRule()); } 
	 EOF 
;

// Rule ConstructorExecution
ruleConstructorExecution
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructorExecutionAccess().getGroup()); }
(rule__ConstructorExecution__Group__0)
{ after(grammarAccess.getConstructorExecutionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubCall
entryRuleSubCall 
:
{ before(grammarAccess.getSubCallRule()); }
	 ruleSubCall
{ after(grammarAccess.getSubCallRule()); } 
	 EOF 
;

// Rule SubCall
ruleSubCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubCallAccess().getAlternatives()); }
(rule__SubCall__Alternatives)
{ after(grammarAccess.getSubCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarator
entryRuleDeclarator 
:
{ before(grammarAccess.getDeclaratorRule()); }
	 ruleDeclarator
{ after(grammarAccess.getDeclaratorRule()); } 
	 EOF 
;

// Rule Declarator
ruleDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaratorAccess().getGroup()); }
(rule__Declarator__Group__0)
{ after(grammarAccess.getDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationUnit
entryRuleDeclarationUnit 
:
{ before(grammarAccess.getDeclarationUnitRule()); }
	 ruleDeclarationUnit
{ after(grammarAccess.getDeclarationUnitRule()); } 
	 EOF 
;

// Rule DeclarationUnit
ruleDeclarationUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationUnitAccess().getGroup()); }
(rule__DeclarationUnit__Group__0)
{ after(grammarAccess.getDeclarationUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotationDeclarations
entryRuleAnnotationDeclarations 
:
{ before(grammarAccess.getAnnotationDeclarationsRule()); }
	 ruleAnnotationDeclarations
{ after(grammarAccess.getAnnotationDeclarationsRule()); } 
	 EOF 
;

// Rule AnnotationDeclarations
ruleAnnotationDeclarations
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getGroup()); }
(rule__AnnotationDeclarations__Group__0)
{ after(grammarAccess.getAnnotationDeclarationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCall
entryRuleCall 
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallAccess().getGroup()); }
(rule__Call__Group__0)
{ after(grammarAccess.getCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgumentList
entryRuleArgumentList 
:
{ before(grammarAccess.getArgumentListRule()); }
	 ruleArgumentList
{ after(grammarAccess.getArgumentListRule()); } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentListAccess().getGroup()); }
(rule__ArgumentList__Group__0)
{ after(grammarAccess.getArgumentListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedArgument
entryRuleNamedArgument 
:
{ before(grammarAccess.getNamedArgumentRule()); }
	 ruleNamedArgument
{ after(grammarAccess.getNamedArgumentRule()); } 
	 EOF 
;

// Rule NamedArgument
ruleNamedArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedArgumentAccess().getGroup()); }
(rule__NamedArgument__Group__0)
{ after(grammarAccess.getNamedArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedPrefix
entryRuleQualifiedPrefix 
:
{ before(grammarAccess.getQualifiedPrefixRule()); }
	 ruleQualifiedPrefix
{ after(grammarAccess.getQualifiedPrefixRule()); } 
	 EOF 
;

// Rule QualifiedPrefix
ruleQualifiedPrefix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getGroup()); }
(rule__QualifiedPrefix__Group__0)
{ after(grammarAccess.getQualifiedPrefixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getAlternatives()); }
(rule__Constant__Alternatives)
{ after(grammarAccess.getConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumValue
entryRuleNumValue 
:
{ before(grammarAccess.getNumValueRule()); }
	 ruleNumValue
{ after(grammarAccess.getNumValueRule()); } 
	 EOF 
;

// Rule NumValue
ruleNumValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumValueAccess().getValAssignment()); }
(rule__NumValue__ValAssignment)
{ after(grammarAccess.getNumValueAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifier
entryRuleIdentifier 
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifierAccess().getAlternatives()); }
(rule__Identifier__Alternatives)
{ after(grammarAccess.getIdentifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeParameters
entryRuleTypeParameters 
:
{ before(grammarAccess.getTypeParametersRule()); }
	 ruleTypeParameters
{ after(grammarAccess.getTypeParametersRule()); } 
	 EOF 
;

// Rule TypeParameters
ruleTypeParameters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParametersAccess().getGroup()); }
(rule__TypeParameters__Group__0)
{ after(grammarAccess.getTypeParametersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContainerInitializer
entryRuleContainerInitializer 
:
{ before(grammarAccess.getContainerInitializerRule()); }
	 ruleContainerInitializer
{ after(grammarAccess.getContainerInitializerRule()); } 
	 EOF 
;

// Rule ContainerInitializer
ruleContainerInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContainerInitializerAccess().getGroup()); }
(rule__ContainerInitializer__Group__0)
{ after(grammarAccess.getContainerInitializerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContainerInitializerExpression
entryRuleContainerInitializerExpression 
:
{ before(grammarAccess.getContainerInitializerExpressionRule()); }
	 ruleContainerInitializerExpression
{ after(grammarAccess.getContainerInitializerExpressionRule()); } 
	 EOF 
;

// Rule ContainerInitializerExpression
ruleContainerInitializerExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getAlternatives()); }
(rule__ContainerInitializerExpression__Alternatives)
{ after(grammarAccess.getContainerInitializerExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__LanguageUnit__Alternatives_13
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getElementsAssignment_13_0()); }
(rule__LanguageUnit__ElementsAssignment_13_0)
{ after(grammarAccess.getLanguageUnitAccess().getElementsAssignment_13_0()); }
)

    |(
{ before(grammarAccess.getLanguageUnitAccess().getElementsAssignment_13_1()); }
(rule__LanguageUnit__ElementsAssignment_13_1)
{ after(grammarAccess.getLanguageUnitAccess().getElementsAssignment_13_1()); }
)

    |(
{ before(grammarAccess.getLanguageUnitAccess().getElementsAssignment_13_2()); }
(rule__LanguageUnit__ElementsAssignment_13_2)
{ after(grammarAccess.getLanguageUnitAccess().getElementsAssignment_13_2()); }
)

    |(
{ before(grammarAccess.getLanguageUnitAccess().getElementsAssignment_13_3()); }
(rule__LanguageUnit__ElementsAssignment_13_3)
{ after(grammarAccess.getLanguageUnitAccess().getElementsAssignment_13_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HintedExpression__HintAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHintedExpressionAccess().getHintIDTerminalRuleCall_1_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getHintedExpressionAccess().getHintIDTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getHintedExpressionAccess().getHintLessThanSignKeyword_1_1_0_1()); }

	'<' 

{ after(grammarAccess.getHintedExpressionAccess().getHintLessThanSignKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHintPart__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintPartAccess().getValueAssignment_2_0()); }
(rule__FormattingHintPart__ValueAssignment_2_0)
{ after(grammarAccess.getFormattingHintPartAccess().getValueAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getFormattingHintPartAccess().getNumValueAssignment_2_1()); }
(rule__FormattingHintPart__NumValueAssignment_2_1)
{ after(grammarAccess.getFormattingHintPartAccess().getNumValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getVarAssignment_0()); }
(rule__Stmt__VarAssignment_0)
{ after(grammarAccess.getStmtAccess().getVarAssignment_0()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getAltAssignment_1()); }
(rule__Stmt__AltAssignment_1)
{ after(grammarAccess.getStmtAccess().getAltAssignment_1()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getSwitchAssignment_2()); }
(rule__Stmt__SwitchAssignment_2)
{ after(grammarAccess.getStmtAccess().getSwitchAssignment_2()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getMultiAssignment_3()); }
(rule__Stmt__MultiAssignment_3)
{ after(grammarAccess.getStmtAccess().getMultiAssignment_3()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getLoopAssignment_4()); }
(rule__Stmt__LoopAssignment_4)
{ after(grammarAccess.getStmtAccess().getLoopAssignment_4()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getWhileAssignment_5()); }
(rule__Stmt__WhileAssignment_5)
{ after(grammarAccess.getStmtAccess().getWhileAssignment_5()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getExprStmtAssignment_6()); }
(rule__Stmt__ExprStmtAssignment_6)
{ after(grammarAccess.getStmtAccess().getExprStmtAssignment_6()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getCtnAssignment_7()); }
(rule__Stmt__CtnAssignment_7)
{ after(grammarAccess.getStmtAccess().getCtnAssignment_7()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getFlushAssignment_8()); }
(rule__Stmt__FlushAssignment_8)
{ after(grammarAccess.getStmtAccess().getFlushAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getIfAssignment_4_0()); }
(rule__Alternative__IfAssignment_4_0)
{ after(grammarAccess.getAlternativeAccess().getIfAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getAlternativeAccess().getIfBlockAssignment_4_1()); }
(rule__Alternative__IfBlockAssignment_4_1)
{ after(grammarAccess.getAlternativeAccess().getIfBlockAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Alternatives_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getElseAssignment_5_1_0()); }
(rule__Alternative__ElseAssignment_5_1_0)
{ after(grammarAccess.getAlternativeAccess().getElseAssignment_5_1_0()); }
)

    |(
{ before(grammarAccess.getAlternativeAccess().getElseBlockAssignment_5_1_1()); }
(rule__Alternative__ElseBlockAssignment_5_1_1)
{ after(grammarAccess.getAlternativeAccess().getElseBlockAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Alternatives_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getStmtAssignment_8_0()); }
(rule__Loop__StmtAssignment_8_0)
{ after(grammarAccess.getLoopAccess().getStmtAssignment_8_0()); }
)

    |(
{ before(grammarAccess.getLoopAccess().getBlockAssignment_8_1()); }
(rule__Loop__BlockAssignment_8_1)
{ after(grammarAccess.getLoopAccess().getBlockAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getStmtAssignment_4_0()); }
(rule__While__StmtAssignment_4_0)
{ after(grammarAccess.getWhileAccess().getStmtAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getWhileAccess().getBlockAssignment_4_1()); }
(rule__While__BlockAssignment_4_1)
{ after(grammarAccess.getWhileAccess().getBlockAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiselect__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiselectAccess().getGenAssignment_0()); }
(rule__Multiselect__GenAssignment_0)
{ after(grammarAccess.getMultiselectAccess().getGenAssignment_0()); }
)

    |(
{ before(grammarAccess.getMultiselectAccess().getUserAssignment_1()); }
(rule__Multiselect__UserAssignment_1)
{ after(grammarAccess.getMultiselectAccess().getUserAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getImportAccess().getInsertAssignment_0_1()); }
(rule__Import__InsertAssignment_0_1)
{ after(grammarAccess.getImportAccess().getInsertAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprAssignment_0()); }
(rule__Expression__ExprAssignment_0)
{ after(grammarAccess.getExpressionAccess().getExprAssignment_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getInitAssignment_1()); }
(rule__Expression__InitAssignment_1)
{ after(grammarAccess.getExpressionAccess().getInitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); }

	'and' 

{ after(grammarAccess.getLogicalOperatorAccess().getAndKeyword_0()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); }

	'or' 

{ after(grammarAccess.getLogicalOperatorAccess().getOrKeyword_1()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getXorKeyword_2()); }

	'xor' 

{ after(grammarAccess.getLogicalOperatorAccess().getXorKeyword_2()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getImpliesKeyword_3()); }

	'implies' 

{ after(grammarAccess.getLogicalOperatorAccess().getImpliesKeyword_3()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getIffKeyword_4()); }

	'iff' 

{ after(grammarAccess.getLogicalOperatorAccess().getIffKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getEqualityOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getEqualityOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }

	'<>' 

{ after(grammarAccess.getEqualityOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2()); }

	'!=' 

{ after(grammarAccess.getEqualityOperatorAccess().getExclamationMarkEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); }

	'>' 

{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }

	'>=' 

{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }

	'<=' 

{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getAdditiveOperatorAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getAdditiveOperatorAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeOperatorAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeOperatorAccess().getSolidusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getNotKeyword_0()); }

	'not' 

{ after(grammarAccess.getUnaryOperatorAccess().getNotKeyword_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_1()); }

	'!' 

{ after(grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_2()); }

	'-' 

{ after(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOtherExAssignment_0()); }
(rule__PrimaryExpression__OtherExAssignment_0)
{ after(grammarAccess.getPrimaryExpressionAccess().getOtherExAssignment_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnqExAssignment_1()); }
(rule__PrimaryExpression__UnqExAssignment_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getUnqExAssignment_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getSuperExAssignment_2()); }
(rule__PrimaryExpression__SuperExAssignment_2)
{ after(grammarAccess.getPrimaryExpressionAccess().getSuperExAssignment_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNewExAssignment_3()); }
(rule__PrimaryExpression__NewExAssignment_3)
{ after(grammarAccess.getPrimaryExpressionAccess().getNewExAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValAssignment_0_0()); }
(rule__ExpressionOrQualifiedExecution__ValAssignment_0_0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup_0_1()); }
(rule__ExpressionOrQualifiedExecution__Group_0_1__0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getGroup_0()); }
(rule__SubCall__Group_0__0)
{ after(grammarAccess.getSubCallAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSubCallAccess().getGroup_1()); }
(rule__SubCall__Group_1__0)
{ after(grammarAccess.getSubCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__TypeAlternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getTypeFullStopKeyword_0_0_0_0()); }

	'.' 

{ after(grammarAccess.getSubCallAccess().getTypeFullStopKeyword_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getSubCallAccess().getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1()); }

	'->' 

{ after(grammarAccess.getSubCallAccess().getTypeHyphenMinusGreaterThanSignKeyword_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNValueAssignment_0()); }
(rule__Constant__NValueAssignment_0)
{ after(grammarAccess.getConstantAccess().getNValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getSValueAssignment_1()); }
(rule__Constant__SValueAssignment_1)
{ after(grammarAccess.getConstantAccess().getSValueAssignment_1()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getQValueAssignment_2()); }
(rule__Constant__QValueAssignment_2)
{ after(grammarAccess.getConstantAccess().getQValueAssignment_2()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getBValueAssignment_3()); }
(rule__Constant__BValueAssignment_3)
{ after(grammarAccess.getConstantAccess().getBValueAssignment_3()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getNullAssignment_4()); }
(rule__Constant__NullAssignment_4)
{ after(grammarAccess.getConstantAccess().getNullAssignment_4()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getVersionAssignment_5()); }
(rule__Constant__VersionAssignment_5)
{ after(grammarAccess.getConstantAccess().getVersionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__BValueAlternatives_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getBValueTrueKeyword_3_0_0()); }

	'true' 

{ after(grammarAccess.getConstantAccess().getBValueTrueKeyword_3_0_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getBValueFalseKeyword_3_0_1()); }

	'false' 

{ after(grammarAccess.getConstantAccess().getBValueFalseKeyword_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getVERSIONTerminalRuleCall_1()); }
	RULE_VERSION
{ after(grammarAccess.getIdentifierAccess().getVERSIONTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getEXPONENTTerminalRuleCall_2()); }
	RULE_EXPONENT
{ after(grammarAccess.getIdentifierAccess().getEXPONENTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getVersionKeyword_3()); }

	'version' 

{ after(grammarAccess.getIdentifierAccess().getVersionKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameAssignment_0()); }
(rule__Type__NameAssignment_0)
{ after(grammarAccess.getTypeAccess().getNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_1()); }
(rule__Type__Group_1__0)
{ after(grammarAccess.getTypeAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_2()); }
(rule__Type__Group_2__0)
{ after(grammarAccess.getTypeAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_3()); }
(rule__Type__Group_3__0)
{ after(grammarAccess.getTypeAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getGroup_4()); }
(rule__Type__Group_4__0)
{ after(grammarAccess.getTypeAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializerExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getLogicalAssignment_0()); }
(rule__ContainerInitializerExpression__LogicalAssignment_0)
{ after(grammarAccess.getContainerInitializerExpressionAccess().getLogicalAssignment_0()); }
)

    |(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getContainerAssignment_1()); }
(rule__ContainerInitializerExpression__ContainerAssignment_1)
{ after(grammarAccess.getContainerInitializerExpressionAccess().getContainerAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__LanguageUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__0__Impl
	rule__LanguageUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getImportsAssignment_0()); }
(rule__LanguageUnit__ImportsAssignment_0)*
{ after(grammarAccess.getLanguageUnitAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__1__Impl
	rule__LanguageUnit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getJavaExtsAssignment_1()); }
(rule__LanguageUnit__JavaExtsAssignment_1)*
{ after(grammarAccess.getLanguageUnitAccess().getJavaExtsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__2__Impl
	rule__LanguageUnit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getAdvicesAssignment_2()); }
(rule__LanguageUnit__AdvicesAssignment_2)*
{ after(grammarAccess.getLanguageUnitAccess().getAdvicesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__3__Impl
	rule__LanguageUnit__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getIndentAssignment_3()); }
(rule__LanguageUnit__IndentAssignment_3)?
{ after(grammarAccess.getLanguageUnitAccess().getIndentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__4__Impl
	rule__LanguageUnit__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getFormattingAssignment_4()); }
(rule__LanguageUnit__FormattingAssignment_4)?
{ after(grammarAccess.getLanguageUnitAccess().getFormattingAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__5__Impl
	rule__LanguageUnit__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getTemplateKeyword_5()); }

	'template' 

{ after(grammarAccess.getLanguageUnitAccess().getTemplateKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__6__Impl
	rule__LanguageUnit__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getNameAssignment_6()); }
(rule__LanguageUnit__NameAssignment_6)
{ after(grammarAccess.getLanguageUnitAccess().getNameAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__7__Impl
	rule__LanguageUnit__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getLeftParenthesisKeyword_7()); }

	'(' 

{ after(grammarAccess.getLanguageUnitAccess().getLeftParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__8__Impl
	rule__LanguageUnit__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getParamAssignment_8()); }
(rule__LanguageUnit__ParamAssignment_8)?
{ after(grammarAccess.getLanguageUnitAccess().getParamAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__9__Impl
	rule__LanguageUnit__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getRightParenthesisKeyword_9()); }

	')' 

{ after(grammarAccess.getLanguageUnitAccess().getRightParenthesisKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__10__Impl
	rule__LanguageUnit__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getGroup_10()); }
(rule__LanguageUnit__Group_10__0)?
{ after(grammarAccess.getLanguageUnitAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__11__Impl
	rule__LanguageUnit__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getLeftCurlyBracketKeyword_11()); }

	'{' 

{ after(grammarAccess.getLanguageUnitAccess().getLeftCurlyBracketKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__12__Impl
	rule__LanguageUnit__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getVersionAssignment_12()); }
(rule__LanguageUnit__VersionAssignment_12)?
{ after(grammarAccess.getLanguageUnitAccess().getVersionAssignment_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__13__Impl
	rule__LanguageUnit__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getAlternatives_13()); }
(rule__LanguageUnit__Alternatives_13)*
{ after(grammarAccess.getLanguageUnitAccess().getAlternatives_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group__14__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getRightCurlyBracketKeyword_14()); }

	'}' 

{ after(grammarAccess.getLanguageUnitAccess().getRightCurlyBracketKeyword_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}
































rule__LanguageUnit__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group_10__0__Impl
	rule__LanguageUnit__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getExtendsKeyword_10_0()); }

	'extends' 

{ after(grammarAccess.getLanguageUnitAccess().getExtendsKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageUnit__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LanguageUnit__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getExtAssignment_10_1()); }
(rule__LanguageUnit__ExtAssignment_10_1)
{ after(grammarAccess.getLanguageUnitAccess().getExtAssignment_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HintedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HintedExpression__Group__0__Impl
	rule__HintedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HintedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHintedExpressionAccess().getExAssignment_0()); }
(rule__HintedExpression__ExAssignment_0)
{ after(grammarAccess.getHintedExpressionAccess().getExAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HintedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HintedExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HintedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHintedExpressionAccess().getGroup_1()); }
(rule__HintedExpression__Group_1__0)?
{ after(grammarAccess.getHintedExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HintedExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HintedExpression__Group_1__0__Impl
	rule__HintedExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HintedExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHintedExpressionAccess().getVerticalLineKeyword_1_0()); }

	'|' 

{ after(grammarAccess.getHintedExpressionAccess().getVerticalLineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HintedExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HintedExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HintedExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHintedExpressionAccess().getHintAssignment_1_1()); }
(rule__HintedExpression__HintAssignment_1_1)
{ after(grammarAccess.getHintedExpressionAccess().getHintAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IndentationHint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHint__Group__0__Impl
	rule__IndentationHint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintAccess().getIndentKeyword_0()); }

	'@indent' 

{ after(grammarAccess.getIndentationHintAccess().getIndentKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndentationHint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHint__Group__1__Impl
	rule__IndentationHint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIndentationHintAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndentationHint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHint__Group__2__Impl
	rule__IndentationHint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintAccess().getPartsAssignment_2()); }
(rule__IndentationHint__PartsAssignment_2)
{ after(grammarAccess.getIndentationHintAccess().getPartsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndentationHint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHint__Group__3__Impl
	rule__IndentationHint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintAccess().getGroup_3()); }
(rule__IndentationHint__Group_3__0)*
{ after(grammarAccess.getIndentationHintAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndentationHint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHint__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getIndentationHintAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IndentationHint__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHint__Group_3__0__Impl
	rule__IndentationHint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHint__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getIndentationHintAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndentationHint__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHint__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintAccess().getPartsAssignment_3_1()); }
(rule__IndentationHint__PartsAssignment_3_1)
{ after(grammarAccess.getIndentationHintAccess().getPartsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IndentationHintPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHintPart__Group__0__Impl
	rule__IndentationHintPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHintPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintPartAccess().getNameAssignment_0()); }
(rule__IndentationHintPart__NameAssignment_0)
{ after(grammarAccess.getIndentationHintPartAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndentationHintPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHintPart__Group__1__Impl
	rule__IndentationHintPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHintPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintPartAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getIndentationHintPartAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndentationHintPart__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndentationHintPart__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHintPart__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintPartAccess().getValueAssignment_2()); }
(rule__IndentationHintPart__ValueAssignment_2)
{ after(grammarAccess.getIndentationHintPartAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FormattingHint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHint__Group__0__Impl
	rule__FormattingHint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintAccess().getFormatKeyword_0()); }

	'@format' 

{ after(grammarAccess.getFormattingHintAccess().getFormatKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormattingHint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHint__Group__1__Impl
	rule__FormattingHint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFormattingHintAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormattingHint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHint__Group__2__Impl
	rule__FormattingHint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintAccess().getPartsAssignment_2()); }
(rule__FormattingHint__PartsAssignment_2)
{ after(grammarAccess.getFormattingHintAccess().getPartsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormattingHint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHint__Group__3__Impl
	rule__FormattingHint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintAccess().getGroup_3()); }
(rule__FormattingHint__Group_3__0)*
{ after(grammarAccess.getFormattingHintAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormattingHint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHint__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFormattingHintAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FormattingHint__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHint__Group_3__0__Impl
	rule__FormattingHint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHint__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getFormattingHintAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormattingHint__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHint__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintAccess().getPartsAssignment_3_1()); }
(rule__FormattingHint__PartsAssignment_3_1)
{ after(grammarAccess.getFormattingHintAccess().getPartsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormattingHintPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHintPart__Group__0__Impl
	rule__FormattingHintPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHintPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintPartAccess().getNameAssignment_0()); }
(rule__FormattingHintPart__NameAssignment_0)
{ after(grammarAccess.getFormattingHintPartAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormattingHintPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHintPart__Group__1__Impl
	rule__FormattingHintPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHintPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintPartAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getFormattingHintPartAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormattingHintPart__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormattingHintPart__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHintPart__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintPartAccess().getAlternatives_2()); }
(rule__FormattingHintPart__Alternatives_2)
{ after(grammarAccess.getFormattingHintPartAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VilDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__0__Impl
	rule__VilDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getAnnotationsAssignment_0()); }
(rule__VilDef__AnnotationsAssignment_0)?
{ after(grammarAccess.getVilDefAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VilDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__1__Impl
	rule__VilDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getProtectedAssignment_1()); }
(rule__VilDef__ProtectedAssignment_1)?
{ after(grammarAccess.getVilDefAccess().getProtectedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VilDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__2__Impl
	rule__VilDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getDefKeyword_2()); }

	'def' 

{ after(grammarAccess.getVilDefAccess().getDefKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VilDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__3__Impl
	rule__VilDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getTypeAssignment_3()); }
(rule__VilDef__TypeAssignment_3)?
{ after(grammarAccess.getVilDefAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VilDef__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__4__Impl
	rule__VilDef__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getIdAssignment_4()); }
(rule__VilDef__IdAssignment_4)
{ after(grammarAccess.getVilDefAccess().getIdAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VilDef__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__5__Impl
	rule__VilDef__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getLeftParenthesisKeyword_5()); }

	'(' 

{ after(grammarAccess.getVilDefAccess().getLeftParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VilDef__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__6__Impl
	rule__VilDef__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getParamAssignment_6()); }
(rule__VilDef__ParamAssignment_6)?
{ after(grammarAccess.getVilDefAccess().getParamAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VilDef__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__7__Impl
	rule__VilDef__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getVilDefAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VilDef__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__8__Impl
	rule__VilDef__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getStmtsAssignment_8()); }
(rule__VilDef__StmtsAssignment_8)
{ after(grammarAccess.getVilDefAccess().getStmtsAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VilDef__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VilDef__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getSemicolonKeyword_9()); }
(
	';' 
)?
{ after(grammarAccess.getVilDefAccess().getSemicolonKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__StmtBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StmtBlock__Group__0__Impl
	rule__StmtBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StmtBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtBlockAccess().getStmtBlockAction_0()); }
(

)
{ after(grammarAccess.getStmtBlockAccess().getStmtBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StmtBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StmtBlock__Group__1__Impl
	rule__StmtBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StmtBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getStmtBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StmtBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StmtBlock__Group__2__Impl
	rule__StmtBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StmtBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtBlockAccess().getStmtsAssignment_2()); }
(rule__StmtBlock__StmtsAssignment_2)*
{ after(grammarAccess.getStmtBlockAccess().getStmtsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StmtBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StmtBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StmtBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getStmtBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Alternative__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__0__Impl
	rule__Alternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getAlternativeAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__1__Impl
	rule__Alternative__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAlternativeAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__2__Impl
	rule__Alternative__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getExprAssignment_2()); }
(rule__Alternative__ExprAssignment_2)
{ after(grammarAccess.getAlternativeAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__3__Impl
	rule__Alternative__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAlternativeAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__4__Impl
	rule__Alternative__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getAlternatives_4()); }
(rule__Alternative__Alternatives_4)
{ after(grammarAccess.getAlternativeAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getGroup_5()); }
(rule__Alternative__Group_5__0)?
{ after(grammarAccess.getAlternativeAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Alternative__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group_5__0__Impl
	rule__Alternative__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getElseKeyword_5_0()); }
(
	'else' 
)
{ after(grammarAccess.getAlternativeAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getAlternatives_5_1()); }
(rule__Alternative__Alternatives_5_1)
{ after(grammarAccess.getAlternativeAccess().getAlternatives_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Content__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Content__Group__0__Impl
	rule__Content__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getCtnAssignment_0()); }
(rule__Content__CtnAssignment_0)
{ after(grammarAccess.getContentAccess().getCtnAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Content__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Content__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getGroup_1()); }
(rule__Content__Group_1__0)?
{ after(grammarAccess.getContentAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Content__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Content__Group_1__0__Impl
	rule__Content__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getGroup_1_0()); }
(rule__Content__Group_1_0__0)?
{ after(grammarAccess.getContentAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Content__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Content__Group_1__1__Impl
	rule__Content__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getGroup_1_1()); }
(rule__Content__Group_1_1__0)?
{ after(grammarAccess.getContentAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Content__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Content__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getSemicolonKeyword_1_2()); }

	';' 

{ after(grammarAccess.getContentAccess().getSemicolonKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Content__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Content__Group_1_0__0__Impl
	rule__Content__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getNoCRAssignment_1_0_0()); }
(rule__Content__NoCRAssignment_1_0_0)?
{ after(grammarAccess.getContentAccess().getNoCRAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Content__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Content__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getCRAssignment_1_0_1()); }
(rule__Content__CRAssignment_1_0_1)
{ after(grammarAccess.getContentAccess().getCRAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Content__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Content__Group_1_1__0__Impl
	rule__Content__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getVerticalLineKeyword_1_1_0()); }

	'|' 

{ after(grammarAccess.getContentAccess().getVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Content__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Content__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getIndentAssignment_1_1_1()); }
(rule__Content__IndentAssignment_1_1_1)
{ after(grammarAccess.getContentAccess().getIndentAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Switch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__0__Impl
	rule__Switch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getSwitchKeyword_0()); }

	'switch' 

{ after(grammarAccess.getSwitchAccess().getSwitchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__1__Impl
	rule__Switch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSwitchAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__2__Impl
	rule__Switch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getExprAssignment_2()); }
(rule__Switch__ExprAssignment_2)
{ after(grammarAccess.getSwitchAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__3__Impl
	rule__Switch__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getSwitchAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__4__Impl
	rule__Switch__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getSwitchAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__5__Impl
	rule__Switch__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getGroup_5()); }
(rule__Switch__Group_5__0)
{ after(grammarAccess.getSwitchAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getSwitchAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Switch__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group_5__0__Impl
	rule__Switch__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getPartsAssignment_5_0()); }
(rule__Switch__PartsAssignment_5_0)
{ after(grammarAccess.getSwitchAccess().getPartsAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group_5__1__Impl
	rule__Switch__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getGroup_5_1()); }
(rule__Switch__Group_5_1__0)*
{ after(grammarAccess.getSwitchAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getGroup_5_2()); }
(rule__Switch__Group_5_2__0)?
{ after(grammarAccess.getSwitchAccess().getGroup_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Switch__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group_5_1__0__Impl
	rule__Switch__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getCommaKeyword_5_1_0()); }

	',' 

{ after(grammarAccess.getSwitchAccess().getCommaKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getPartsAssignment_5_1_1()); }
(rule__Switch__PartsAssignment_5_1_1)
{ after(grammarAccess.getSwitchAccess().getPartsAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Switch__Group_5_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group_5_2__0__Impl
	rule__Switch__Group_5_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group_5_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getCommaKeyword_5_2_0()); }

	',' 

{ after(grammarAccess.getSwitchAccess().getCommaKeyword_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group_5_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group_5_2__1__Impl
	rule__Switch__Group_5_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group_5_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getDefaultKeyword_5_2_1()); }

	'default' 

{ after(grammarAccess.getSwitchAccess().getDefaultKeyword_5_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group_5_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group_5_2__2__Impl
	rule__Switch__Group_5_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group_5_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getColonKeyword_5_2_2()); }

	':' 

{ after(grammarAccess.getSwitchAccess().getColonKeyword_5_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group_5_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group_5_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group_5_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getDfltAssignment_5_2_3()); }
(rule__Switch__DfltAssignment_5_2_3)
{ after(grammarAccess.getSwitchAccess().getDfltAssignment_5_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SwitchPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchPart__Group__0__Impl
	rule__SwitchPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchPartAccess().getLeftAssignment_0()); }
(rule__SwitchPart__LeftAssignment_0)
{ after(grammarAccess.getSwitchPartAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchPart__Group__1__Impl
	rule__SwitchPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchPartAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getSwitchPartAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchPart__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchPart__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchPart__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchPartAccess().getRightAssignment_2()); }
(rule__SwitchPart__RightAssignment_2)
{ after(grammarAccess.getSwitchPartAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Loop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getLoopAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getTypeAssignment_2()); }
(rule__Loop__TypeAssignment_2)
{ after(grammarAccess.getLoopAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getIdAssignment_3()); }
(rule__Loop__IdAssignment_3)
{ after(grammarAccess.getLoopAccess().getIdAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__4__Impl
	rule__Loop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getColonKeyword_4()); }

	':' 

{ after(grammarAccess.getLoopAccess().getColonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__5__Impl
	rule__Loop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getExprAssignment_5()); }
(rule__Loop__ExprAssignment_5)
{ after(grammarAccess.getLoopAccess().getExprAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__6__Impl
	rule__Loop__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getGroup_6()); }
(rule__Loop__Group_6__0)?
{ after(grammarAccess.getLoopAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__7__Impl
	rule__Loop__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getLoopAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getAlternatives_8()); }
(rule__Loop__Alternatives_8)
{ after(grammarAccess.getLoopAccess().getAlternatives_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Loop__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group_6__0__Impl
	rule__Loop__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getCommaKeyword_6_0()); }

	',' 

{ after(grammarAccess.getLoopAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group_6__1__Impl
	rule__Loop__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getSeparatorAssignment_6_1()); }
(rule__Loop__SeparatorAssignment_6_1)
{ after(grammarAccess.getLoopAccess().getSeparatorAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getGroup_6_2()); }
(rule__Loop__Group_6_2__0)?
{ after(grammarAccess.getLoopAccess().getGroup_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Loop__Group_6_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group_6_2__0__Impl
	rule__Loop__Group_6_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_6_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getCommaKeyword_6_2_0()); }

	',' 

{ after(grammarAccess.getLoopAccess().getCommaKeyword_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group_6_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group_6_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_6_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getFinalSeparatorAssignment_6_2_1()); }
(rule__Loop__FinalSeparatorAssignment_6_2_1)
{ after(grammarAccess.getLoopAccess().getFinalSeparatorAssignment_6_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__While__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExprAssignment_2()); }
(rule__While__ExprAssignment_2)
{ after(grammarAccess.getWhileAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getAlternatives_4()); }
(rule__While__Alternatives_4)
{ after(grammarAccess.getWhileAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Flush__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Flush__Group__0__Impl
	rule__Flush__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Flush__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlushAccess().getFlushKeyword_0()); }

	'flush' 

{ after(grammarAccess.getFlushAccess().getFlushKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Flush__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Flush__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Flush__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlushAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getFlushAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GenericMultiselect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMultiselect__Group__0__Impl
	rule__GenericMultiselect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMultiselect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMultiselectAccess().getMultiSelectKeyword_0()); }

	'multiSelect' 

{ after(grammarAccess.getGenericMultiselectAccess().getMultiSelectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMultiselect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMultiselect__Group__1__Impl
	rule__GenericMultiselect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMultiselect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMultiselectAccess().getPreambleAssignment_1()); }
(rule__GenericMultiselect__PreambleAssignment_1)
{ after(grammarAccess.getGenericMultiselectAccess().getPreambleAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMultiselect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMultiselect__Group__2__Impl
	rule__GenericMultiselect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMultiselect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMultiselectAccess().getSelectorAssignment_2()); }
(rule__GenericMultiselect__SelectorAssignment_2)
{ after(grammarAccess.getGenericMultiselectAccess().getSelectorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMultiselect__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMultiselect__Group__3__Impl
	rule__GenericMultiselect__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMultiselect__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getGenericMultiselectAccess().getPartAssignment_3()); }
(rule__GenericMultiselect__PartAssignment_3)
{ after(grammarAccess.getGenericMultiselectAccess().getPartAssignment_3()); }
)
(
{ before(grammarAccess.getGenericMultiselectAccess().getPartAssignment_3()); }
(rule__GenericMultiselect__PartAssignment_3)*
{ after(grammarAccess.getGenericMultiselectAccess().getPartAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMultiselect__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMultiselect__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMultiselect__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMultiselectAccess().getTrailerAssignment_4()); }
(rule__GenericMultiselect__TrailerAssignment_4)
{ after(grammarAccess.getGenericMultiselectAccess().getTrailerAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MultiSelectPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiSelectPart__Group__0__Impl
	rule__MultiSelectPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiSelectPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiSelectPartAccess().getCaseKeyword_0()); }

	'case' 

{ after(grammarAccess.getMultiSelectPartAccess().getCaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiSelectPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiSelectPart__Group__1__Impl
	rule__MultiSelectPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiSelectPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiSelectPartAccess().getCaseAssignment_1()); }
(rule__MultiSelectPart__CaseAssignment_1)
{ after(grammarAccess.getMultiSelectPartAccess().getCaseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiSelectPart__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiSelectPart__Group__2__Impl
	rule__MultiSelectPart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiSelectPart__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiSelectPartAccess().getCodeAssignment_2()); }
(rule__MultiSelectPart__CodeAssignment_2)
{ after(grammarAccess.getMultiSelectPartAccess().getCodeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiSelectPart__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiSelectPart__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiSelectPart__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiSelectPartAccess().getSelectorAssignment_3()); }
(rule__MultiSelectPart__SelectorAssignment_3)
{ after(grammarAccess.getMultiSelectPartAccess().getSelectorAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UserMultiselect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMultiselect__Group__0__Impl
	rule__UserMultiselect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMultiselect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMultiselectAccess().getIdAssignment_0()); }
(rule__UserMultiselect__IdAssignment_0)
{ after(grammarAccess.getUserMultiselectAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMultiselect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMultiselect__Group__1__Impl
	rule__UserMultiselect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMultiselect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMultiselectAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getUserMultiselectAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMultiselect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMultiselect__Group__2__Impl
	rule__UserMultiselect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMultiselect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMultiselectAccess().getGenericMultiSelectKeyword_2()); }

	'generic-multiSelect' 

{ after(grammarAccess.getUserMultiselectAccess().getGenericMultiSelectKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMultiselect__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMultiselect__Group__3__Impl
	rule__UserMultiselect__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMultiselect__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMultiselectAccess().getStmtAssignment_3()); }
(rule__UserMultiselect__StmtAssignment_3)
{ after(grammarAccess.getUserMultiselectAccess().getStmtAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMultiselect__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMultiselect__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMultiselect__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMultiselectAccess().getSemicolonKeyword_4()); }
(
	';' 
)?
{ after(grammarAccess.getUserMultiselectAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Extension__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Extension__Group__0__Impl
	rule__Extension__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtensionAccess().getExtensionKeyword_0()); }

	'extension' 

{ after(grammarAccess.getExtensionAccess().getExtensionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Extension__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Extension__Group__1__Impl
	rule__Extension__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtensionAccess().getNameAssignment_1()); }
(rule__Extension__NameAssignment_1)
{ after(grammarAccess.getExtensionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Extension__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Extension__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtensionAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getExtensionAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JavaQualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JavaQualifiedName__Group__0__Impl
	rule__JavaQualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaQualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaQualifiedNameAccess().getQnameAssignment_0()); }
(rule__JavaQualifiedName__QnameAssignment_0)
{ after(grammarAccess.getJavaQualifiedNameAccess().getQnameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JavaQualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JavaQualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaQualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaQualifiedNameAccess().getGroup_1()); }
(rule__JavaQualifiedName__Group_1__0)*
{ after(grammarAccess.getJavaQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JavaQualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JavaQualifiedName__Group_1__0__Impl
	rule__JavaQualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaQualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaQualifiedNameAccess().getQnameAssignment_1_0()); }
(rule__JavaQualifiedName__QnameAssignment_1_0)
{ after(grammarAccess.getJavaQualifiedNameAccess().getQnameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JavaQualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JavaQualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JavaQualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaQualifiedNameAccess().getQnameAssignment_1_1()); }
(rule__JavaQualifiedName__QnameAssignment_1_1)
{ after(grammarAccess.getJavaQualifiedNameAccess().getQnameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstAssignment_0()); }
(rule__VariableDeclaration__ConstAssignment_0)?
{ after(grammarAccess.getVariableDeclarationAccess().getConstAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
(rule__VariableDeclaration__TypeAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
(rule__VariableDeclaration__NameAssignment_2)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
	rule__VariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
(rule__VariableDeclaration__Group_3__0)?
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__0__Impl
	rule__VariableDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }

	'=' 

{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
(rule__VariableDeclaration__ExpressionAssignment_3_1)
{ after(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Compound__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__0__Impl
	rule__Compound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getAbstractAssignment_0()); }
(rule__Compound__AbstractAssignment_0)?
{ after(grammarAccess.getCompoundAccess().getAbstractAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__1__Impl
	rule__Compound__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getCompoundKeyword_1()); }

	'compound' 

{ after(grammarAccess.getCompoundAccess().getCompoundKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__2__Impl
	rule__Compound__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getNameAssignment_2()); }
(rule__Compound__NameAssignment_2)
{ after(grammarAccess.getCompoundAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__3__Impl
	rule__Compound__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getGroup_3()); }
(rule__Compound__Group_3__0)?
{ after(grammarAccess.getCompoundAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__4__Impl
	rule__Compound__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getCompoundAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__5__Impl
	rule__Compound__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getVarsAssignment_5()); }
(rule__Compound__VarsAssignment_5)*
{ after(grammarAccess.getCompoundAccess().getVarsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__6__Impl
	rule__Compound__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getCompoundAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getSemicolonKeyword_7()); }
(
	';' 
)?
{ after(grammarAccess.getCompoundAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Compound__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group_3__0__Impl
	rule__Compound__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getRefinesKeyword_3_0()); }

	'refines' 

{ after(grammarAccess.getCompoundAccess().getRefinesKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getSuperAssignment_3_1()); }
(rule__Compound__SuperAssignment_3_1)
{ after(grammarAccess.getCompoundAccess().getSuperAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__0__Impl
	rule__TypeDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getTypedefKeyword_0()); }

	'typedef' 

{ after(grammarAccess.getTypeDefAccess().getTypedefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__1__Impl
	rule__TypeDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getNameAssignment_1()); }
(rule__TypeDef__NameAssignment_1)
{ after(grammarAccess.getTypeDefAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__2__Impl
	rule__TypeDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getTypeAssignment_2()); }
(rule__TypeDef__TypeAssignment_2)
{ after(grammarAccess.getTypeDefAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getTypeDefAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Advice__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__0__Impl
	rule__Advice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getAdviceKeyword_0()); }

	'@advice' 

{ after(grammarAccess.getAdviceAccess().getAdviceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__1__Impl
	rule__Advice__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAdviceAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__2__Impl
	rule__Advice__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getNameAssignment_2()); }
(rule__Advice__NameAssignment_2)
{ after(grammarAccess.getAdviceAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__3__Impl
	rule__Advice__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAdviceAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Advice__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Advice__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getVersionSpecAssignment_4()); }
(rule__Advice__VersionSpecAssignment_4)?
{ after(grammarAccess.getAdviceAccess().getVersionSpecAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VersionSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionSpec__Group__0__Impl
	rule__VersionSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionSpecAccess().getWithKeyword_0()); }

	'with' 

{ after(grammarAccess.getVersionSpecAccess().getWithKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionSpecAccess().getRestrictionAssignment_1()); }
(rule__VersionSpec__RestrictionAssignment_1)
{ after(grammarAccess.getVersionSpecAccess().getRestrictionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamAssignment_0()); }
(rule__ParameterList__ParamAssignment_0)
{ after(grammarAccess.getParameterListAccess().getParamAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getGroup_1()); }
(rule__ParameterList__Group_1__0)*
{ after(grammarAccess.getParameterListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_1__0__Impl
	rule__ParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamAssignment_1_1()); }
(rule__ParameterList__ParamAssignment_1_1)
{ after(grammarAccess.getParameterListAccess().getParamAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_0()); }
(rule__Parameter__TypeAssignment_0)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
(rule__Parameter__NameAssignment_1)
{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_2()); }
(rule__Parameter__Group_2__0)?
{ after(grammarAccess.getParameterAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameter__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_2__0__Impl
	rule__Parameter__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getParameterAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDfltAssignment_2_1()); }
(rule__Parameter__DfltAssignment_2_1)
{ after(grammarAccess.getParameterAccess().getDfltAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VersionStmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionStmt__Group__0__Impl
	rule__VersionStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getVersionKeyword_0()); }

	'version' 

{ after(grammarAccess.getVersionStmtAccess().getVersionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionStmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionStmt__Group__1__Impl
	rule__VersionStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getVersionAssignment_1()); }
(rule__VersionStmt__VersionAssignment_1)
{ after(grammarAccess.getVersionStmtAccess().getVersionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VersionStmt__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VersionStmt__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getVersionStmtAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getAlternatives_0()); }
(rule__Import__Alternatives_0)
{ after(grammarAccess.getImportAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameAssignment_1()); }
(rule__Import__NameAssignment_1)
{ after(grammarAccess.getImportAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getWildcardAssignment_2()); }
(rule__Import__WildcardAssignment_2)?
{ after(grammarAccess.getImportAccess().getWildcardAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__3__Impl
	rule__Import__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getVersionSpecAssignment_3()); }
(rule__Import__VersionSpecAssignment_3)?
{ after(grammarAccess.getImportAccess().getVersionSpecAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getImportAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ExpressionStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__0__Impl
	rule__ExpressionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_0()); }
(rule__ExpressionStatement__Group_0__0)?
{ after(grammarAccess.getExpressionStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__1__Impl
	rule__ExpressionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExprAssignment_1()); }
(rule__ExpressionStatement__ExprAssignment_1)
{ after(grammarAccess.getExpressionStatementAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__0__Impl
	rule__ExpressionStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getVarAssignment_0_0()); }
(rule__ExpressionStatement__VarAssignment_0_0)
{ after(grammarAccess.getExpressionStatementAccess().getVarAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__1__Impl
	rule__ExpressionStatement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_0_1()); }
(rule__ExpressionStatement__Group_0_1__0)?
{ after(grammarAccess.getExpressionStatementAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getEqualsSignKeyword_0_2()); }

	'=' 

{ after(grammarAccess.getExpressionStatementAccess().getEqualsSignKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionStatement__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0_1__0__Impl
	rule__ExpressionStatement__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getFullStopKeyword_0_1_0()); }

	'.' 

{ after(grammarAccess.getExpressionStatementAccess().getFullStopKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getFieldAssignment_0_1_1()); }
(rule__ExpressionStatement__FieldAssignment_0_1_1)
{ after(grammarAccess.getExpressionStatementAccess().getFieldAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpression__Group__0__Impl
	rule__LogicalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getLeftAssignment_0()); }
(rule__LogicalExpression__LeftAssignment_0)
{ after(grammarAccess.getLogicalExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1()); }
(rule__LogicalExpression__RightAssignment_1)*
{ after(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpressionPart__Group__0__Impl
	rule__LogicalExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getOpAssignment_0()); }
(rule__LogicalExpressionPart__OpAssignment_0)
{ after(grammarAccess.getLogicalExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getExAssignment_1()); }
(rule__LogicalExpressionPart__ExAssignment_1)
{ after(grammarAccess.getLogicalExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getLeftAssignment_0()); }
(rule__EqualityExpression__LeftAssignment_0)
{ after(grammarAccess.getEqualityExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1()); }
(rule__EqualityExpression__RightAssignment_1)?
{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpressionPart__Group__0__Impl
	rule__EqualityExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getOpAssignment_0()); }
(rule__EqualityExpressionPart__OpAssignment_0)
{ after(grammarAccess.getEqualityExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getExAssignment_1()); }
(rule__EqualityExpressionPart__ExAssignment_1)
{ after(grammarAccess.getEqualityExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLeftAssignment_0()); }
(rule__RelationalExpression__LeftAssignment_0)
{ after(grammarAccess.getRelationalExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)?
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_0()); }
(rule__RelationalExpression__RightAssignment_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRight2Assignment_1_1()); }
(rule__RelationalExpression__Right2Assignment_1_1)?
{ after(grammarAccess.getRelationalExpressionAccess().getRight2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpressionPart__Group__0__Impl
	rule__RelationalExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getOpAssignment_0()); }
(rule__RelationalExpressionPart__OpAssignment_0)
{ after(grammarAccess.getRelationalExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getExAssignment_1()); }
(rule__RelationalExpressionPart__ExAssignment_1)
{ after(grammarAccess.getRelationalExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getLeftAssignment_0()); }
(rule__AdditiveExpression__LeftAssignment_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1()); }
(rule__AdditiveExpression__RightAssignment_1)*
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpressionPart__Group__0__Impl
	rule__AdditiveExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getOpAssignment_0()); }
(rule__AdditiveExpressionPart__OpAssignment_0)
{ after(grammarAccess.getAdditiveExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getExAssignment_1()); }
(rule__AdditiveExpressionPart__ExAssignment_1)
{ after(grammarAccess.getAdditiveExpressionPartAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getLeftAssignment_0()); }
(rule__MultiplicativeExpression__LeftAssignment_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1()); }
(rule__MultiplicativeExpression__RightAssignment_1)?
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpressionPart__Group__0__Impl
	rule__MultiplicativeExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getOpAssignment_0()); }
(rule__MultiplicativeExpressionPart__OpAssignment_0)
{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getExprAssignment_1()); }
(rule__MultiplicativeExpressionPart__ExprAssignment_1)
{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
(rule__UnaryExpression__OpAssignment_0)?
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1()); }
(rule__UnaryExpression__ExprAssignment_1)
{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionOrQualifiedExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group__0__Impl
	rule__ExpressionOrQualifiedExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getAlternatives_0()); }
(rule__ExpressionOrQualifiedExecution__Alternatives_0)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrQualifiedExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsAssignment_1()); }
(rule__ExpressionOrQualifiedExecution__CallsAssignment_1)*
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionOrQualifiedExecution__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group_0_1__0__Impl
	rule__ExpressionOrQualifiedExecution__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getLeftParenthesisKeyword_0_1_0()); }

	'(' 

{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getLeftParenthesisKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrQualifiedExecution__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group_0_1__1__Impl
	rule__ExpressionOrQualifiedExecution__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisAssignment_0_1_1()); }
(rule__ExpressionOrQualifiedExecution__ParenthesisAssignment_0_1_1)
{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrQualifiedExecution__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionOrQualifiedExecution__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getRightParenthesisKeyword_0_1_2()); }

	')' 

{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getRightParenthesisKeyword_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnqualifiedExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnqualifiedExecution__Group__0__Impl
	rule__UnqualifiedExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallAssignment_0()); }
(rule__UnqualifiedExecution__CallAssignment_0)
{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnqualifiedExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnqualifiedExecution__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallsAssignment_1()); }
(rule__UnqualifiedExecution__CallsAssignment_1)*
{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SuperExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__0__Impl
	rule__SuperExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getSuperKeyword_0()); }

	'super' 

{ after(grammarAccess.getSuperExecutionAccess().getSuperKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__1__Impl
	rule__SuperExecution__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getSuperExecutionAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExecution__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__2__Impl
	rule__SuperExecution__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallAssignment_2()); }
(rule__SuperExecution__CallAssignment_2)
{ after(grammarAccess.getSuperExecutionAccess().getCallAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SuperExecution__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SuperExecution__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallsAssignment_3()); }
(rule__SuperExecution__CallsAssignment_3)*
{ after(grammarAccess.getSuperExecutionAccess().getCallsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConstructorExecution__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__0__Impl
	rule__ConstructorExecution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getConstructorExecutionAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__1__Impl
	rule__ConstructorExecution__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getTypeAssignment_1()); }
(rule__ConstructorExecution__TypeAssignment_1)
{ after(grammarAccess.getConstructorExecutionAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__2__Impl
	rule__ConstructorExecution__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getConstructorExecutionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__3__Impl
	rule__ConstructorExecution__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getParamAssignment_3()); }
(rule__ConstructorExecution__ParamAssignment_3)?
{ after(grammarAccess.getConstructorExecutionAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__4__Impl
	rule__ConstructorExecution__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getConstructorExecutionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorExecution__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorExecution__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getCallsAssignment_5()); }
(rule__ConstructorExecution__CallsAssignment_5)*
{ after(grammarAccess.getConstructorExecutionAccess().getCallsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SubCall__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_0__0__Impl
	rule__SubCall__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getTypeAssignment_0_0()); }
(rule__SubCall__TypeAssignment_0_0)
{ after(grammarAccess.getSubCallAccess().getTypeAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubCall__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getCallAssignment_0_1()); }
(rule__SubCall__CallAssignment_0_1)
{ after(grammarAccess.getSubCallAccess().getCallAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_1__0__Impl
	rule__SubCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getSubCallAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_1__1__Impl
	rule__SubCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getArrayExAssignment_1_1()); }
(rule__SubCall__ArrayExAssignment_1_1)
{ after(grammarAccess.getSubCallAccess().getArrayExAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getSubCallAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__0__Impl
	rule__Declarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclAssignment_0()); }
(rule__Declarator__DeclAssignment_0)
{ after(grammarAccess.getDeclaratorAccess().getDeclAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__1__Impl
	rule__Declarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getGroup_1()); }
(rule__Declarator__Group_1__0)*
{ after(grammarAccess.getDeclaratorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declarator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group_1__0__Impl
	rule__Declarator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getSemicolonKeyword_1_0()); }

	';' 

{ after(grammarAccess.getDeclaratorAccess().getSemicolonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declarator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclAssignment_1_1()); }
(rule__Declarator__DeclAssignment_1_1)
{ after(grammarAccess.getDeclaratorAccess().getDeclAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
(rule__Declaration__TypeAssignment_0)?
{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsAssignment_1()); }
(rule__Declaration__UnitsAssignment_1)
{ after(grammarAccess.getDeclarationAccess().getUnitsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getGroup_2()); }
(rule__Declaration__Group_2__0)*
{ after(grammarAccess.getDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Declaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_2__0__Impl
	rule__Declaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getDeclarationAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsAssignment_2_1()); }
(rule__Declaration__UnitsAssignment_2_1)
{ after(grammarAccess.getDeclarationAccess().getUnitsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclarationUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group__0__Impl
	rule__DeclarationUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getIdAssignment_0()); }
(rule__DeclarationUnit__IdAssignment_0)
{ after(grammarAccess.getDeclarationUnitAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getGroup_1()); }
(rule__DeclarationUnit__Group_1__0)?
{ after(grammarAccess.getDeclarationUnitAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclarationUnit__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group_1__0__Impl
	rule__DeclarationUnit__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getDeclarationUnitAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationUnit__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationUnit__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getDefltAssignment_1_1()); }
(rule__DeclarationUnit__DefltAssignment_1_1)
{ after(grammarAccess.getDeclarationUnitAccess().getDefltAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnnotationDeclarations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclarations__Group__0__Impl
	rule__AnnotationDeclarations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getAnnotationDeclarationsAction_0()); }
(

)
{ after(grammarAccess.getAnnotationDeclarationsAccess().getAnnotationDeclarationsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationDeclarations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclarations__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getGroup_1()); }
(rule__AnnotationDeclarations__Group_1__0)*
{ after(grammarAccess.getAnnotationDeclarationsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnnotationDeclarations__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclarations__Group_1__0__Impl
	rule__AnnotationDeclarations__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getCommercialAtKeyword_1_0()); }

	'@' 

{ after(grammarAccess.getAnnotationDeclarationsAccess().getCommercialAtKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationDeclarations__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclarations__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getIdAssignment_1_1()); }
(rule__AnnotationDeclarations__IdAssignment_1_1)
{ after(grammarAccess.getAnnotationDeclarationsAccess().getIdAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getNameAssignment_0()); }
(rule__Call__NameAssignment_0)
{ after(grammarAccess.getCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getDeclAssignment_2()); }
(rule__Call__DeclAssignment_2)?
{ after(grammarAccess.getCallAccess().getDeclAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__3__Impl
	rule__Call__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParamAssignment_3()); }
(rule__Call__ParamAssignment_3)?
{ after(grammarAccess.getCallAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArgumentList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group__0__Impl
	rule__ArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamAssignment_0()); }
(rule__ArgumentList__ParamAssignment_0)
{ after(grammarAccess.getArgumentListAccess().getParamAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getGroup_1()); }
(rule__ArgumentList__Group_1__0)*
{ after(grammarAccess.getArgumentListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group_1__0__Impl
	rule__ArgumentList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getArgumentListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamAssignment_1_1()); }
(rule__ArgumentList__ParamAssignment_1_1)
{ after(grammarAccess.getArgumentListAccess().getParamAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedArgument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group__0__Impl
	rule__NamedArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getGroup_0()); }
(rule__NamedArgument__Group_0__0)?
{ after(grammarAccess.getNamedArgumentAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getExAssignment_1()); }
(rule__NamedArgument__ExAssignment_1)
{ after(grammarAccess.getNamedArgumentAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedArgument__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group_0__0__Impl
	rule__NamedArgument__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getNameAssignment_0_0()); }
(rule__NamedArgument__NameAssignment_0_0)
{ after(grammarAccess.getNamedArgumentAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgument__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_0_1()); }

	'=' 

{ after(grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedPrefix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group__0__Impl
	rule__QualifiedPrefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_0()); }
(rule__QualifiedPrefix__QnameAssignment_0)
{ after(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedPrefix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getGroup_1()); }
(rule__QualifiedPrefix__Group_1__0)*
{ after(grammarAccess.getQualifiedPrefixAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedPrefix__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group_1__0__Impl
	rule__QualifiedPrefix__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_0()); }
(rule__QualifiedPrefix__QnameAssignment_1_0)
{ after(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedPrefix__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedPrefix__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_1()); }
(rule__QualifiedPrefix__QnameAssignment_1_1)
{ after(grammarAccess.getQualifiedPrefixAccess().getQnameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getPrefixAssignment_0()); }
(rule__QualifiedName__PrefixAssignment_0)
{ after(grammarAccess.getQualifiedNameAccess().getPrefixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_0()); }
(rule__QualifiedName__QnameAssignment_1_0)
{ after(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_1()); }
(rule__QualifiedName__QnameAssignment_1_1)
{ after(grammarAccess.getQualifiedNameAccess().getQnameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__0__Impl
	rule__Type__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSetAssignment_1_0()); }
(rule__Type__SetAssignment_1_0)
{ after(grammarAccess.getTypeAccess().getSetAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_1_1()); }
(rule__Type__ParamAssignment_1_1)
{ after(grammarAccess.getTypeAccess().getParamAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_2__0__Impl
	rule__Type__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSeqAssignment_2_0()); }
(rule__Type__SeqAssignment_2_0)
{ after(grammarAccess.getTypeAccess().getSeqAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_2_1()); }
(rule__Type__ParamAssignment_2_1)
{ after(grammarAccess.getTypeAccess().getParamAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_3__0__Impl
	rule__Type__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getMapAssignment_3_0()); }
(rule__Type__MapAssignment_3_0)
{ after(grammarAccess.getTypeAccess().getMapAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_3_1()); }
(rule__Type__ParamAssignment_3_1)
{ after(grammarAccess.getTypeAccess().getParamAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_4__0__Impl
	rule__Type__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCallAssignment_4_0()); }
(rule__Type__CallAssignment_4_0)
{ after(grammarAccess.getTypeAccess().getCallAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_4__1__Impl
	rule__Type__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getReturnAssignment_4_1()); }
(rule__Type__ReturnAssignment_4_1)?
{ after(grammarAccess.getTypeAccess().getReturnAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamAssignment_4_2()); }
(rule__Type__ParamAssignment_4_2)
{ after(grammarAccess.getTypeAccess().getParamAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypeParameters__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__0__Impl
	rule__TypeParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getTypeParametersAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__1__Impl
	rule__TypeParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamAssignment_1()); }
(rule__TypeParameters__ParamAssignment_1)
{ after(grammarAccess.getTypeParametersAccess().getParamAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__2__Impl
	rule__TypeParameters__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getGroup_2()); }
(rule__TypeParameters__Group_2__0)*
{ after(grammarAccess.getTypeParametersAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getTypeParametersAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeParameters__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group_2__0__Impl
	rule__TypeParameters__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamAssignment_2_1()); }
(rule__TypeParameters__ParamAssignment_2_1)
{ after(grammarAccess.getTypeParametersAccess().getParamAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainerInitializer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__0__Impl
	rule__ContainerInitializer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getContainerInitializerAction_0()); }
(

)
{ after(grammarAccess.getContainerInitializerAccess().getContainerInitializerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__1__Impl
	rule__ContainerInitializer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getContainerInitializerAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__2__Impl
	rule__ContainerInitializer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getGroup_2()); }
(rule__ContainerInitializer__Group_2__0)?
{ after(grammarAccess.getContainerInitializerAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getContainerInitializerAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ContainerInitializer__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2__0__Impl
	rule__ContainerInitializer__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_0()); }
(rule__ContainerInitializer__ExprsAssignment_2_0)
{ after(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getGroup_2_1()); }
(rule__ContainerInitializer__Group_2_1__0)*
{ after(grammarAccess.getContainerInitializerAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ContainerInitializer__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2_1__0__Impl
	rule__ContainerInitializer__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getContainerInitializerAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerInitializer__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContainerInitializer__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_1_1()); }
(rule__ContainerInitializer__ExprsAssignment_2_1_1)
{ after(grammarAccess.getContainerInitializerAccess().getExprsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__LanguageUnit__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getLanguageUnitAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__JavaExtsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getJavaExtsExtensionParserRuleCall_1_0()); }
	ruleExtension{ after(grammarAccess.getLanguageUnitAccess().getJavaExtsExtensionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__AdvicesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getAdvicesAdviceParserRuleCall_2_0()); }
	ruleAdvice{ after(grammarAccess.getLanguageUnitAccess().getAdvicesAdviceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__IndentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getIndentIndentationHintParserRuleCall_3_0()); }
	ruleIndentationHint{ after(grammarAccess.getLanguageUnitAccess().getIndentIndentationHintParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__FormattingAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getFormattingFormattingHintParserRuleCall_4_0()); }
	ruleFormattingHint{ after(grammarAccess.getLanguageUnitAccess().getFormattingFormattingHintParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__NameAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getNameIdentifierParserRuleCall_6_0()); }
	ruleIdentifier{ after(grammarAccess.getLanguageUnitAccess().getNameIdentifierParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ParamAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getParamParameterListParserRuleCall_8_0()); }
	ruleParameterList{ after(grammarAccess.getLanguageUnitAccess().getParamParameterListParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ExtAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getExtIdentifierParserRuleCall_10_1_0()); }
	ruleIdentifier{ after(grammarAccess.getLanguageUnitAccess().getExtIdentifierParserRuleCall_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__VersionAssignment_12
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getVersionVersionStmtParserRuleCall_12_0()); }
	ruleVersionStmt{ after(grammarAccess.getLanguageUnitAccess().getVersionVersionStmtParserRuleCall_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ElementsAssignment_13_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getElementsTypeDefParserRuleCall_13_0_0()); }
	ruleTypeDef{ after(grammarAccess.getLanguageUnitAccess().getElementsTypeDefParserRuleCall_13_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ElementsAssignment_13_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getElementsCompoundParserRuleCall_13_1_0()); }
	ruleCompound{ after(grammarAccess.getLanguageUnitAccess().getElementsCompoundParserRuleCall_13_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ElementsAssignment_13_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getElementsVariableDeclarationParserRuleCall_13_2_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getLanguageUnitAccess().getElementsVariableDeclarationParserRuleCall_13_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageUnit__ElementsAssignment_13_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageUnitAccess().getElementsVilDefParserRuleCall_13_3_0()); }
	ruleVilDef{ after(grammarAccess.getLanguageUnitAccess().getElementsVilDefParserRuleCall_13_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HintedExpression__ExAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHintedExpressionAccess().getExExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getHintedExpressionAccess().getExExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HintedExpression__HintAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHintedExpressionAccess().getHintAlternatives_1_1_0()); }
(rule__HintedExpression__HintAlternatives_1_1_0)
{ after(grammarAccess.getHintedExpressionAccess().getHintAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHint__PartsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintAccess().getPartsIndentationHintPartParserRuleCall_2_0()); }
	ruleIndentationHintPart{ after(grammarAccess.getIndentationHintAccess().getPartsIndentationHintPartParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHint__PartsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintAccess().getPartsIndentationHintPartParserRuleCall_3_1_0()); }
	ruleIndentationHintPart{ after(grammarAccess.getIndentationHintAccess().getPartsIndentationHintPartParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHintPart__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintPartAccess().getNameIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getIndentationHintPartAccess().getNameIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndentationHintPart__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndentationHintPartAccess().getValueNUMBERTerminalRuleCall_2_0()); }
	RULE_NUMBER{ after(grammarAccess.getIndentationHintPartAccess().getValueNUMBERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHint__PartsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintAccess().getPartsFormattingHintPartParserRuleCall_2_0()); }
	ruleFormattingHintPart{ after(grammarAccess.getFormattingHintAccess().getPartsFormattingHintPartParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHint__PartsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintAccess().getPartsFormattingHintPartParserRuleCall_3_1_0()); }
	ruleFormattingHintPart{ after(grammarAccess.getFormattingHintAccess().getPartsFormattingHintPartParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHintPart__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintPartAccess().getNameIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getFormattingHintPartAccess().getNameIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHintPart__ValueAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintPartAccess().getValueSTRINGTerminalRuleCall_2_0_0()); }
	RULE_STRING{ after(grammarAccess.getFormattingHintPartAccess().getValueSTRINGTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormattingHintPart__NumValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormattingHintPartAccess().getNumValueNUMBERTerminalRuleCall_2_1_0()); }
	RULE_NUMBER{ after(grammarAccess.getFormattingHintPartAccess().getNumValueNUMBERTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getAnnotationsAnnotationDeclarationsParserRuleCall_0_0()); }
	ruleAnnotationDeclarations{ after(grammarAccess.getVilDefAccess().getAnnotationsAnnotationDeclarationsParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__ProtectedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getProtectedProtectedKeyword_1_0()); }
(
{ before(grammarAccess.getVilDefAccess().getProtectedProtectedKeyword_1_0()); }

	'protected' 

{ after(grammarAccess.getVilDefAccess().getProtectedProtectedKeyword_1_0()); }
)

{ after(grammarAccess.getVilDefAccess().getProtectedProtectedKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getVilDefAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__IdAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getIdIdentifierParserRuleCall_4_0()); }
	ruleIdentifier{ after(grammarAccess.getVilDefAccess().getIdIdentifierParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__ParamAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getParamParameterListParserRuleCall_6_0()); }
	ruleParameterList{ after(grammarAccess.getVilDefAccess().getParamParameterListParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VilDef__StmtsAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVilDefAccess().getStmtsStmtBlockParserRuleCall_8_0()); }
	ruleStmtBlock{ after(grammarAccess.getVilDefAccess().getStmtsStmtBlockParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StmtBlock__StmtsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtBlockAccess().getStmtsStmtParserRuleCall_2_0()); }
	ruleStmt{ after(grammarAccess.getStmtBlockAccess().getStmtsStmtParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getVarVariableDeclarationParserRuleCall_0_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getStmtAccess().getVarVariableDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__AltAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getAltAlternativeParserRuleCall_1_0()); }
	ruleAlternative{ after(grammarAccess.getStmtAccess().getAltAlternativeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__SwitchAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getSwitchSwitchParserRuleCall_2_0()); }
	ruleSwitch{ after(grammarAccess.getStmtAccess().getSwitchSwitchParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__MultiAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getMultiMultiselectParserRuleCall_3_0()); }
	rulemultiselect{ after(grammarAccess.getStmtAccess().getMultiMultiselectParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__LoopAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getLoopLoopParserRuleCall_4_0()); }
	ruleLoop{ after(grammarAccess.getStmtAccess().getLoopLoopParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__WhileAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getWhileWhileParserRuleCall_5_0()); }
	ruleWhile{ after(grammarAccess.getStmtAccess().getWhileWhileParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__ExprStmtAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getExprStmtExpressionStatementParserRuleCall_6_0()); }
	ruleExpressionStatement{ after(grammarAccess.getStmtAccess().getExprStmtExpressionStatementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__CtnAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getCtnContentParserRuleCall_7_0()); }
	ruleContent{ after(grammarAccess.getStmtAccess().getCtnContentParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__FlushAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getFlushFlushParserRuleCall_8_0()); }
	ruleFlush{ after(grammarAccess.getStmtAccess().getFlushFlushParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAlternativeAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__IfAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getIfStmtParserRuleCall_4_0_0()); }
	ruleStmt{ after(grammarAccess.getAlternativeAccess().getIfStmtParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__IfBlockAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getIfBlockStmtBlockParserRuleCall_4_1_0()); }
	ruleStmtBlock{ after(grammarAccess.getAlternativeAccess().getIfBlockStmtBlockParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__ElseAssignment_5_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getElseStmtParserRuleCall_5_1_0_0()); }
	ruleStmt{ after(grammarAccess.getAlternativeAccess().getElseStmtParserRuleCall_5_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__ElseBlockAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getElseBlockStmtBlockParserRuleCall_5_1_1_0()); }
	ruleStmtBlock{ after(grammarAccess.getAlternativeAccess().getElseBlockStmtBlockParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Content__CtnAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getCtnSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getContentAccess().getCtnSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Content__NoCRAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getNoCRExclamationMarkKeyword_1_0_0_0()); }
(
{ before(grammarAccess.getContentAccess().getNoCRExclamationMarkKeyword_1_0_0_0()); }

	'!' 

{ after(grammarAccess.getContentAccess().getNoCRExclamationMarkKeyword_1_0_0_0()); }
)

{ after(grammarAccess.getContentAccess().getNoCRExclamationMarkKeyword_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Content__CRAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getCRCRKeyword_1_0_1_0()); }
(
{ before(grammarAccess.getContentAccess().getCRCRKeyword_1_0_1_0()); }

	'<CR>' 

{ after(grammarAccess.getContentAccess().getCRCRKeyword_1_0_1_0()); }
)

{ after(grammarAccess.getContentAccess().getCRCRKeyword_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Content__IndentAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getIndentExpressionParserRuleCall_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getContentAccess().getIndentExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSwitchAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__PartsAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getPartsSwitchPartParserRuleCall_5_0_0()); }
	ruleSwitchPart{ after(grammarAccess.getSwitchAccess().getPartsSwitchPartParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__PartsAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getPartsSwitchPartParserRuleCall_5_1_1_0()); }
	ruleSwitchPart{ after(grammarAccess.getSwitchAccess().getPartsSwitchPartParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__DfltAssignment_5_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getDfltExpressionParserRuleCall_5_2_3_0()); }
	ruleExpression{ after(grammarAccess.getSwitchAccess().getDfltExpressionParserRuleCall_5_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchPart__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchPartAccess().getLeftExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getSwitchPartAccess().getLeftExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchPart__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchPartAccess().getRightExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSwitchPartAccess().getRightExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getLoopAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__IdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getIdIdentifierParserRuleCall_3_0()); }
	ruleIdentifier{ after(grammarAccess.getLoopAccess().getIdIdentifierParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ExprAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getExprExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getLoopAccess().getExprExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__SeparatorAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getSeparatorPrimaryExpressionParserRuleCall_6_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getLoopAccess().getSeparatorPrimaryExpressionParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__FinalSeparatorAssignment_6_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getFinalSeparatorPrimaryExpressionParserRuleCall_6_2_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getLoopAccess().getFinalSeparatorPrimaryExpressionParserRuleCall_6_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__StmtAssignment_8_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getStmtStmtParserRuleCall_8_0_0()); }
	ruleStmt{ after(grammarAccess.getLoopAccess().getStmtStmtParserRuleCall_8_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__BlockAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getBlockStmtBlockParserRuleCall_8_1_0()); }
	ruleStmtBlock{ after(grammarAccess.getLoopAccess().getBlockStmtBlockParserRuleCall_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getWhileAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__StmtAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getStmtStmtParserRuleCall_4_0_0()); }
	ruleStmt{ after(grammarAccess.getWhileAccess().getStmtStmtParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__BlockAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getBlockStmtBlockParserRuleCall_4_1_0()); }
	ruleStmtBlock{ after(grammarAccess.getWhileAccess().getBlockStmtBlockParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiselect__GenAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiselectAccess().getGenGenericMultiselectParserRuleCall_0_0()); }
	rulegenericMultiselect{ after(grammarAccess.getMultiselectAccess().getGenGenericMultiselectParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiselect__UserAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiselectAccess().getUserUserMultiselectParserRuleCall_1_0()); }
	ruleuserMultiselect{ after(grammarAccess.getMultiselectAccess().getUserUserMultiselectParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMultiselect__PreambleAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMultiselectAccess().getPreambleStmtBlockParserRuleCall_1_0()); }
	ruleStmtBlock{ after(grammarAccess.getGenericMultiselectAccess().getPreambleStmtBlockParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMultiselect__SelectorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMultiselectAccess().getSelectorStmtBlockParserRuleCall_2_0()); }
	ruleStmtBlock{ after(grammarAccess.getGenericMultiselectAccess().getSelectorStmtBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMultiselect__PartAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMultiselectAccess().getPartMultiSelectPartParserRuleCall_3_0()); }
	rulemultiSelectPart{ after(grammarAccess.getGenericMultiselectAccess().getPartMultiSelectPartParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMultiselect__TrailerAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMultiselectAccess().getTrailerStmtBlockParserRuleCall_4_0()); }
	ruleStmtBlock{ after(grammarAccess.getGenericMultiselectAccess().getTrailerStmtBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiSelectPart__CaseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiSelectPartAccess().getCaseExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getMultiSelectPartAccess().getCaseExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiSelectPart__CodeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiSelectPartAccess().getCodeStmtBlockParserRuleCall_2_0()); }
	ruleStmtBlock{ after(grammarAccess.getMultiSelectPartAccess().getCodeStmtBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiSelectPart__SelectorAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiSelectPartAccess().getSelectorStmtBlockParserRuleCall_3_0()); }
	ruleStmtBlock{ after(grammarAccess.getMultiSelectPartAccess().getSelectorStmtBlockParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserMultiselect__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMultiselectAccess().getIdIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getUserMultiselectAccess().getIdIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserMultiselect__StmtAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMultiselectAccess().getStmtStmtBlockParserRuleCall_3_0()); }
	ruleStmtBlock{ after(grammarAccess.getUserMultiselectAccess().getStmtStmtBlockParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtensionAccess().getNameJavaQualifiedNameParserRuleCall_1_0()); }
	ruleJavaQualifiedName{ after(grammarAccess.getExtensionAccess().getNameJavaQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaQualifiedName__QnameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaQualifiedNameAccess().getQnameIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getJavaQualifiedNameAccess().getQnameIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaQualifiedName__QnameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
(
{ before(grammarAccess.getJavaQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }

	'.' 

{ after(grammarAccess.getJavaQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
)

{ after(grammarAccess.getJavaQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaQualifiedName__QnameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getJavaQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ConstAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }

	'const' 

{ after(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }
)

{ after(grammarAccess.getVariableDeclarationAccess().getConstConstKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIdentifierParserRuleCall_2_0()); }
	ruleIdentifier{ after(grammarAccess.getVariableDeclarationAccess().getNameIdentifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ExpressionAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__AbstractAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getAbstractAbstractKeyword_0_0()); }
(
{ before(grammarAccess.getCompoundAccess().getAbstractAbstractKeyword_0_0()); }

	'abstract' 

{ after(grammarAccess.getCompoundAccess().getAbstractAbstractKeyword_0_0()); }
)

{ after(grammarAccess.getCompoundAccess().getAbstractAbstractKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getNameIdentifierParserRuleCall_2_0()); }
	ruleIdentifier{ after(grammarAccess.getCompoundAccess().getNameIdentifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__SuperAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getSuperIdentifierParserRuleCall_3_1_0()); }
	ruleIdentifier{ after(grammarAccess.getCompoundAccess().getSuperIdentifierParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__VarsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundAccess().getVarsVariableDeclarationParserRuleCall_5_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getCompoundAccess().getVarsVariableDeclarationParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getTypeDefAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAdviceAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Advice__VersionSpecAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdviceAccess().getVersionSpecVersionSpecParserRuleCall_4_0()); }
	ruleVersionSpec{ after(grammarAccess.getAdviceAccess().getVersionSpecVersionSpecParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VersionSpec__RestrictionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionSpecAccess().getRestrictionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getVersionSpecAccess().getRestrictionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParamAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_0_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ParamAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_1_1_0()); }
	ruleParameter{ after(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__DfltAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDfltExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getParameterAccess().getDfltExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VersionStmt__VersionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVersionStmtAccess().getVersionVERSIONTerminalRuleCall_1_0()); }
	RULE_VERSION{ after(grammarAccess.getVersionStmtAccess().getVersionVERSIONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__InsertAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }
(
{ before(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }

	'insert' 

{ after(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }
)

{ after(grammarAccess.getImportAccess().getInsertInsertKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getImportAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__WildcardAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }
(
{ before(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }

	'*' 

{ after(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }
)

{ after(grammarAccess.getImportAccess().getWildcardAsteriskKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__VersionSpecAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getVersionSpecVersionSpecParserRuleCall_3_0()); }
	ruleVersionSpec{ after(grammarAccess.getImportAccess().getVersionSpecVersionSpecParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__VarAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getVarIdentifierParserRuleCall_0_0_0()); }
	ruleIdentifier{ after(grammarAccess.getExpressionStatementAccess().getVarIdentifierParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__FieldAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getFieldIdentifierParserRuleCall_0_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getExpressionStatementAccess().getFieldIdentifierParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionStatementAccess().getExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprLogicalExpressionParserRuleCall_0_0()); }
	ruleLogicalExpression{ after(grammarAccess.getExpressionAccess().getExprLogicalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__InitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getInitContainerInitializerParserRuleCall_1_0()); }
	ruleContainerInitializer{ after(grammarAccess.getExpressionAccess().getInitContainerInitializerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getLeftEqualityExpressionParserRuleCall_0_0()); }
	ruleEqualityExpression{ after(grammarAccess.getLogicalExpressionAccess().getLeftEqualityExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionPartParserRuleCall_1_0()); }
	ruleLogicalExpressionPart{ after(grammarAccess.getLogicalExpressionAccess().getRightLogicalExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getOpLogicalOperatorParserRuleCall_0_0()); }
	ruleLogicalOperator{ after(grammarAccess.getLogicalExpressionPartAccess().getOpLogicalOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalExpressionPartAccess().getExEqualityExpressionParserRuleCall_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getLogicalExpressionPartAccess().getExEqualityExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionPartParserRuleCall_1_0()); }
	ruleEqualityExpressionPart{ after(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getOpEqualityOperatorParserRuleCall_0_0()); }
	ruleEqualityOperator{ after(grammarAccess.getEqualityExpressionPartAccess().getOpEqualityOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionPartAccess().getExRelationalExpressionParserRuleCall_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionPartAccess().getExRelationalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLeftAdditiveExpressionParserRuleCall_0_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getLeftAdditiveExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionPartParserRuleCall_1_0_0()); }
	ruleRelationalExpressionPart{ after(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionPartParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Right2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRight2RelationalExpressionPartParserRuleCall_1_1_0()); }
	ruleRelationalExpressionPart{ after(grammarAccess.getRelationalExpressionAccess().getRight2RelationalExpressionPartParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getOpRelationalOperatorParserRuleCall_0_0()); }
	ruleRelationalOperator{ after(grammarAccess.getRelationalExpressionPartAccess().getOpRelationalOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionPartAccess().getExAdditiveExpressionParserRuleCall_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionPartAccess().getExAdditiveExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getLeftMultiplicativeExpressionParserRuleCall_0_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getLeftMultiplicativeExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionPartParserRuleCall_1_0()); }
	ruleAdditiveExpressionPart{ after(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getOpAdditiveOperatorParserRuleCall_0_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getAdditiveExpressionPartAccess().getOpAdditiveOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionPart__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionPartAccess().getExMultiplicativeExpressionParserRuleCall_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionPartAccess().getExMultiplicativeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getLeftUnaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionPartParserRuleCall_1_0()); }
	ruleMultiplicativeExpressionPart{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionPartParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getOpMultiplicativeOperatorParserRuleCall_0_0()); }
	ruleMultiplicativeOperator{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getOpMultiplicativeOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionPart__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionPartAccess().getExprUnaryExpressionParserRuleCall_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionPartAccess().getExprUnaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0()); }
	rulePostfixExpression{ after(grammarAccess.getUnaryExpressionAccess().getExprPostfixExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__LeftAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixExpressionAccess().getLeftPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression{ after(grammarAccess.getPostfixExpressionAccess().getLeftPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OtherExAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0()); }
	ruleExpressionOrQualifiedExecution{ after(grammarAccess.getPrimaryExpressionAccess().getOtherExExpressionOrQualifiedExecutionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__UnqExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnqExUnqualifiedExecutionParserRuleCall_1_0()); }
	ruleUnqualifiedExecution{ after(grammarAccess.getPrimaryExpressionAccess().getUnqExUnqualifiedExecutionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__SuperExAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getSuperExSuperExecutionParserRuleCall_2_0()); }
	ruleSuperExecution{ after(grammarAccess.getPrimaryExpressionAccess().getSuperExSuperExecutionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__NewExAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNewExConstructorExecutionParserRuleCall_3_0()); }
	ruleConstructorExecution{ after(grammarAccess.getPrimaryExpressionAccess().getNewExConstructorExecutionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__ValAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValConstantParserRuleCall_0_0_0()); }
	ruleConstant{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getValConstantParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__ParenthesisAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisExpressionParserRuleCall_0_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getParenthesisExpressionParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrQualifiedExecution__CallsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
	ruleSubCall{ after(grammarAccess.getExpressionOrQualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__CallAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallCallParserRuleCall_0_0()); }
	ruleCall{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallCallParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnqualifiedExecution__CallsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnqualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
	ruleSubCall{ after(grammarAccess.getUnqualifiedExecutionAccess().getCallsSubCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__CallAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallCallParserRuleCall_2_0()); }
	ruleCall{ after(grammarAccess.getSuperExecutionAccess().getCallCallParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SuperExecution__CallsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperExecutionAccess().getCallsSubCallParserRuleCall_3_0()); }
	ruleSubCall{ after(grammarAccess.getSuperExecutionAccess().getCallsSubCallParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getConstructorExecutionAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getParamArgumentListParserRuleCall_3_0()); }
	ruleArgumentList{ after(grammarAccess.getConstructorExecutionAccess().getParamArgumentListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorExecution__CallsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorExecutionAccess().getCallsSubCallParserRuleCall_5_0()); }
	ruleSubCall{ after(grammarAccess.getConstructorExecutionAccess().getCallsSubCallParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__TypeAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getTypeAlternatives_0_0_0()); }
(rule__SubCall__TypeAlternatives_0_0_0)
{ after(grammarAccess.getSubCallAccess().getTypeAlternatives_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__CallAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getCallCallParserRuleCall_0_1_0()); }
	ruleCall{ after(grammarAccess.getSubCallAccess().getCallCallParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubCall__ArrayExAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubCallAccess().getArrayExExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getSubCallAccess().getArrayExExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DeclAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_0_0()); }
	ruleDeclaration{ after(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__DeclAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_1_1_0()); }
	ruleDeclaration{ after(grammarAccess.getDeclaratorAccess().getDeclDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__UnitsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_1_0()); }
	ruleDeclarationUnit{ after(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__UnitsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_2_1_0()); }
	ruleDeclarationUnit{ after(grammarAccess.getDeclarationAccess().getUnitsDeclarationUnitParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getIdIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getDeclarationUnitAccess().getIdIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationUnit__DefltAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationUnitAccess().getDefltExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getDeclarationUnitAccess().getDefltExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclarations__IdAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclarationsAccess().getIdIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getAnnotationDeclarationsAccess().getIdIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
	ruleQualifiedPrefix{ after(grammarAccess.getCallAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__DeclAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getDeclDeclaratorParserRuleCall_2_0()); }
	ruleDeclarator{ after(grammarAccess.getCallAccess().getDeclDeclaratorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParamArgumentListParserRuleCall_3_0()); }
	ruleArgumentList{ after(grammarAccess.getCallAccess().getParamArgumentListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ParamAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_0_0()); }
	ruleNamedArgument{ after(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__ParamAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_1_1_0()); }
	ruleNamedArgument{ after(grammarAccess.getArgumentListAccess().getParamNamedArgumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getNameIdentifierParserRuleCall_0_0_0()); }
	ruleIdentifier{ after(grammarAccess.getNamedArgumentAccess().getNameIdentifierParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getExExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getNamedArgumentAccess().getExExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__QnameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__QnameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }

	'::' 

{ after(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }
)

{ after(grammarAccess.getQualifiedPrefixAccess().getQnameColonColonKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedPrefix__QnameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getQualifiedPrefixAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__PrefixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getPrefixQualifiedPrefixParserRuleCall_0_0()); }
	ruleQualifiedPrefix{ after(grammarAccess.getQualifiedNameAccess().getPrefixQualifiedPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__QnameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
)

{ after(grammarAccess.getQualifiedNameAccess().getQnameFullStopKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__QnameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getQualifiedNameAccess().getQnameIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNValueNumValueParserRuleCall_0_0()); }
	ruleNumValue{ after(grammarAccess.getConstantAccess().getNValueNumValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__SValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getSValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getConstantAccess().getSValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__QValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getQValueQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getConstantAccess().getQValueQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__BValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getBValueAlternatives_3_0()); }
(rule__Constant__BValueAlternatives_3_0)
{ after(grammarAccess.getConstantAccess().getBValueAlternatives_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NullAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }
(
{ before(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }

	'null' 

{ after(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }
)

{ after(grammarAccess.getConstantAccess().getNullNullKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__VersionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getVersionVERSIONTerminalRuleCall_5_0()); }
	RULE_VERSION{ after(grammarAccess.getConstantAccess().getVersionVERSIONTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumValue__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumValueAccess().getValNUMBERTerminalRuleCall_0()); }
	RULE_NUMBER{ after(grammarAccess.getNumValueAccess().getValNUMBERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
	ruleQualifiedPrefix{ after(grammarAccess.getTypeAccess().getNameQualifiedPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__SetAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }

	'setOf' 

{ after(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getSetSetOfKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_1_1_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__SeqAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }

	'sequenceOf' 

{ after(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getSeqSequenceOfKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_2_1_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__MapAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }

	'mapOf' 

{ after(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getMapMapOfKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_3_1_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__CallAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }
(
{ before(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }

	'callOf' 

{ after(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }
)

{ after(grammarAccess.getTypeAccess().getCallCallOfKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ReturnAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getReturnTypeParserRuleCall_4_1_0()); }
	ruleType{ after(grammarAccess.getTypeAccess().getReturnTypeParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParamAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_4_2_0()); }
	ruleTypeParameters{ after(grammarAccess.getTypeAccess().getParamTypeParametersParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__ParamAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__ParamAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_2_1_0()); }
	ruleType{ after(grammarAccess.getTypeParametersAccess().getParamTypeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__ExprsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_0_0()); }
	ruleContainerInitializerExpression{ after(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializer__ExprsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_1_1_0()); }
	ruleContainerInitializerExpression{ after(grammarAccess.getContainerInitializerAccess().getExprsContainerInitializerExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializerExpression__LogicalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getLogicalLogicalExpressionParserRuleCall_0_0()); }
	ruleLogicalExpression{ after(grammarAccess.getContainerInitializerExpressionAccess().getLogicalLogicalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerInitializerExpression__ContainerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContainerInitializerExpressionAccess().getContainerContainerInitializerParserRuleCall_1_0()); }
	ruleContainerInitializer{ after(grammarAccess.getContainerInitializerExpressionAccess().getContainerContainerInitializerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_VERSION : 'v' ('0'..'9')+ ('.' ('0'..'9')+)*;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NUMBER : '-'? (('0'..'9')+ ('.' ('0'..'9')* RULE_EXPONENT?)?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT);

RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


