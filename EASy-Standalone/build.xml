<?xml version="1.0" encoding="UTF-8"?>
<!-- Project name must not contain whitespaces -->
<project name="StandaloneTools" default="all" basedir="."  xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<property file="${user.home}/migration.properties"/>
	<property file="${user.home}/global-build.properties"/>
	<property name="easyPlugins" value="easyPlugins"/>

	<include file="${user.home}/macros.xml"/>
	<include file="${home.base.dir}/${projects.standalone.dir}/standalone.macros.xml"/>
			
    <!-- Check - no typedef shall be required as installed in ANT/lib -->
    <path id="maven-ant-tasks.classpath" path="${ant-maven.lib}" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
       uri="antlib:org.apache.maven.artifact.ant"
       classpathref="maven-ant-tasks.classpath" />	
	
    <!-- force snapshot update - does not work in macros.xml  -->
    <artifact:remoteRepository id="easy.repository" url="${maven.repository}">
        <snapshots updatePolicy="always" />
    </artifact:remoteRepository>
	
	<target name="init">
		<!-- Delete generated folders -->
		<delete dir="junitResults"/>
		<delete dir="${easyPlugins}"/>
		<delete dir="build"/>
		
		<!-- Delete accidentally created files and folders -->
		<delete dir="easyLoader"/>
		<delete dir="emma"/>
		<delete dir="newGenerator"/>
				
		<!-- Create folders -->
		<mkdir dir="junitResults"/>
		<mkdir dir="${easyPlugins}"/>
		<mkdir dir="build"/>
		<mkdir dir="build/zip"/>
		<mkdir dir="build/zip/Plugins"/>
		<mkdir dir="build/zip/Features"/>
		<mkdir dir="build/generatedLibs"/>
        <mkdir dir="logs"/>
		
        <artifact:dependencies pathId="maven.compile.classpath">
            <pom file="pom.xml" id="pom"/>
            <remoteRepository refid="easy.repository" />
        </artifact:dependencies>
	</target>
	
	<target name="gather.easy.plugins">
		<copy todir="${easyPlugins}" failonerror="true" overwrite="true" flatten="true">
			<fileset dir="${home.base.dir}">
				<include name="**/build/jar/*.jar" />
			</fileset>
		</copy>
	</target>
	
	<target name="createLibs">
		<!-- Lib generation with Patrik's ANT plugin for automated EASy-Bundle generation -->
        <taskdef name="antgenerator" classname="de.uni_hildesheim.sse.easy.ant.AntGenerator" classpathref="easyTaskDef.lib"/>
        <!-- pluginPath="${easy.bundles.dir}" -->
        <!-- pluginPath="${easyPlugins}" -->
        <antgenerator forced="yes" pluginPath="${easy.bundles.dir}" target="${basedir}/build/generatedLibs"
            basedir="${basedir}" eclipsepath="${eclipse.plugins.dir}" classesPath="${home.easyLoader.dir}/build/classes"
            libsPath="${home.easyLoader.dir}/libs">
            
        	<basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.eclipseBase.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy_producer.core.no_eclipse_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.ivml.core_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.vil.core_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.reasoning.reasoner_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.apache.commons.io.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.instantiator.java.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy_producer.instantiation.velocity_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.eclipseInfrastructure.Feature"/>
            <addfeature path="${projects.features.dir}"/>
        </antgenerator>
		<copy file="${basedir}/build/generatedLibs/LoaderLog.txt" todir="${basedir}/logs/libs.log" failonerror="false"/>
        
        <!-- Fix me -->
		<copyDependencies target="${basedir}/build/generatedLibs/unbundled"/>
        
        <!-- copy generated bundles to command line tool before compilation -->
        <copy todir="EASyCommandLine/lib" failonerror="true" overwrite="true" flatten="true">
			<fileset dir="${basedir}/build/generatedLibs/unbundled">
				<include name="**/*.jar" />
			</fileset>
            <!--<fileset dir="${home.easyLoader.dir}/libs/">
				<include name="org.eclipse.osgi*.jar" />
			</fileset>-->
            <fileset dir="${eclipse.plugins.dir}">
				<include name="org.apache.ant*/lib/ant.jar" />
			</fileset>
		</copy>
        <!-- TODO deploy to Maven -->
    </target>

    <!-- standalone with some experimental stuff -->
	<target name="createLibs.ex">
        <mkdir dir="build/generatedLibs.ex"/>
	    <!-- Lib generation with Patrik's ANT plugin for automated EASy-Bundle generation -->
        <taskdef name="antgenerator" classname="de.uni_hildesheim.sse.easy.ant.AntGenerator" classpathref="easyTaskDef.lib"/>
        <!-- pluginPath="${easy.bundles.dir}" -->
        <!-- pluginPath="${easyPlugins}" -->
        <antgenerator forced="yes" pluginPath="${easy.bundles.dir}" target="${basedir}/build/generatedLibs.ex"
            basedir="${basedir}" eclipsepath="${eclipse.plugins.dir}" classesPath="${home.easyLoader.dir}/build/classes"
            libsPath="${home.easyLoader.dir}/libs">
            
        	<basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.eclipseBase.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy_producer.core.no_eclipse_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.ivml.core_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.vil.core_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.reasoning.reasoner_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.apache.commons.io.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.instantiator.java.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy_producer.instantiation.velocity_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.instantiator.maven.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.experimental.core_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.eclipseInfrastructure.Feature"/>
            <addfeature path="${projects.features.dir}"/>
        </antgenerator>
        <copy file="${basedir}/build/generatedLibs/LoaderLog.txt" todir="${basedir}/logs/libs-ex.log" failonerror="false"/>
        
        <!-- Fix me -->
        <copyDependencies target="${basedir}/build/generatedLibs.ex/unbundled"/>
        <dist target="build/generatedLibs.ex" />        
        <!-- cannot be bundled due to various conflicts, rans anyway in own process -->
        <withMaven target="build/generatedLibs.ex"/>
        <!-- TODO deploy to Maven -->
    </target>
    
    <!-- standalone runtime without xText but full Java instantiators and some experimental stuff - QM version is 
         smaller-->
    <target name="createLibs.runtimeNoXtext">
        <mkdir dir="build/generatedLibs.rt.noXtext"/>
        <!-- Lib generation with Patrik's ANT plugin for automated EASy-Bundle generation -->
        <taskdef name="antgenerator" classname="de.uni_hildesheim.sse.easy.ant.AntGenerator" classpathref="easyTaskDef.lib"/>
        <!-- pluginPath="${easy.bundles.dir}" -->
        <!-- pluginPath="${easyPlugins}" -->
        <antgenerator forced="yes" pluginPath="${easy.bundles.dir}" target="${basedir}/build/generatedLibs.rt.noXtext"
            basedir="${basedir}" eclipsepath="${eclipse.plugins.dir}" classesPath="${home.easyLoader.dir}/build/classes"
            libsPath="${home.easyLoader.dir}/libs">
            
        	<basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.eclipseBase.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.runtime_feature_noXtext"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.reasoning.reasoner_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.instantiator.java.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.apache.commons.io.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy_producer.instantiation.velocity_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.instantiator.maven.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.instantiator.serializer.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.eclipseInfrastructure.Feature"/>
            <addfeature path="${projects.features.dir}"/>
        </antgenerator>
        <copy file="${basedir}/build/generatedLibs/LoaderLog.txt" todir="${basedir}/logs/libs-noXtext.log" failonerror="false"/>
        
        <!-- Fix me -->
        <copyDependencies target="${basedir}/build/generatedLibs.rt.noXtext/unbundled"/>
        <dist target="build/generatedLibs.rt.noXtext" />
        <!-- cannot be bundled due to various conflicts, rans anyway in own process -->
        <withMaven target="build/generatedLibs.rt.noXtext"/>
    </target>
	
    <!-- a runtime library version - however containing full EASy :o -->
    <target name="createLibs.runtime">
        <mkdir dir="build/generatedLibs.rt"/>
        <!-- Lib generation with Patrik's ANT plugin for automated EASy-Bundle generation -->
        <taskdef name="antgenerator" classname="de.uni_hildesheim.sse.easy.ant.AntGenerator" classpathref="easyTaskDef.lib"/>
        <!-- pluginPath="${easy.bundles.dir}" -->
        <!-- pluginPath="${easyPlugins}" -->
        <antgenerator forced="yes" pluginPath="${easy.bundles.dir}" target="${basedir}/build/generatedLibs.rt"
            basedir="${basedir}" eclipsepath="${eclipse.plugins.dir}" classesPath="${home.easyLoader.dir}/build/classes"
            libsPath="${home.easyLoader.dir}/libs">
            
        	<basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.eclipseBase.feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.runtime_feature"/>
            <!-- is this one really required, as no_eclipse indirectly requires full EASy -->
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy_producer.core.no_eclipse_feature"/>
            <basefeature path="${projects.features.dir}/de.uni_hildesheim.sse.easy.instantiator.java.feature"/>
            <addfeature path="${projects.features.dir}"/>
        </antgenerator>
        <copy file="${basedir}/build/generatedLibs/LoaderLog.txt" todir="${basedir}/logs/libs-rt.log" failonerror="false"/>
        
        <!-- Fix me -->
        <copyDependencies target="${basedir}/build/generatedLibs.rt/unbundled"/>
		<dist target="build/generatedLibs.rt"/>
		<!-- cannot be bundled due to various conflicts, rans anyway in own process -->
        <withMaven target="build/generatedLibs.rt"/>
    </target>
    	
	<target name="compile">	
        <echo>#######################################</echo>
        <echo>###  CommandLine Tool (@Standalone) ###</echo>
        <echo>#######################################</echo>
        <ant dir="EASyCommandLine" antfile="${build.script.name}" />
        
        <echo>########################################</echo>
        <echo>###  CommandLine Tests (@Standalone) ###</echo>
        <echo>########################################</echo>
        <ant dir="EASyCommandLineTest" antfile="${build.script.name}" />
        
        <!--
        Create Distribution for standard EASyCommandLine
        (correct libs are already included, since they are gathered for compiling)
        -->
        <mkdir dir="build/generatedLibs/dist"/>
        <dist target="build/generatedLibs"/>
    </target>
    
    <target name="zip">
        <copy todir="build/zip/Plugins" failonerror="true" overwrite="true" flatten="true">
			<fileset dir="${easy.bundles.dir}">
				<include name="**/*.jar" />
			</fileset>
		</copy>
        <copy todir="build/zip/Features" failonerror="true" overwrite="true" flatten="false">
			<fileset dir="${projects.features.dir}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
        <zip destfile="build/zip/BundleSources.zip" basedir="build/zip"/>
    </target>
    
    <target name="cleanup">
        <delete dir="build/zip/Plugins"/>
        <delete dir="build/zip/Features"/>
    </target>
	
	<target name="deploy">
        <!-- deploy without experimental stuff -->
		<local name="srcFolder"/>
        <property name="srcFolder" value="${basedir}/build/generatedLibs/unbundled"/>
        <property name="tgtFolder" value="${basedir}/build/mvn"/>
		<mkdir dir="${tgtFolder}"/>

		<!-- deploy the easy dependences for standalone use/import as POM -->
	    <copy file="poms/pom-deps.xml" tofile="${tgtFolder}/pom.xml"/>
        <mvnDeployPom folderName="${ant.project.name}-deps" pomFile="${tgtFolder}/pom.xml" />
        <delete file="${tgtFolder}/pom.xml"/>
		
        <!-- deploy the specific eclipse libraries for the runtime version of EASy (not experimental) -->
        <copy file="poms/pomEclipse.xml" tofile="${tgtFolder}/pom.xml"/>
		<copy file="${srcFolder}/eclipse-part.jar" todir="${tgtFolder}"/>
        <mvnDeploy folderName="${ant.project.name}-eclipse" jarFolder="${tgtFolder}" jarFile="eclipse-part.jar" 
        	pomFile="${tgtFolder}/pom.xml"/>
        <delete file="${tgtFolder}/pom.xml"/>

        <!-- deploy the basic runtime version of EASy (not experimental) -->
        <copy file="poms/pomEasy.xml" tofile="${tgtFolder}/pom.xml"/>
        <copy file="${srcFolder}/easy-headless.jar" tofile="${tgtFolder}/easy-headless.jar"/>
        <delFromZip zip="${tgtFolder}/easy-headless.jar" path="org/apache/log4j"/>
        <copy failonerror="false" file="${home.easy.easy-producer.docu.dir}/javadoc.zip" tofile="${tgtFolder}/easy-headless-javadoc.jar"/>
        <copy failonerror="false" file="${home.easy.easy-producer.docu.dir}/src.zip" tofile="${tgtFolder}/easy-headless-sources.jar"/>
        <mvnDeploy folderName="${ant.project.name}-easy" jarFolder="${tgtFolder}" jarFile="easy-headless.jar"
            pomFile="${tgtFolder}/pom.xml"/>

        <copy file="poms/pomEasy-mvn.xml" tofile="${tgtFolder}/pom.xml" overwrite="true"/>
        <mvnDeploy folderName="${ant.project.name}-easy-mvn" jarFolder="${tgtFolder}" jarFile="easy-headless.jar"
            pomFile="${tgtFolder}/pom.xml"/>
		
		<delete file="${tgtFolder}/pom.xml"/>

        <!-- deploy with experimental stuff -->
        <property name="srcFolder" value="${basedir}/build/generatedLibs.ex/unbundled"/>

        <!-- deploy the specific eclipse libraries for the runtime version of EASy (experimental) -->
        <copy file="poms/pomEclipseEx.xml" tofile="${tgtFolder}/pom.xml"/>
        <copy file="${srcFolder}/eclipse-part.jar" todir="${tgtFolder}"/>
        <mvnDeploy folderName="${ant.project.name}-eclipse-ex" jarFolder="${tgtFolder}" jarFile="eclipse-part.jar"
            pomFile="${tgtFolder}/pom.xml"/>
        <delete file="${tgtFolder}/pom.xml"/>

        <!-- deploy the runtime version of EASy (experimental) -->
        <copy file="poms/pomEasyEx.xml" tofile="${tgtFolder}/pom.xml"/>
        <copy file="${srcFolder}/easy-headless.jar" tofile="${tgtFolder}/easy-headless.jar"/>
        <delFromZip zip="${tgtFolder}/easy-headless.jar" path="org/apache/log4j"/>
        <copy failonerror="false" file="${home.easy.easy-producer.docu.dir}/javadoc.zip" tofile="${tgtFolder}/easy-headless-javadoc.jar"/>
		<copy failonerror="false" file="${home.easy.easy-producer.docu.dir}/src.zip" tofile="${tgtFolder}/easy-headless-sources.jar"/>
        <mvnDeploy folderName="${ant.project.name}-easy-ex" jarFolder="${tgtFolder}" jarFile="easy-headless.jar"
            pomFile="${tgtFolder}/pom.xml"/>

        <copy file="poms/pomEasyEx-mvn.xml" tofile="${tgtFolder}/pom.xml" overwrite="true"/>
        <mvnDeploy folderName="${ant.project.name}-easy-ex-mvn" jarFolder="${tgtFolder}" jarFile="easy-headless.jar"
            pomFile="${tgtFolder}/pom.xml"/>
		
		<delete file="${tgtFolder}/pom.xml"/>

        <!-- deploy with no xText -->
        <property name="srcFolder" value="${basedir}/build/generatedLibs.rt.noXtext/unbundled"/>

        <!-- deploy the specific eclipse libraries for the runtime version of EASy (noXText) -->
		<copy file="poms/pomEclipseNoXtext.xml" tofile="${tgtFolder}/pom.xml"/>
        <copy file="${srcFolder}/eclipse-part.jar" todir="${tgtFolder}"/>
        <mvnDeploy folderName="${ant.project.name}-eclipse-ex" jarFolder="${tgtFolder}" jarFile="eclipse-part.jar"
            pomFile="${tgtFolder}/pom.xml"/>
        <delete file="${tgtFolder}/pom.xml"/>

        <!-- deploy the runtime version of EASy (noXText) -->
        <copy file="poms/pomEasyNoXtext.xml" tofile="${tgtFolder}/pom.xml"/>
        <copy file="${srcFolder}/easy-headless.jar" tofile="${tgtFolder}/easy-headless.jar"/>
        <delFromZip zip="${tgtFolder}/easy-headless.jar" path="org/apache/log4j"/>
        <copy failonerror="false" file="${home.easy.easy-producer.docu.dir}/javadoc.zip" tofile="${tgtFolder}/easy-headless-javadoc.jar"/>
        <copy failonerror="false" file="${home.easy.easy-producer.docu.dir}/src.zip" tofile="${tgtFolder}/easy-headless-sources.jar"/>
        <mvnDeploy folderName="${ant.project.name}-easy-noxtext" jarFolder="${tgtFolder}" jarFile="easy-headless.jar"
            pomFile="${tgtFolder}/pom.xml"/>

        <copy file="poms/pomEasyNoXtext-mvn.xml" tofile="${tgtFolder}/pom.xml" overwrite="true"/>
        <mvnDeploy folderName="${ant.project.name}-easy-noxtext-mvn" jarFolder="${tgtFolder}" jarFile="easy-headless.jar"
            pomFile="${tgtFolder}/pom.xml"/>
        
        <delete file="${tgtFolder}/pom.xml"/>

		<delete dir="${tgtFolder}"/>
	</target>

	<target name="testMvn">
		<!-- for mvn and changing POM, we must use ant calls / new environments -->
		<property name="testDir" value="EASy-Standalone-mvn-prebuilt"/>
		<property name="testPath" value="${basedir}/EASy-Standalone-mvn-prebuilt"/>
		<property name="junitPath" value="${basedir}/junit"/>
        <copy file="${testPath}/pom.xml" tofile="${testPath}/pom.copy.xml" overwrite="true"/>

		<!-- DISABLE FOR NOW, MVN signing problem :( ???
        <echo>#####################################################################</echo>
        <echo>###  EASy-Standalone-mvn-prebuilt (net.ssehub.easy.runtime:EASy)  ###</echo>
        <echo>#####################################################################</echo>
        <ant dir="${testDir}" antfile="${build.script.name}" />
		<copy file="${testDir}/junit/TEST-standalone.AllTests.xml" tofile="${junitPath}/TEST-standalone.AllTests-easy.xml"/>
		
        <copy file="${testPath}/poms/pom-mvn.xml" tofile="${testPath}/pom.xml" overwrite="true"/>
        <echo>#########################################################################</echo>
        <echo>###  EASy-Standalone-mvn-prebuilt (net.ssehub.easy.runtime:EASy-mvn)  ###</echo>
        <echo>#########################################################################</echo>
        <ant dir="${testDir}" antfile="${build.script.name}" />
		<copy file="${testDir}/junit/TEST-standalone.AllTests.xml" tofile="${junitPath}/TEST-standalone.AllTests-easy-mvn.xml"/>

        <copy file="${testPath}/poms/pomEx.xml" tofile="${testPath}/pom.xml" overwrite="true"/>
        <echo>##################################################################################</echo>
        <echo>###  EASy-Standalone-mvn-prebuilt (net.ssehub.easy.runtime:EASy-experimental)  ###</echo>
        <echo>##################################################################################</echo>
        <ant dir="${testDir}" antfile="${build.script.name}" />
		<copy file="${testDir}/junit/TEST-standalone.AllTests.xml" tofile="${junitPath}/TEST-standalone.AllTests-easy-ex.xml"/>
		
        <copy file="${testPath}/poms/pomEx-mvn.xml" tofile="${testPath}/pom.xml" overwrite="true"/>
        <echo>######################################################################################</echo>
        <echo>###  EASy-Standalone-mvn-prebuilt (net.ssehub.easy.runtime:EASy-experimental-mvn)  ###</echo>
        <echo>######################################################################################</echo>
        <ant dir="${testDir}" antfile="${build.script.name}" />
		<copy file="${testDir}/junit/TEST-standalone.AllTests.xml" tofile="${junitPath}/TEST-standalone.AllTests-easy-ex-mvn.xml"/>

	    <copy file="${testPath}/pom.copy.xml" tofile="${testPath}/pom.xml" overwrite="true"/>
		<junitreport tofile="junitReport.xml">
            <fileset dir="${junitPath}">
                    <include name="TEST-*.xml" />
            </fileset>
            <fileset dir="${basedir}/EASyCommandLineTest/junit">
                    <include name="TEST-*.xml" />
            </fileset>
        </junitreport>
        -->
    </target>

	<!--target name="all" depends="init, gather.easy.plugins, createLibs, compile"/-->
	<!--<target name="all" depends="init, createLibs, compile, zip, createLibs.ex, createLibs.runtime, createLibs.runtimeNoXtext, deploy, testMvn, cleanup"/>
	<target name="all.runtime" depends="init, createLibs, compile, zip, createLibs.ex, createLibs.runtime, createLibs.runtimeNoXtext, deploy, testMvn, cleanup"/>-->
	<target name="all" depends="init, compile"/>
	<target name="all.runtime" depends="init, compile"/>
</project>
