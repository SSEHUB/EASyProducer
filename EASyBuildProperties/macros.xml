<?xml version="1.0" encoding="UTF-8"?>
<project name="QualiMaster.Macros" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
 
   <property file="${user.home}/global-build.properties"/>
   
   <!--  <mvnDeploy folderName="${ant.project.name}" jarFolder="${build.jar.dir}" jarFile="${ant.project.name}.jar"/> -->
   
    <path id="maven-ant-tasks.classpath" path="${ant-maven.lib}" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
       uri="antlib:org.apache.maven.artifact.ant"
       classpathref="maven-ant-tasks.classpath" />
    
   <!-- a plain maven call if the integration is not sufficent -->
   <macrodef name="mvnPlain">
     <attribute name="options" default="" />
     <attribute name="goal" />
     <attribute name="basedir" />
     <attribute name="resultproperty" default="maven.result" />
     <element name="args" implicit="true" optional="true" />
     <sequential>
       <java classname="org.codehaus.classworlds.Launcher" fork="true"
             dir="@{basedir}" resultproperty="@{resultproperty}"
             failonerror="true">
         <jvmarg value="-Xmx512m"/>
         <jvmarg value="-Dmaven.multiModuleProjectDirectory" />
         <classpath>
           <fileset dir="${maven.bin.dir}/boot">
             <include name="*.jar" />
           </fileset>
           <fileset dir="${maven.bin.dir}/lib">
             <include name="*.jar" />
           </fileset>
         </classpath>
         <sysproperty key="classworlds.conf" value="${maven.bin.dir}/bin/m2.conf" />
         <sysproperty key="maven.home" value="${maven.bin.dir}" />
         <arg line="--batch-mode @{options} @{goal}" />
       </java>
     </sequential>
   </macrodef>
    
   <!-- deploy built files to the public maven repository (src, test missing) -->
   <macrodef name="mvnDeploy">
     <attribute name="folderName" default="NOT SET"/>
     <attribute name="pomFile" default="pom.xml"/> 
     <attribute name="jarFolder" default="NOT SET"/> 
     <attribute name="jarFile" default="NOT SET"/>
     <sequential>
        <local name="folder"/>
        <property name="folder" value="${maven.repository.uploadDir}/@{folderName}"/>
        <local name="connectString"/>
        <property name="connectString" value="${maven.repository.user}@${maven.repository.server}"/>
        <sshexec host="${maven.repository.server}" username="${maven.repository.user}" trust="true" keyfile="${maven.repository.keyfile}" 
            command="mkdir -p ${folder}"/>
        <scp todir="${connectString}:${folder}" trust="true" keyfile="${maven.repository.keyfile}" file="@{pomFile}"/>
        <scp todir="${connectString}:${folder}" trust="true" keyfile="${maven.repository.keyfile}">
            <fileset dir="@{jarFolder}">
                <include name="*.jar"/>
                <include name="*.zip"/>
            </fileset>
        </scp>
        <sshexec host="${maven.repository.server}" username="${maven.repository.user}" trust="true" keyfile="${maven.repository.keyfile}" 
            command="./deployMvnQm.sh ${folder} @{jarFile}"/>         
     </sequential>
   </macrodef>
   
   <!-- like mvnDeploy but resolve artifactPattern (may be with wildcards) in jarFolder first and pass both as jarFolder/jarFile to mvnDeploy -->
   <macrodef name="mvnDeployResolveArtifact">
     <attribute name="folderName" default="NOT SET"/>
     <attribute name="pomFile" default="pom.xml"/> 
     <attribute name="jarFolder" default="target"/>
     <attribute name="artifactPattern" default="NOT SET"/>
     <sequential>
       <path id="jarFile.id">
          <fileset dir="@{jarFolder}">
            <include name="@{artifactPattern}"/>
          </fileset>
        </path>
        <local name="temp"/>
        <property name="temp" refid="jarFile.id"/>
        <local name="jarFile"/>
        <basename property="jarFile" file="${temp}"/>
        <mvnDeploy folderName="@{folderName}" pomFile="@{pomFile}" jarFolder="@{jarFolder}/" jarFile="${jarFile}" />
     </sequential>
   </macrodef>
   
   <!-- deploy pom only, e.g., for parent pom or dependency management -->
   <macrodef name="mvnDeployPom">
     <attribute name="folderName" default="NOT SET"/>
     <attribute name="pomFile" default="pom.xml"/> 
     <sequential>
        <local name="folder"/>
        <property name="folder" value="${maven.repository.uploadDir}/@{folderName}"/>
        <local name="connectString"/>
        <property name="connectString" value="${maven.repository.user}@${maven.repository.server}"/>
        <sshexec host="${maven.repository.server}" username="${maven.repository.user}" trust="true" keyfile="${maven.repository.keyfile}" 
            command="mkdir -p ${folder}"/>
        <scp todir="${connectString}:${folder}" trust="true" keyfile="${maven.repository.keyfile}" file="@{pomFile}"/>
        <sshexec host="${maven.repository.server}" username="${maven.repository.user}" trust="true" keyfile="${maven.repository.keyfile}" 
            command="./deployMvnQm.sh ${folder} pom.xml"/>         
     </sequential>
   </macrodef>
        
   <!-- force an update of the local maven repository (artifact:mvn does not work here) -->
   <macrodef name="mavenUpdate">
      <attribute name="pomFile" default="NOT_SET"/>
      <sequential>
        <local name="mavenUpdate.baseDir"/>
        <dirname file="@{pomFile}" property="mavenUpdate.baseDir"/>
        <mvnPlain options="-U" goal="validate" basedir="${mavenUpdate.baseDir}"/>
        <!-- <artifact:mvn mavenHome="${maven.bin.dir}" pom="@{pomFile}" fork="true" failonerror="false">
            <arg value="-U validate"/>
        </artifact:mvn> -->
      </sequential>
   </macrodef>

   <!-- perform an update of the local repository and execute maven with a pom file and a goal -->
   <macrodef name="maven">
      <attribute name="pomFile" default="NOT_SET"/>
      <attribute name="goal" default="install"/>
      <sequential>  
        <local name="pomDir"/>
        <dirname file="@{pomFile}" property="pomDir"/>
        <mvnPlain options="-U" goal="@{goal}" basedir="${pomDir}"/>
        <!--  <mavenUpdate pomFile="@{pomFile}"/>
        <artifact:mvn mavenHome="${maven.bin.dir}" pom="@{pomFile}" fork="true" failonerror="true">
            <arg value="@{goal}"/>
        </artifact:mvn>-->
      </sequential>
   </macrodef>

   <!-- build with maven and deploy -->
   <!-- maven seems to need the target repository in every pom as well as build extensions for scp - no setting for that -->
   <macrodef name="mavenAndDeploy">
      <attribute name="pomFile" default="NOT_SET"/>
      <attribute name="goal" default="install"/>
      <sequential>
       <maven pomFile="@{pomFile}" goal="@{goal}"/>
       <local name="projectFolder"/>
       <dirname file="@{pomFile}" property="projectFolder"/>
       <local name="targetFolder"/>
       <property name="targetFolder" location="${projectFolder}/target"/>
       <path id="jarPath">
           <fileset dir="${targetFolder}">
               <include name="*.jar"/>
               <exclude name="*-sources.jar"/>
           </fileset>
       </path>
       <local name="projectName"/>
       <basename file="${projectFolder}" property="projectName"/>
       <local name="jarFile"/>
       <basename file="${toString:jarPath}" property="jarFile"/>
       <mvnDeploy folderName="${projectName}" pomFile="@{pomFile}" jarFolder="${targetFolder}" jarFile="${jarFile}"/>
      </sequential>
   </macrodef>
    
   <macrodef name="clearMavenRepo">
    <sequential>
      <sshexec host="${maven.repository.server}" username="${maven.repository.user}" trust="true" keyfile="${maven.repository.keyfile}" 
        command="./cleanMvnQm.sh"/>         
    </sequential>
   </macrodef>
	
   <macrodef name="easyJavadoc">
	  <attribute name="packagenames" default="de.*,net.*"/>
	  <attribute name="sourcepath" default="src"/>
	  <attribute name="destdir" default="${doc.dir}"/>
	  <attribute name="windowtitle" default="${ant.project.name} API"/>
	  <attribute name="source" default="1.6"/>
	  <element name="elements" implicit="true" optional="true" />
	  <sequential>
        <javadoc packagenames="@{packagenames}" 
            private="true"
            maxmemory="1g"
            defaultexcludes="yes"
            sourcepath="@{sourcepath}"
            destdir="@{destdir}"
            author="true"
            version="true"
            use="true"
            Encoding="${javadoc.encoding}"
            useexternalfile="yes"
            source="@{source}"
            windowtitle="@{windowtitle}">
        	<elements/>
            <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2009 - 2018 SSE. All Rights Reserved.</i>]]></bottom>
        </javadoc>
	  </sequential>
	</macrodef>

	<!-- remove path from zip -->
    <macrodef name="delFromZip">
      <attribute name="zip"/>
      <attribute name="path"/>
      <sequential>
          <mkdir dir="__tmp__"/>
          <unzip dest="__tmp__" src="@{zip}"/>
          <delete file="@{zip}"/>
          <delete dir="__tmp__/@{path}"/>
          <zip destfile="@{zip}" basedir="__tmp__"/>
          <delete dir="__tmp__"/>
      </sequential>
   </macrodef>
	
    <!-- remove path/pattern from zip -->
    <macrodef name="delFromZipPattern">
      <attribute name="zip"/>
      <attribute name="includes"/>
      <sequential>
          <mkdir dir="__tmp__"/>
          <unzip dest="__tmp__" src="@{zip}"/>
          <delete file="@{zip}"/>
          <delete>
             <fileset dir="__tmp__" includes="@{includes}"/>
          </delete>
          <zip destfile="@{zip}" basedir="__tmp__"/>
          <delete dir="__tmp__"/>
      </sequential>
   </macrodef>
	
   <macrodef name="eclipseLauncher">
    <attribute name="failonerror" default="true"/>
   	<attribute name="maxmemory" default="128m"/>
   	<attribute name="fork" default="true"/>
   	<attribute name="classpath" default="${eclipse.launcher.classpath}"/>
    <element name="elements" implicit="true" optional="true" />
   	<sequential>
        <java jar="${eclipse.launcher}" classpath="@{classpath}" fork="@{fork}" failonerror="@{failonerror}" maxmemory="@{maxmemory}">
            <jvmarg value="-Dosgi.os=linux"/>
            <jvmarg value="-Dosgi.ws=gtk"/>
            <jvmarg value="-Dosgi.arch=x86_64"/>
        	<elements/>
        </java>
    </sequential>
   </macrodef>
      
</project>
